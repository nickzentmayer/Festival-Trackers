
stm32h7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0801a760  0801a760  0001b760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ad48  0801ad48  0001bd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ad50  0801ad50  0001bd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ad54  0801ad54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d0  24000000  0801ad58  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00077400  240002d0  0801b028  0001c2d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240776d0  0801b028  0001c6d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c2d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000386df  00000000  00000000  0001c2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006bf8  00000000  00000000  000549dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002938  00000000  00000000  0005b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fe8  00000000  00000000  0005df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000aa31  00000000  00000000  0005fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000390cc  00000000  00000000  0006a929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d099  00000000  00000000  000a39f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00220a8e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c5b8  00000000  00000000  00220ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0022d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a744 	.word	0x0801a744

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	0801a744 	.word	0x0801a744

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <Process_GGA_Sentence>:
#include "gps_tools.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

bool Process_GGA_Sentence(const char *gga_sentence, GPS_Data *gps_data) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	gps_data->valid = false;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]

    // Check if it is a GGA sentence
    if (strncmp(gga_sentence, "$GPGGA", 6) != 0) {
 8000a78:	2206      	movs	r2, #6
 8000a7a:	4975      	ldr	r1, [pc, #468]	@ (8000c50 <Process_GGA_Sentence+0x1e8>)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f017 fb1e 	bl	80180be <strncmp>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <Process_GGA_Sentence+0x24>
        return false; // Not a GGA sentence
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e0dc      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Find the end of the sentence (length of checksum is always 2 characters + '*')
	const char *end_of_sentence = gga_sentence + strlen(gga_sentence) - 3;
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fc27 	bl	80002e0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	3b03      	subs	r3, #3
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]

	// Extract and calculate checksum
	uint8_t calculated_checksum = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	e009      	b.n	8000abe <Process_GGA_Sentence+0x56>
		calculated_checksum ^= *p;
 8000aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (const char *p = gga_sentence + 1; p < end_of_sentence; p++) {
 8000ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aba:	3301      	adds	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d3f1      	bcc.n	8000aaa <Process_GGA_Sentence+0x42>
	}

    // Convert the provided checksum to an integer
    uint8_t provided_checksum = (uint8_t)strtol(end_of_sentence + 1, NULL, 16);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	2210      	movs	r2, #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f016 fda6 	bl	8017620 <strtol>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]

    // Validate the checksum
    if (calculated_checksum != provided_checksum) {
 8000ad8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d001      	beq.n	8000ae6 <Process_GGA_Sentence+0x7e>
        return false; // Checksum mismatch
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e0af      	b.n	8000c46 <Process_GGA_Sentence+0x1de>
    }

    // Process the GGA fields
    char *token;
    char *nmea_copy = strdup(gga_sentence);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f017 face 	bl	8018088 <strdup>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60bb      	str	r3, [r7, #8]
    token = strtok(nmea_copy, ",");
 8000af0:	4958      	ldr	r1, [pc, #352]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000af2:	68b8      	ldr	r0, [r7, #8]
 8000af4:	f017 faf6 	bl	80180e4 <strtok>
 8000af8:	6278      	str	r0, [r7, #36]	@ 0x24

    int field_number = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
    float raw_latitude = 0.0;
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    float raw_longitude = 0.0;
 8000b04:	f04f 0300 	mov.w	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
    char lat_dir = 'N';
 8000b0a:	234e      	movs	r3, #78	@ 0x4e
 8000b0c:	75fb      	strb	r3, [r7, #23]
    char lon_dir = 'E';
 8000b0e:	2345      	movs	r3, #69	@ 0x45
 8000b10:	75bb      	strb	r3, [r7, #22]

    while (token != NULL) {
 8000b12:	e076      	b.n	8000c02 <Process_GGA_Sentence+0x19a>
        switch (field_number) {
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	2b06      	cmp	r3, #6
 8000b1a:	d86a      	bhi.n	8000bf2 <Process_GGA_Sentence+0x18a>
 8000b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <Process_GGA_Sentence+0xbc>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b41 	.word	0x08000b41
 8000b28:	08000b67 	.word	0x08000b67
 8000b2c:	08000b83 	.word	0x08000b83
 8000b30:	08000b93 	.word	0x08000b93
 8000b34:	08000baf 	.word	0x08000baf
 8000b38:	08000bbf 	.word	0x08000bbf
 8000b3c:	08000bd3 	.word	0x08000bd3
            case 1: // Timestamp
                if (*token) {
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d04b      	beq.n	8000be0 <Process_GGA_Sentence+0x178>
                    sscanf(token, "%2d%2d%f", &gps_data->hours, &gps_data->minutes, &gps_data->seconds);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f103 020c 	add.w	r2, r3, #12
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f103 0110 	add.w	r1, r3, #16
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3314      	adds	r3, #20
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	493e      	ldr	r1, [pc, #248]	@ (8000c58 <Process_GGA_Sentence+0x1f0>)
 8000b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b60:	f017 f986 	bl	8017e70 <siscanf>
                }
                break;
 8000b64:	e03c      	b.n	8000be0 <Process_GGA_Sentence+0x178>
            case 2: // Latitude
                if (*token) {
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d03a      	beq.n	8000be4 <Process_GGA_Sentence+0x17c>
                    raw_latitude = atof(token);
 8000b6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b70:	f015 fe52 	bl	8016818 <atof>
 8000b74:	eeb0 7b40 	vmov.f64	d7, d0
 8000b78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b7c:	edc7 7a07 	vstr	s15, [r7, #28]
                }
                break;
 8000b80:	e030      	b.n	8000be4 <Process_GGA_Sentence+0x17c>
            case 3: // Latitude direction (N/S)
                if (*token) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02e      	beq.n	8000be8 <Process_GGA_Sentence+0x180>
                    lat_dir = *token;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8000b90:	e02a      	b.n	8000be8 <Process_GGA_Sentence+0x180>
            case 4: // Longitude
                if (*token) {
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d028      	beq.n	8000bec <Process_GGA_Sentence+0x184>
                    raw_longitude = atof(token);
 8000b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b9c:	f015 fe3c 	bl	8016818 <atof>
 8000ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba8:	edc7 7a06 	vstr	s15, [r7, #24]
                }
                break;
 8000bac:	e01e      	b.n	8000bec <Process_GGA_Sentence+0x184>
            case 5: // Longitude direction (E/W)
                if (*token) {
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01c      	beq.n	8000bf0 <Process_GGA_Sentence+0x188>
                    lon_dir = *token;
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	75bb      	strb	r3, [r7, #22]
                }
                break;
 8000bbc:	e018      	b.n	8000bf0 <Process_GGA_Sentence+0x188>
            case 6: // Fix status
                gps_data->valid = (*token != '0');
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b30      	cmp	r3, #48	@ 0x30
 8000bc4:	bf14      	ite	ne
 8000bc6:	2301      	movne	r3, #1
 8000bc8:	2300      	moveq	r3, #0
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	701a      	strb	r2, [r3, #0]
                break;
 8000bd0:	e00f      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
            case 7: // Number of satellites
				gps_data->num_satellites = atoi(token);
 8000bd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000bd4:	f015 fe23 	bl	801681e <atoi>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	619a      	str	r2, [r3, #24]
				break;
 8000bde:	e008      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be0:	bf00      	nop
 8000be2:	e006      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be4:	bf00      	nop
 8000be6:	e004      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000be8:	bf00      	nop
 8000bea:	e002      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bec:	bf00      	nop
 8000bee:	e000      	b.n	8000bf2 <Process_GGA_Sentence+0x18a>
                break;
 8000bf0:	bf00      	nop
        }
        token = strtok(NULL, ",");
 8000bf2:	4918      	ldr	r1, [pc, #96]	@ (8000c54 <Process_GGA_Sentence+0x1ec>)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f017 fa75 	bl	80180e4 <strtok>
 8000bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        field_number++;
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
    while (token != NULL) {
 8000c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d185      	bne.n	8000b14 <Process_GGA_Sentence+0xac>
    }

    free(nmea_copy);
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f015 fe15 	bl	8016838 <free>

    // Convert to decimal format if the sentence is valid
    if (gps_data->valid) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d015      	beq.n	8000c42 <Process_GGA_Sentence+0x1da>
        gps_data->latitude = convert_to_decimal(raw_latitude, lat_dir);
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	ed97 0a07 	vldr	s0, [r7, #28]
 8000c1e:	f000 f81f 	bl	8000c60 <convert_to_decimal>
 8000c22:	eef0 7a40 	vmov.f32	s15, s0
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	edc3 7a01 	vstr	s15, [r3, #4]
        gps_data->longitude = convert_to_decimal(raw_longitude, lon_dir);
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c34:	f000 f814 	bl	8000c60 <convert_to_decimal>
 8000c38:	eef0 7a40 	vmov.f32	s15, s0
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return gps_data->valid;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	781b      	ldrb	r3, [r3, #0]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	0801a760 	.word	0x0801a760
 8000c54:	0801a768 	.word	0x0801a768
 8000c58:	0801a76c 	.word	0x0801a76c
 8000c5c:	00000000 	.word	0x00000000

08000c60 <convert_to_decimal>:

float convert_to_decimal(float nmea_coordinate, char direction) {
 8000c60:	b480      	push	{r7}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	70fb      	strb	r3, [r7, #3]
    int degrees = (int)(nmea_coordinate / 100);
 8000c6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c72:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000d00 <convert_to_decimal+0xa0>
 8000c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c7e:	ee17 3a90 	vmov	r3, s15
 8000c82:	613b      	str	r3, [r7, #16]
    float minutes = nmea_coordinate - (degrees * 100);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2264      	movs	r2, #100	@ 0x64
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9c:	edc7 7a03 	vstr	s15, [r7, #12]
    float decimal = degrees + minutes / 60.0;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cae:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cb2:	ed9f 4b11 	vldr	d4, [pc, #68]	@ 8000cf8 <convert_to_decimal+0x98>
 8000cb6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (direction == 'S' || direction == 'W') {
 8000cc6:	78fb      	ldrb	r3, [r7, #3]
 8000cc8:	2b53      	cmp	r3, #83	@ 0x53
 8000cca:	d002      	beq.n	8000cd2 <convert_to_decimal+0x72>
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b57      	cmp	r3, #87	@ 0x57
 8000cd0:	d105      	bne.n	8000cde <convert_to_decimal+0x7e>
        decimal *= -1;
 8000cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd6:	eef1 7a67 	vneg.f32	s15, s15
 8000cda:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    return decimal;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	ee07 3a90 	vmov	s15, r3
}
 8000ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	404e0000 	.word	0x404e0000
 8000d00:	42c80000 	.word	0x42c80000

08000d04 <LSM303AGR_Init>:
 *      Author: Tyler
 */

#include "lsm303agr.h"

HAL_StatusTypeDef LSM303AGR_Init(I2C_HandleTypeDef *hi2c) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // set accelerometer to 50Hz, normal power mode, all axes enabled
    data = 0x57; // 01010111
 8000d0c:	2357      	movs	r3, #87	@ 0x57
 8000d0e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, REG_CTRL_REG1_A, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d10:	2364      	movs	r3, #100	@ 0x64
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	2301      	movs	r3, #1
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f107 030f 	add.w	r3, r7, #15
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2220      	movs	r2, #32
 8000d22:	2132      	movs	r1, #50	@ 0x32
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f004 fca5 	bl	8005674 <HAL_I2C_Mem_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <LSM303AGR_Init+0x30>
        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e014      	b.n	8000d5e <LSM303AGR_Init+0x5a>
    }

    // set magnetometer to 50Hz, normal power mode, continuous read
    data = 0x88; // 10001000
 8000d34:	2388      	movs	r3, #136	@ 0x88
 8000d36:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Write(hi2c, ADDRESS_ACC, CFG_REG_A_M, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK) {
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f107 030f 	add.w	r3, r7, #15
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	2260      	movs	r2, #96	@ 0x60
 8000d4a:	2132      	movs	r1, #50	@ 0x32
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f004 fc91 	bl	8005674 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <LSM303AGR_Init+0x58>
            return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <LSM303AGR_Init+0x5a>
        }
    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <Display_Init>:
#define COLOR_BLUE           0x001F  // 16-bit RGB color: Blue

// Assuming LTDC and frame buffer are already initialized
LTDC_HandleTypeDef hltdc;

void Display_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    // Fill the screen with a solid color
    for (uint32_t y = 0; y < DISPLAY_HEIGHT; y++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e018      	b.n	8000da6 <Display_Init+0x3e>
        for (uint32_t x = 0; x < DISPLAY_WIDTH; x++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	e00e      	b.n	8000d98 <Display_Init+0x30>
            framebuffer[y * DISPLAY_WIDTH + x] = COLOR_BLUE;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	461a      	mov	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <Display_Init+0x58>)
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint32_t x = 0; x < DISPLAY_WIDTH; x++) {
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000d9e:	d3ec      	bcc.n	8000d7a <Display_Init+0x12>
    for (uint32_t y = 0; y < DISPLAY_HEIGHT; y++) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000dac:	d3e2      	bcc.n	8000d74 <Display_Init+0xc>
        }
    }

    // Trigger LTDC to refresh the display
    HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);  // Assuming hltdc is the LTDC handle
 8000dae:	2102      	movs	r1, #2
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <Display_Init+0x5c>)
 8000db2:	f006 f885 	bl	8006ec0 <HAL_LTDC_Reload>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	240006dc 	.word	0x240006dc
 8000dc4:	24000430 	.word	0x24000430

08000dc8 <_write>:

int _write(int file, char *ptr, int len) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
    CDC_Transmit_FS((uint8_t*)ptr, len);  // Transmit data via USB CDC
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f015 f88c 	bl	8015ef8 <CDC_Transmit_FS>
    return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000df2:	f000 fdc1 	bl	8001978 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f001 fd8d 	bl	8002914 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <main+0xf8>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e00:	4a38      	ldr	r2, [pc, #224]	@ (8000ee4 <main+0xf8>)
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <main+0xf8>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f884 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 fbac 	bl	8001578 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000e20:	f000 fb82 	bl	8001528 <MX_BDMA_Init>
  MX_LTDC_Init();
 8000e24:	f000 f940 	bl	80010a8 <MX_LTDC_Init>
  MX_SPI1_Init();
 8000e28:	f000 f9ec 	bl	8001204 <MX_SPI1_Init>
  MX_I2C4_Init();
 8000e2c:	f000 f8fc 	bl	8001028 <MX_I2C4_Init>
  MX_QUADSPI_Init();
 8000e30:	f000 f9bc 	bl	80011ac <MX_QUADSPI_Init>
  MX_TIM1_Init();
 8000e34:	f000 fa3c 	bl	80012b0 <MX_TIM1_Init>
  MX_UART8_Init();
 8000e38:	f000 fb2a 	bl	8001490 <MX_UART8_Init>
  MX_TIM6_Init();
 8000e3c:	f000 fae6 	bl	800140c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();          // Initialize USB CDC
 8000e40:	f014 ff9a 	bl	8015d78 <MX_USB_DEVICE_Init>

  // start receiving data on UART8 via interrupt, one byte at a time
  HAL_UART_Receive_IT(&huart8, (uint8_t*)rx_buffer, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	4928      	ldr	r1, [pc, #160]	@ (8000ee8 <main+0xfc>)
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <main+0x100>)
 8000e4a:	f00c fb57 	bl	800d4fc <HAL_UART_Receive_IT>
  HAL_Delay(2000);
 8000e4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e52:	f001 fdbb 	bl	80029cc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, LDO_EN_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4825      	ldr	r0, [pc, #148]	@ (8000ef0 <main+0x104>)
 8000e5c:	f004 fb3a 	bl	80054d4 <HAL_GPIO_WritePin>

  LSM303AGR_Init(&hi2c4);
 8000e60:	4824      	ldr	r0, [pc, #144]	@ (8000ef4 <main+0x108>)
 8000e62:	f7ff ff4f 	bl	8000d04 <LSM303AGR_Init>
  HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuffer, LTDC_LAYER_1);
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <main+0x10c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4823      	ldr	r0, [pc, #140]	@ (8000efc <main+0x110>)
 8000e6e:	f005 fff1 	bl	8006e54 <HAL_LTDC_SetAddress>

  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e78:	4821      	ldr	r0, [pc, #132]	@ (8000f00 <main+0x114>)
 8000e7a:	f004 fb2b 	bl	80054d4 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef st7701_init_status = ST7701_Init(&hspi1);
 8000e7e:	4821      	ldr	r0, [pc, #132]	@ (8000f04 <main+0x118>)
 8000e80:	f000 fdfa 	bl	8001a78 <ST7701_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  if (st7701_init_status != HAL_OK) {
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <main+0xaa>
	  printf("st7701 initialization failed!\n");
 8000e8e:	481e      	ldr	r0, [pc, #120]	@ (8000f08 <main+0x11c>)
 8000e90:	f016 ffc6 	bl	8017e20 <puts>
 8000e94:	e004      	b.n	8000ea0 <main+0xb4>
  } else {
	  printf("st7701 initialized! setting framebuffer to blue\n");
 8000e96:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <main+0x120>)
 8000e98:	f016 ffc2 	bl	8017e20 <puts>
	  Display_Init();
 8000e9c:	f7ff ff64 	bl	8000d68 <Display_Init>
  }
  fflush(stdout);
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <main+0x124>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f016 fe7c 	bl	8017ba4 <fflush>

//  HAL_GPIO_WritePin(GPIOB, GPS_ON_Pin, GPIO_PIN_SET);

//   Start PWM output on TIM1 Channel 1
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	4819      	ldr	r0, [pc, #100]	@ (8000f14 <main+0x128>)
 8000eb0:	f00b f920 	bl	800c0f4 <HAL_TIM_PWM_Start>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <main+0xd2>
  {
	  // Initialization Error
	  Error_Handler();
 8000eba:	f000 fdbf 	bl	8001a3c <Error_Handler>
  }
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <main+0x128>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <main+0x128>)
 8000ec4:	68d2      	ldr	r2, [r2, #12]
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ec8:	f012 f9fc 	bl	80132c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ecc:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <main+0x12c>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4812      	ldr	r0, [pc, #72]	@ (8000f1c <main+0x130>)
 8000ed2:	f012 fa41 	bl	8013358 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a11      	ldr	r2, [pc, #68]	@ (8000f20 <main+0x134>)
 8000eda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000edc:	f012 fa16 	bl	801330c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <main+0xf4>
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	24070edc 	.word	0x24070edc
 8000eec:	24000644 	.word	0x24000644
 8000ef0:	58020800 	.word	0x58020800
 8000ef4:	240002ec 	.word	0x240002ec
 8000ef8:	240006dc 	.word	0x240006dc
 8000efc:	24000430 	.word	0x24000430
 8000f00:	58021000 	.word	0x58021000
 8000f04:	24000524 	.word	0x24000524
 8000f08:	0801a784 	.word	0x0801a784
 8000f0c:	0801a7a4 	.word	0x0801a7a4
 8000f10:	24000280 	.word	0x24000280
 8000f14:	240005ac 	.word	0x240005ac
 8000f18:	0801a8a8 	.word	0x0801a8a8
 8000f1c:	080018f1 	.word	0x080018f1
 8000f20:	240006d8 	.word	0x240006d8

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09c      	sub	sp, #112	@ 0x70
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2e:	224c      	movs	r2, #76	@ 0x4c
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f017 f8a0 	bl	8018078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f017 f89a 	bl	8018078 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f007 fc23 	bl	8008790 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <SystemClock_Config+0xfc>)
 8000f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f52:	4a33      	ldr	r2, [pc, #204]	@ (8001020 <SystemClock_Config+0xfc>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f5a:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <SystemClock_Config+0xfc>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <SystemClock_Config+0x100>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <SystemClock_Config+0x100>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <SystemClock_Config+0x100>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f80:	bf00      	nop
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <SystemClock_Config+0x100>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f8e:	d1f8      	bne.n	8000f82 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000f90:	2323      	movs	r3, #35	@ 0x23
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9e:	2340      	movs	r3, #64	@ 0x40
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f007 fce0 	bl	8008998 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000fde:	f000 fd2d 	bl	8001a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	233f      	movs	r3, #63	@ 0x3f
 8000fe4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff6:	2340      	movs	r3, #64	@ 0x40
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f008 f920 	bl	800924c <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001012:	f000 fd13 	bl	8001a3c <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3770      	adds	r7, #112	@ 0x70
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	58000400 	.word	0x58000400
 8001024:	58024800 	.word	0x58024800

08001028 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <MX_I2C4_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <MX_I2C4_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <MX_I2C4_Init+0x74>)
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <MX_I2C4_Init+0x7c>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <MX_I2C4_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <MX_I2C4_Init+0x74>)
 8001040:	2201      	movs	r2, #1
 8001042:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <MX_I2C4_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <MX_I2C4_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <MX_I2C4_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <MX_I2C4_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <MX_I2C4_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001062:	480e      	ldr	r0, [pc, #56]	@ (800109c <MX_I2C4_Init+0x74>)
 8001064:	f004 fa6a 	bl	800553c <HAL_I2C_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800106e:	f000 fce5 	bl	8001a3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4809      	ldr	r0, [pc, #36]	@ (800109c <MX_I2C4_Init+0x74>)
 8001076:	f005 fd47 	bl	8006b08 <HAL_I2CEx_ConfigAnalogFilter>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001080:	f000 fcdc 	bl	8001a3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_I2C4_Init+0x74>)
 8001088:	f005 fd89 	bl	8006b9e <HAL_I2CEx_ConfigDigitalFilter>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 fcd3 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	240002ec 	.word	0x240002ec
 80010a0:	58001c00 	.word	0x58001c00
 80010a4:	00707cbb 	.word	0x00707cbb

080010a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	@ 0x38
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2234      	movs	r2, #52	@ 0x34
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f016 ffdf 	bl	8018078 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010ba:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010bc:	4a3a      	ldr	r2, [pc, #232]	@ (80011a8 <MX_LTDC_Init+0x100>)
 80010be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010c0:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010c6:	4b37      	ldr	r3, [pc, #220]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010d2:	4b34      	ldr	r3, [pc, #208]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 24;
 80010d8:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010da:	2218      	movs	r2, #24
 80010dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 80010de:	4b31      	ldr	r3, [pc, #196]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 54;
 80010e4:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010e6:	2236      	movs	r2, #54	@ 0x36
 80010e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 27;
 80010ea:	4b2e      	ldr	r3, [pc, #184]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010ec:	221b      	movs	r2, #27
 80010ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 534;
 80010f0:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010f2:	f240 2216 	movw	r2, #534	@ 0x216
 80010f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 507;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 80010fa:	f240 12fb 	movw	r2, #507	@ 0x1fb
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 538;
 8001100:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 8001102:	f240 221a 	movw	r2, #538	@ 0x21a
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 522;
 8001108:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 800110a:	f240 220a 	movw	r2, #522	@ 0x20a
 800110e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001118:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001120:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001128:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 800112a:	f005 fd85 	bl	8006c38 <HAL_LTDC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001134:	f000 fc82 	bl	8001a3c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800113c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001140:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001146:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800114a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001150:	23ff      	movs	r3, #255	@ 0xff
 8001152:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 150;
 8001154:	2396      	movs	r3, #150	@ 0x96
 8001156:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800115c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800115e:	2305      	movs	r3, #5
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x08100000;
 8001162:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001168:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 800116e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001174:	23ff      	movs	r3, #255	@ 0xff
 8001176:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_LTDC_Init+0xfc>)
 800118e:	f005 fe23 	bl	8006dd8 <HAL_LTDC_ConfigLayer>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001198:	f000 fc50 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	@ 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24000430 	.word	0x24000430
 80011a8:	50001000 	.word	0x50001000

080011ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <MX_QUADSPI_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011b8:	22ff      	movs	r2, #255	@ 0xff
 80011ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011be:	2201      	movs	r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_QUADSPI_Init+0x50>)
 80011e8:	f007 fb1c 	bl	8008824 <HAL_QSPI_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 fc23 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240004d8 	.word	0x240004d8
 8001200:	52005000 	.word	0x52005000

08001204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800120a:	4a28      	ldr	r2, [pc, #160]	@ (80012ac <MX_SPI1_Init+0xa8>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001210:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800121e:	2203      	movs	r2, #3
 8001220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001230:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800127a:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_SPI1_Init+0xa4>)
 8001294:	f00a f9d4 	bl	800b640 <HAL_SPI_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800129e:	f000 fbcd 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000524 	.word	0x24000524
 80012ac:	40013000 	.word	0x40013000

080012b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b09a      	sub	sp, #104	@ 0x68
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	222c      	movs	r2, #44	@ 0x2c
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f016 fec4 	bl	8018078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f0:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <MX_TIM1_Init+0x154>)
 80012f2:	4a45      	ldr	r2, [pc, #276]	@ (8001408 <MX_TIM1_Init+0x158>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80012f6:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <MX_TIM1_Init+0x154>)
 80012f8:	223f      	movs	r2, #63	@ 0x3f
 80012fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <MX_TIM1_Init+0x154>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001302:	4b40      	ldr	r3, [pc, #256]	@ (8001404 <MX_TIM1_Init+0x154>)
 8001304:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <MX_TIM1_Init+0x154>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001310:	4b3c      	ldr	r3, [pc, #240]	@ (8001404 <MX_TIM1_Init+0x154>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <MX_TIM1_Init+0x154>)
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131c:	4839      	ldr	r0, [pc, #228]	@ (8001404 <MX_TIM1_Init+0x154>)
 800131e:	f00a fd8a 	bl	800be36 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001328:	f000 fb88 	bl	8001a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001330:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001332:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001336:	4619      	mov	r1, r3
 8001338:	4832      	ldr	r0, [pc, #200]	@ (8001404 <MX_TIM1_Init+0x154>)
 800133a:	f00b fa05 	bl	800c748 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001344:	f000 fb7a 	bl	8001a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001348:	482e      	ldr	r0, [pc, #184]	@ (8001404 <MX_TIM1_Init+0x154>)
 800134a:	f00a fe72 	bl	800c032 <HAL_TIM_PWM_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001354:	f000 fb72 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001364:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001368:	4619      	mov	r1, r3
 800136a:	4826      	ldr	r0, [pc, #152]	@ (8001404 <MX_TIM1_Init+0x154>)
 800136c:	f00b ff4c 	bl	800d208 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001376:	f000 fb61 	bl	8001a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	@ 0x60
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001386:	2300      	movs	r3, #0
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800138e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001398:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4818      	ldr	r0, [pc, #96]	@ (8001404 <MX_TIM1_Init+0x154>)
 80013a2:	f00b f8bd 	bl	800c520 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80013ac:	f000 fb46 	bl	8001a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	@ (8001404 <MX_TIM1_Init+0x154>)
 80013e6:	f00b ff9d 	bl	800d324 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80013f0:	f000 fb24 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <MX_TIM1_Init+0x154>)
 80013f6:	f000 ffa7 	bl	8002348 <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3768      	adds	r7, #104	@ 0x68
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	240005ac 	.word	0x240005ac
 8001408:	40010000 	.word	0x40010000

0800140c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_TIM6_Init+0x7c>)
 800141e:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <MX_TIM6_Init+0x80>)
 8001420:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_TIM6_Init+0x7c>)
 8001424:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001428:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_TIM6_Init+0x7c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3000;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_TIM6_Init+0x7c>)
 8001432:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001436:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <MX_TIM6_Init+0x7c>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800143e:	4812      	ldr	r0, [pc, #72]	@ (8001488 <MX_TIM6_Init+0x7c>)
 8001440:	f00a fcf9 	bl	800be36 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800144a:	f000 faf7 	bl	8001a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	480b      	ldr	r0, [pc, #44]	@ (8001488 <MX_TIM6_Init+0x7c>)
 800145c:	f00b fed4 	bl	800d208 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001466:	f000 fae9 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0); // Set interrupt priority
 800146a:	2200      	movs	r2, #0
 800146c:	2105      	movs	r1, #5
 800146e:	2036      	movs	r0, #54	@ 0x36
 8001470:	f001 fb94 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); // Enable the TIM6 interrupt
 8001474:	2036      	movs	r0, #54	@ 0x36
 8001476:	f001 fbab 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6); // Start the timer with interrupts
 800147a:	4803      	ldr	r0, [pc, #12]	@ (8001488 <MX_TIM6_Init+0x7c>)
 800147c:	f00a fd32 	bl	800bee4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240005f8 	.word	0x240005f8
 800148c:	40001000 	.word	0x40001000

08001490 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <MX_UART8_Init+0x90>)
 8001496:	4a23      	ldr	r2, [pc, #140]	@ (8001524 <MX_UART8_Init+0x94>)
 8001498:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_UART8_Init+0x90>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_UART8_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_UART8_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_UART8_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_UART8_Init+0x90>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <MX_UART8_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_UART8_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_UART8_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_UART8_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_UART8_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80014d8:	4811      	ldr	r0, [pc, #68]	@ (8001520 <MX_UART8_Init+0x90>)
 80014da:	f00b ffbf 	bl	800d45c <HAL_UART_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80014e4:	f000 faaa 	bl	8001a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_UART8_Init+0x90>)
 80014ec:	f00e fa8b 	bl	800fa06 <HAL_UARTEx_SetTxFifoThreshold>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80014f6:	f000 faa1 	bl	8001a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	@ (8001520 <MX_UART8_Init+0x90>)
 80014fe:	f00e fac0 	bl	800fa82 <HAL_UARTEx_SetRxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001508:	f000 fa98 	bl	8001a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_UART8_Init+0x90>)
 800150e:	f00e fa41 	bl	800f994 <HAL_UARTEx_DisableFifoMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001518:	f000 fa90 	bl	8001a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24000644 	.word	0x24000644
 8001524:	40007c00 	.word	0x40007c00

08001528 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_BDMA_Init+0x4c>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <MX_BDMA_Init+0x4c>)
 8001536:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153e:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <MX_BDMA_Init+0x4c>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2105      	movs	r1, #5
 8001550:	2081      	movs	r0, #129	@ 0x81
 8001552:	f001 fb23 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001556:	2081      	movs	r0, #129	@ 0x81
 8001558:	f001 fb3a 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2105      	movs	r1, #5
 8001560:	2082      	movs	r0, #130	@ 0x82
 8001562:	f001 fb1b 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8001566:	2082      	movs	r0, #130	@ 0x82
 8001568:	f001 fb32 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	@ 0x30
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158e:	4b89      	ldr	r3, [pc, #548]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	4a87      	ldr	r2, [pc, #540]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159e:	4b85      	ldr	r3, [pc, #532]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b81      	ldr	r3, [pc, #516]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	4a80      	ldr	r2, [pc, #512]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015bc:	4b7d      	ldr	r3, [pc, #500]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	4b7a      	ldr	r3, [pc, #488]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d0:	4a78      	ldr	r2, [pc, #480]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015da:	4b76      	ldr	r3, [pc, #472]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b72      	ldr	r3, [pc, #456]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ee:	4a71      	ldr	r2, [pc, #452]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f8:	4b6e      	ldr	r3, [pc, #440]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b6b      	ldr	r3, [pc, #428]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	4a69      	ldr	r2, [pc, #420]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001616:	4b67      	ldr	r3, [pc, #412]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001624:	4b63      	ldr	r3, [pc, #396]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	4a62      	ldr	r2, [pc, #392]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001634:	4b5f      	ldr	r3, [pc, #380]	@ (80017b4 <MX_GPIO_Init+0x23c>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LDO_EN_Pin|TP_PC4_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2112      	movs	r1, #18
 8001646:	485c      	ldr	r0, [pc, #368]	@ (80017b8 <MX_GPIO_Init+0x240>)
 8001648:	f003 ff44 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_PA2_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f248 0104 	movw	r1, #32772	@ 0x8004
 8001652:	485a      	ldr	r0, [pc, #360]	@ (80017bc <MX_GPIO_Init+0x244>)
 8001654:	f003 ff3e 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800165e:	4858      	ldr	r0, [pc, #352]	@ (80017c0 <MX_GPIO_Init+0x248>)
 8001660:	f003 ff38 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_RST_Pin|GPS_ON_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800166a:	4856      	ldr	r0, [pc, #344]	@ (80017c4 <MX_GPIO_Init+0x24c>)
 800166c:	f003 ff32 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001676:	4851      	ldr	r0, [pc, #324]	@ (80017bc <MX_GPIO_Init+0x244>)
 8001678:	f003 ff2c 	bl	80054d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800167c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001682:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001688:	2302      	movs	r3, #2
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4849      	ldr	r0, [pc, #292]	@ (80017b8 <MX_GPIO_Init+0x240>)
 8001694:	f003 fd56 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin TP_PC4_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|TP_PC4_Pin;
 8001698:	2312      	movs	r3, #18
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	4842      	ldr	r0, [pc, #264]	@ (80017b8 <MX_GPIO_Init+0x240>)
 80016b0:	f003 fd48 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_PA2_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = TP_PA2_Pin|LORA_NSS_Pin;
 80016b4:	f248 0304 	movw	r3, #32772	@ 0x8004
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	483b      	ldr	r0, [pc, #236]	@ (80017bc <MX_GPIO_Init+0x244>)
 80016ce:	f003 fd39 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80016d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016dc:	2301      	movs	r3, #1
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4835      	ldr	r0, [pc, #212]	@ (80017c0 <MX_GPIO_Init+0x248>)
 80016ec:	f003 fd2a 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RST_Pin GPS_ON_Pin */
  GPIO_InitStruct.Pin = LORA_RST_Pin|GPS_ON_Pin;
 80016f0:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	482e      	ldr	r0, [pc, #184]	@ (80017c4 <MX_GPIO_Init+0x24c>)
 800170a:	f003 fd1b 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO1_Pin LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin|LORA_BUSY_Pin;
 800170e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	4828      	ldr	r0, [pc, #160]	@ (80017c4 <MX_GPIO_Init+0x24c>)
 8001724:	f003 fd0e 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pins : XL_INT0_Pin XL_INT1_Pin */
  GPIO_InitStruct.Pin = XL_INT0_Pin|XL_INT1_Pin;
 8001728:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4822      	ldr	r0, [pc, #136]	@ (80017c8 <MX_GPIO_Init+0x250>)
 8001740:	f003 fd00 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001744:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174e:	2301      	movs	r3, #1
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	4817      	ldr	r0, [pc, #92]	@ (80017bc <MX_GPIO_Init+0x244>)
 800175e:	f003 fcf1 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_STAT_Pin */
  GPIO_InitStruct.Pin = BATT_STAT_Pin;
 8001762:	2310      	movs	r3, #16
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BATT_STAT_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4814      	ldr	r0, [pc, #80]	@ (80017c8 <MX_GPIO_Init+0x250>)
 8001776:	f003 fce5 	bl	8005144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	2028      	movs	r0, #40	@ 0x28
 8001780:	f001 fa0c 	bl	8002b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001784:	2028      	movs	r0, #40	@ 0x28
 8001786:	f001 fa23 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800178a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;    // Alternate Function Push-Pull
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;        // No Pull-up or Pull-down
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Adjust speed as needed
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1; // TIM1_CH1 is mapped to AF1
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <MX_GPIO_Init+0x248>)
 80017a8:	f003 fccc 	bl	8005144 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ac:	bf00      	nop
 80017ae:	3730      	adds	r7, #48	@ 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020800 	.word	0x58020800
 80017bc:	58020000 	.word	0x58020000
 80017c0:	58021000 	.word	0x58021000
 80017c4:	58020400 	.word	0x58020400
 80017c8:	58020c00 	.word	0x58020c00

080017cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
	printf("BTN PRESSED");
 80017d6:	481b      	ldr	r0, [pc, #108]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x78>)
 80017d8:	f016 faba 	bl	8017d50 <iprintf>
	fflush(stdout);
 80017dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x7c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f016 f9de 	bl	8017ba4 <fflush>
    if (GPIO_Pin == GPIO_PIN_15) { // Check if the interrupt is from PC15
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017ee:	d124      	bne.n	800183a <HAL_GPIO_EXTI_Callback+0x6e>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET) {
 80017f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017f4:	4815      	ldr	r0, [pc, #84]	@ (800184c <HAL_GPIO_EXTI_Callback+0x80>)
 80017f6:	f003 fe55 	bl	80054a4 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d119      	bne.n	8001834 <HAL_GPIO_EXTI_Callback+0x68>
            // Button is pressed: Start 3-second timer
        	printf("BTN STILL PRESSED\n");
 8001800:	4813      	ldr	r0, [pc, #76]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x84>)
 8001802:	f016 fb0d 	bl	8017e20 <puts>
			fflush(stdout);
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f016 f9c9 	bl	8017ba4 <fflush>
            __HAL_TIM_SET_COUNTER(&htim6, 0); // Reset the timer counter
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x88>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
            HAL_TIM_Base_Start_IT(&htim6);
 800181a:	480e      	ldr	r0, [pc, #56]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x88>)
 800181c:	f00a fb62 	bl	800bee4 <HAL_TIM_Base_Start_IT>
            printf("TIMER STARTED\n");
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001822:	f016 fafd 	bl	8017e20 <puts>
            fflush(stdout);
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4618      	mov	r0, r3
 800182e:	f016 f9b9 	bl	8017ba4 <fflush>
        } else {
            // Button is released: Stop the timer
            HAL_TIM_Base_Stop_IT(&htim6);
        }
    }
}
 8001832:	e002      	b.n	800183a <HAL_GPIO_EXTI_Callback+0x6e>
            HAL_TIM_Base_Stop_IT(&htim6);
 8001834:	4807      	ldr	r0, [pc, #28]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x88>)
 8001836:	f00a fbcd 	bl	800bfd4 <HAL_TIM_Base_Stop_IT>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0801a7d4 	.word	0x0801a7d4
 8001848:	24000280 	.word	0x24000280
 800184c:	58020800 	.word	0x58020800
 8001850:	0801a7e0 	.word	0x0801a7e0
 8001854:	240005f8 	.word	0x240005f8
 8001858:	0801a7f4 	.word	0x0801a7f4

0800185c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] == '$') {
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_UART_RxCpltCallback+0x80>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b24      	cmp	r3, #36	@ 0x24
 800186a:	d103      	bne.n	8001874 <HAL_UART_RxCpltCallback+0x18>
		// Start of a new GGA sentence, reset the index
		gga_index = 0;
 800186c:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <HAL_UART_RxCpltCallback+0x84>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e029      	b.n	80018c8 <HAL_UART_RxCpltCallback+0x6c>
	} else if (rx_buffer[0] == '\r') {
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_UART_RxCpltCallback+0x80>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b0d      	cmp	r3, #13
 800187a:	d112      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x46>
//		if (gga_index < GGA_BUFFER_SIZE) {
//			gga_buffer[gga_index] = '\0'; // Null-terminate for string processing
//		}

		// Process the complete GGA sentence
		bool success = Process_GGA_Sentence(gga_buffer, &gps_data);
 800187c:	4919      	ldr	r1, [pc, #100]	@ (80018e4 <HAL_UART_RxCpltCallback+0x88>)
 800187e:	481a      	ldr	r0, [pc, #104]	@ (80018e8 <HAL_UART_RxCpltCallback+0x8c>)
 8001880:	f7ff f8f2 	bl	8000a68 <Process_GGA_Sentence>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
		if (success) printf("%d satellites", gps_data.num_satellites);
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_UART_RxCpltCallback+0x3e>
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_UART_RxCpltCallback+0x88>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4619      	mov	r1, r3
 8001894:	4815      	ldr	r0, [pc, #84]	@ (80018ec <HAL_UART_RxCpltCallback+0x90>)
 8001896:	f016 fa5b 	bl	8017d50 <iprintf>

		// Reset the index to start a new sentence
		gga_index = 0;
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_UART_RxCpltCallback+0x84>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e012      	b.n	80018c8 <HAL_UART_RxCpltCallback+0x6c>
	} else if (gga_index < GGA_BUFFER_SIZE) {
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_UART_RxCpltCallback+0x84>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b63      	cmp	r3, #99	@ 0x63
 80018a8:	d80b      	bhi.n	80018c2 <HAL_UART_RxCpltCallback+0x66>
		// accumulate the received character if we haven't reached the buffer size
		gga_buffer[gga_index++] = rx_buffer[0];
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_UART_RxCpltCallback+0x84>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <HAL_UART_RxCpltCallback+0x84>)
 80018b4:	7011      	strb	r1, [r2, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_UART_RxCpltCallback+0x80>)
 80018ba:	7819      	ldrb	r1, [r3, #0]
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_UART_RxCpltCallback+0x8c>)
 80018be:	5499      	strb	r1, [r3, r2]
 80018c0:	e002      	b.n	80018c8 <HAL_UART_RxCpltCallback+0x6c>
	} else {
		// there's something wrong, reset the index to 0 to start the data buffer over
		gga_index = 0;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <HAL_UART_RxCpltCallback+0x84>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
	}

	// re-enable the interrupt to receive the next byte
	HAL_UART_Receive_IT(huart, rx_buffer, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	4904      	ldr	r1, [pc, #16]	@ (80018dc <HAL_UART_RxCpltCallback+0x80>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f00b fe15 	bl	800d4fc <HAL_UART_Receive_IT>
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	24070edc 	.word	0x24070edc
 80018e0:	24070f44 	.word	0x24070f44
 80018e4:	24070f48 	.word	0x24070f48
 80018e8:	24070ee0 	.word	0x24070ee0
 80018ec:	0801a804 	.word	0x0801a804

080018f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	int p = 1000;
 80018f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fc:	60fb      	str	r3, [r7, #12]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018fe:	f014 fa3b 	bl	8015d78 <MX_USB_DEVICE_Init>
//			Blink_PC4();
//		}
//		HAL_Delay(600);
//		printf("set brightness max");
//		fflush(stdout);
		if (p <= 0) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc03      	bgt.n	8001910 <StartDefaultTask+0x20>
			p = 1000;
 8001908:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e002      	b.n	8001916 <StartDefaultTask+0x26>
		} else {
			p--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3b01      	subs	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
		}

		if (p % 10 == 0) {
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <StartDefaultTask+0x78>)
 800191a:	fb83 2301 	smull	r2, r3, r3, r1
 800191e:	109a      	asrs	r2, r3, #2
 8001920:	17cb      	asrs	r3, r1, #31
 8001922:	1ad2      	subs	r2, r2, r3
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	1aca      	subs	r2, r1, r3
 800192e:	2a00      	cmp	r2, #0
 8001930:	d111      	bne.n	8001956 <StartDefaultTask+0x66>
			printf("set brightness to %d\r\n", 100 - (p / 10));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <StartDefaultTask+0x78>)
 8001936:	fb82 1203 	smull	r1, r2, r2, r3
 800193a:	1092      	asrs	r2, r2, #2
 800193c:	17db      	asrs	r3, r3, #31
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	3364      	adds	r3, #100	@ 0x64
 8001942:	4619      	mov	r1, r3
 8001944:	4809      	ldr	r0, [pc, #36]	@ (800196c <StartDefaultTask+0x7c>)
 8001946:	f016 fa03 	bl	8017d50 <iprintf>
			fflush(stdout);
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <StartDefaultTask+0x80>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4618      	mov	r0, r3
 8001952:	f016 f927 	bl	8017ba4 <fflush>
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, p);
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <StartDefaultTask+0x84>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(5);
 800195e:	2005      	movs	r0, #5
 8001960:	f001 f834 	bl	80029cc <HAL_Delay>
		if (p <= 0) {
 8001964:	e7cd      	b.n	8001902 <StartDefaultTask+0x12>
 8001966:	bf00      	nop
 8001968:	66666667 	.word	0x66666667
 800196c:	0801a814 	.word	0x0801a814
 8001970:	24000280 	.word	0x24000280
 8001974:	240005ac 	.word	0x240005ac

08001978 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800197e:	463b      	mov	r3, r7
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800198a:	f001 f92f 	bl	8002bec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001992:	2300      	movs	r3, #0
 8001994:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800199a:	231f      	movs	r3, #31
 800199c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800199e:	2387      	movs	r3, #135	@ 0x87
 80019a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80019a6:	2300      	movs	r3, #0
 80019a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80019ba:	463b      	mov	r3, r7
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 f94d 	bl	8002c5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80019c2:	2004      	movs	r0, #4
 80019c4:	f001 f92a 	bl	8002c1c <HAL_MPU_Enable>

}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM6) { // Check if this is the interrupt from TIM6
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d118      	bne.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x44>
		printf("TIMER FINISHED");
 80019e2:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019e4:	f016 f9b4 	bl	8017d50 <iprintf>
		fflush(stdout);
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f016 f8d8 	bl	8017ba4 <fflush>
		// Code to execute when the timer reaches the period (e.g., every 3 seconds)
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET) {
 80019f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f8:	480f      	ldr	r0, [pc, #60]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019fa:	f003 fd53 	bl	80054a4 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d104      	bne.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x3e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // Set PC1 low
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a0a:	f003 fd63 	bl	80054d4 <HAL_GPIO_WritePin>
		}

		// Stop the timer to prevent continuous triggering (optional)
		HAL_TIM_Base_Stop_IT(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f00a fae0 	bl	800bfd4 <HAL_TIM_Base_Stop_IT>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_PeriodElapsedCallback+0x52>
    HAL_IncTick();
 8001a1e:	f000 ffb5 	bl	800298c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40001000 	.word	0x40001000
 8001a30:	0801a82c 	.word	0x0801a82c
 8001a34:	24000280 	.word	0x24000280
 8001a38:	58020800 	.word	0x58020800

08001a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <Error_Handler+0x8>

08001a48 <ST7701_SendCommand>:
#define ST7701_DATA 0x01 // Data mode

#define LCD_CS_LOW()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET) // Select LCD
#define LCD_CS_HIGH() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET)   // Deselect LCD

HAL_StatusTypeDef ST7701_SendCommand(SPI_HandleTypeDef *hspi, uint8_t cmd) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
    // Send command mode (command/parameter bit = 0)
    uint8_t command[2] = {ST7701_CMD, cmd};
 8001a54:	2300      	movs	r3, #0
 8001a56:	733b      	strb	r3, [r7, #12]
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	737b      	strb	r3, [r7, #13]
    return HAL_SPI_Transmit(hspi, command, 2, HAL_MAX_DELAY);
 8001a5c:	f107 010c 	add.w	r1, r7, #12
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	2202      	movs	r2, #2
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f009 ff0e 	bl	800b888 <HAL_SPI_Transmit>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <ST7701_Init>:
    // Send data mode (command/parameter bit = 1)
    uint8_t dataArray[2] = {ST7701_DATA, data};
    return HAL_SPI_Transmit(hspi, dataArray, 2, HAL_MAX_DELAY);
}

HAL_StatusTypeDef ST7701_Init(SPI_HandleTypeDef *hspi) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Reset the display using PE10
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET); // Assert reset (PE10 low)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a86:	4823      	ldr	r0, [pc, #140]	@ (8001b14 <ST7701_Init+0x9c>)
 8001a88:	f003 fd24 	bl	80054d4 <HAL_GPIO_WritePin>
    HAL_Delay(20); // Wait for 20 ms
 8001a8c:	2014      	movs	r0, #20
 8001a8e:	f000 ff9d 	bl	80029cc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET); // Release reset (PE10 high)
 8001a92:	2201      	movs	r2, #1
 8001a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a98:	481e      	ldr	r0, [pc, #120]	@ (8001b14 <ST7701_Init+0x9c>)
 8001a9a:	f003 fd1b 	bl	80054d4 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for 120 ms after reset
 8001a9e:	2078      	movs	r0, #120	@ 0x78
 8001aa0:	f000 ff94 	bl	80029cc <HAL_Delay>

    // Select the LCD
    LCD_CS_LOW();
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001aaa:	481b      	ldr	r0, [pc, #108]	@ (8001b18 <ST7701_Init+0xa0>)
 8001aac:	f003 fd12 	bl	80054d4 <HAL_GPIO_WritePin>

    // Send initialization commands
    status = ST7701_SendCommand(hspi, 0x01); // Software reset
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffc8 	bl	8001a48 <ST7701_SendCommand>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <ST7701_Init+0x4e>
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	e022      	b.n	8001b0c <ST7701_Init+0x94>
    HAL_Delay(150); // Wait for reset to complete
 8001ac6:	2096      	movs	r0, #150	@ 0x96
 8001ac8:	f000 ff80 	bl	80029cc <HAL_Delay>

    status = ST7701_SendCommand(hspi, 0x11); // Sleep Out
 8001acc:	2111      	movs	r1, #17
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffba 	bl	8001a48 <ST7701_SendCommand>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <ST7701_Init+0x6a>
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	e014      	b.n	8001b0c <ST7701_Init+0x94>
    HAL_Delay(120); // Wait for sleep out
 8001ae2:	2078      	movs	r0, #120	@ 0x78
 8001ae4:	f000 ff72 	bl	80029cc <HAL_Delay>

    status = ST7701_SendCommand(hspi, 0x29); // Display ON
 8001ae8:	2129      	movs	r1, #41	@ 0x29
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffac 	bl	8001a48 <ST7701_SendCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <ST7701_Init+0x86>
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	e006      	b.n	8001b0c <ST7701_Init+0x94>

    // Deselect the LCD
    LCD_CS_HIGH();
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <ST7701_Init+0xa0>)
 8001b06:	f003 fce5 	bl	80054d4 <HAL_GPIO_WritePin>

    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	58021000 	.word	0x58021000
 8001b18:	58020000 	.word	0x58020000

08001b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <HAL_MspInit+0x38>)
 8001b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_MspInit+0x38>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_MspInit+0x38>)
 8001b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	210f      	movs	r1, #15
 8001b44:	f06f 0001 	mvn.w	r0, #1
 8001b48:	f001 f828 	bl	8002b9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	58024400 	.word	0x58024400

08001b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	22c0      	movs	r2, #192	@ 0xc0
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f016 fa7d 	bl	8018078 <memset>
  if(hi2c->Instance==I2C4)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a59      	ldr	r2, [pc, #356]	@ (8001ce8 <HAL_I2C_MspInit+0x190>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	f040 80ab 	bne.w	8001ce0 <HAL_I2C_MspInit+0x188>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b8a:	f04f 0210 	mov.w	r2, #16
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f007 ff21 	bl	80099e8 <HAL_RCCEx_PeriphCLKConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8001bac:	f7ff ff46 	bl	8001a3c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <HAL_I2C_MspInit+0x194>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb6:	4a4d      	ldr	r2, [pc, #308]	@ (8001cec <HAL_I2C_MspInit+0x194>)
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8001cec <HAL_I2C_MspInit+0x194>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd6:	2312      	movs	r3, #18
 8001bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001be8:	2304      	movs	r3, #4
 8001bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	483e      	ldr	r0, [pc, #248]	@ (8001cf0 <HAL_I2C_MspInit+0x198>)
 8001bf6:	f003 faa5 	bl	8005144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001cec <HAL_I2C_MspInit+0x194>)
 8001bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c00:	4a3a      	ldr	r2, [pc, #232]	@ (8001cec <HAL_I2C_MspInit+0x194>)
 8001c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c0a:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_I2C_MspInit+0x194>)
 8001c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]

    /* I2C4 DMA Init */
    /* I2C4_RX Init */
    hdma_i2c4_rx.Instance = BDMA_Channel0;
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c1a:	4a37      	ldr	r2, [pc, #220]	@ (8001cf8 <HAL_I2C_MspInit+0x1a0>)
 8001c1c:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 8001c1e:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c20:	220d      	movs	r2, #13
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c24:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2a:	4b32      	ldr	r3, [pc, #200]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c36:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 8001c50:	4828      	ldr	r0, [pc, #160]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c52:	f001 f843 	bl	8002cdc <HAL_DMA_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8001c5c:	f7ff feee 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a24      	ldr	r2, [pc, #144]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_I2C_MspInit+0x19c>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4_TX Init */
    hdma_i2c4_tx.Instance = BDMA_Channel1;
 8001c6c:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c6e:	4a24      	ldr	r2, [pc, #144]	@ (8001d00 <HAL_I2C_MspInit+0x1a8>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 8001c72:	4b22      	ldr	r3, [pc, #136]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c74:	220e      	movs	r2, #14
 8001c76:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c78:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8a:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001ca4:	4815      	ldr	r0, [pc, #84]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001ca6:	f001 f819 	bl	8002cdc <HAL_DMA_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_MspInit+0x15c>
    {
      Error_Handler();
 8001cb0:	f7ff fec4 	bl	8001a3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a11      	ldr	r2, [pc, #68]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cba:	4a10      	ldr	r2, [pc, #64]	@ (8001cfc <HAL_I2C_MspInit+0x1a4>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	205f      	movs	r0, #95	@ 0x5f
 8001cc6:	f000 ff69 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001cca:	205f      	movs	r0, #95	@ 0x5f
 8001ccc:	f000 ff80 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	2060      	movs	r0, #96	@ 0x60
 8001cd6:	f000 ff61 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001cda:	2060      	movs	r0, #96	@ 0x60
 8001cdc:	f000 ff78 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001ce0:	bf00      	nop
 8001ce2:	37e8      	adds	r7, #232	@ 0xe8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	58001c00 	.word	0x58001c00
 8001cec:	58024400 	.word	0x58024400
 8001cf0:	58020c00 	.word	0x58020c00
 8001cf4:	24000340 	.word	0x24000340
 8001cf8:	58025408 	.word	0x58025408
 8001cfc:	240003b8 	.word	0x240003b8
 8001d00:	5802541c 	.word	0x5802541c

08001d04 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0be      	sub	sp, #248	@ 0xf8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	22c0      	movs	r2, #192	@ 0xc0
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f016 f9a7 	bl	8018078 <memset>
  if(hltdc->Instance==LTDC)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a8c      	ldr	r2, [pc, #560]	@ (8001f60 <HAL_LTDC_MspInit+0x25c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	f040 8111 	bne.w	8001f58 <HAL_LTDC_MspInit+0x254>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d36:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 17;
 8001d46:	2311      	movs	r3, #17
 8001d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 25;
 8001d52:	2319      	movs	r3, #25
 8001d54:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001d56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f007 fe3d 	bl	80099e8 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001d74:	f7ff fe62 	bl	8001a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d78:	4b7a      	ldr	r3, [pc, #488]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001d7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d7e:	4a79      	ldr	r2, [pc, #484]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001d88:	4b76      	ldr	r3, [pc, #472]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001d8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	4b73      	ldr	r3, [pc, #460]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9c:	4a71      	ldr	r2, [pc, #452]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da6:	4b6f      	ldr	r3, [pc, #444]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dba:	4a6a      	ldr	r2, [pc, #424]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc4:	4b67      	ldr	r3, [pc, #412]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	4b64      	ldr	r3, [pc, #400]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd8:	4a62      	ldr	r2, [pc, #392]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de2:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e00:	4b58      	ldr	r3, [pc, #352]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0e:	4b55      	ldr	r3, [pc, #340]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e14:	4a53      	ldr	r2, [pc, #332]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e1e:	4b51      	ldr	r3, [pc, #324]	@ (8001f64 <HAL_LTDC_MspInit+0x260>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_B3
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8001e2c:	23c1      	movs	r3, #193	@ 0xc1
 8001e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e44:	230e      	movs	r3, #14
 8001e46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4845      	ldr	r0, [pc, #276]	@ (8001f68 <HAL_LTDC_MspInit+0x264>)
 8001e52:	f003 f977 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e56:	2378      	movs	r3, #120	@ 0x78
 8001e58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e6e:	230e      	movs	r3, #14
 8001e70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	483c      	ldr	r0, [pc, #240]	@ (8001f6c <HAL_LTDC_MspInit+0x268>)
 8001e7c:	f003 f962 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e98:	2309      	movs	r3, #9
 8001e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4832      	ldr	r0, [pc, #200]	@ (8001f70 <HAL_LTDC_MspInit+0x26c>)
 8001ea6:	f003 f94d 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001eaa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ec4:	230e      	movs	r3, #14
 8001ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4828      	ldr	r0, [pc, #160]	@ (8001f74 <HAL_LTDC_MspInit+0x270>)
 8001ed2:	f003 f937 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001ed6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001eda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ef0:	230e      	movs	r3, #14
 8001ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001efa:	4619      	mov	r1, r3
 8001efc:	481c      	ldr	r0, [pc, #112]	@ (8001f70 <HAL_LTDC_MspInit+0x26c>)
 8001efe:	f003 f921 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001f1c:	230d      	movs	r3, #13
 8001f1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4810      	ldr	r0, [pc, #64]	@ (8001f6c <HAL_LTDC_MspInit+0x268>)
 8001f2a:	f003 f90b 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f2e:	2308      	movs	r3, #8
 8001f30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f46:	230e      	movs	r3, #14
 8001f48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4809      	ldr	r0, [pc, #36]	@ (8001f78 <HAL_LTDC_MspInit+0x274>)
 8001f54:	f003 f8f6 	bl	8005144 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f58:	bf00      	nop
 8001f5a:	37f8      	adds	r7, #248	@ 0xf8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	50001000 	.word	0x50001000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020800 	.word	0x58020800
 8001f6c:	58020000 	.word	0x58020000
 8001f70:	58020400 	.word	0x58020400
 8001f74:	58021000 	.word	0x58021000
 8001f78:	58020c00 	.word	0x58020c00

08001f7c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0be      	sub	sp, #248	@ 0xf8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	22c0      	movs	r2, #192	@ 0xc0
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f016 f86b 	bl	8018078 <memset>
  if(hqspi->Instance==QUADSPI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a7a      	ldr	r2, [pc, #488]	@ (8002190 <HAL_QSPI_MspInit+0x214>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	f040 80ec 	bne.w	8002186 <HAL_QSPI_MspInit+0x20a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001fae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbe:	f107 0320 	add.w	r3, r7, #32
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f007 fd10 	bl	80099e8 <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001fce:	f7ff fd35 	bl	8001a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fd2:	4b70      	ldr	r3, [pc, #448]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8001fd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fde:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8001fe4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff0:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff6:	4a67      	ldr	r2, [pc, #412]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002000:	4b64      	ldr	r3, [pc, #400]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b61      	ldr	r3, [pc, #388]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002014:	4a5f      	ldr	r2, [pc, #380]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800201e:	4b5d      	ldr	r3, [pc, #372]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b59      	ldr	r3, [pc, #356]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002032:	4a58      	ldr	r2, [pc, #352]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800203c:	4b55      	ldr	r3, [pc, #340]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204a:	4b52      	ldr	r3, [pc, #328]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	4a50      	ldr	r2, [pc, #320]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205a:	4b4e      	ldr	r3, [pc, #312]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002068:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206e:	4a49      	ldr	r2, [pc, #292]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002078:	4b46      	ldr	r3, [pc, #280]	@ (8002194 <HAL_QSPI_MspInit+0x218>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    PC10     ------> QUADSPI_BK1_IO1
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002086:	2304      	movs	r3, #4
 8002088:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800209e:	2309      	movs	r3, #9
 80020a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020a8:	4619      	mov	r1, r3
 80020aa:	483b      	ldr	r0, [pc, #236]	@ (8002198 <HAL_QSPI_MspInit+0x21c>)
 80020ac:	f003 f84a 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020c8:	2309      	movs	r3, #9
 80020ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4831      	ldr	r0, [pc, #196]	@ (800219c <HAL_QSPI_MspInit+0x220>)
 80020d6:	f003 f835 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020da:	2304      	movs	r3, #4
 80020dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020f2:	2309      	movs	r3, #9
 80020f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4828      	ldr	r0, [pc, #160]	@ (80021a0 <HAL_QSPI_MspInit+0x224>)
 8002100:	f003 f820 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002104:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002108:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800211e:	2309      	movs	r3, #9
 8002120:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002124:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002128:	4619      	mov	r1, r3
 800212a:	481e      	ldr	r0, [pc, #120]	@ (80021a4 <HAL_QSPI_MspInit+0x228>)
 800212c:	f003 f80a 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002134:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800214a:	2309      	movs	r3, #9
 800214c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002154:	4619      	mov	r1, r3
 8002156:	4814      	ldr	r0, [pc, #80]	@ (80021a8 <HAL_QSPI_MspInit+0x22c>)
 8002158:	f002 fff4 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215c:	2340      	movs	r3, #64	@ 0x40
 800215e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002174:	230a      	movs	r3, #10
 8002176:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800217e:	4619      	mov	r1, r3
 8002180:	4807      	ldr	r0, [pc, #28]	@ (80021a0 <HAL_QSPI_MspInit+0x224>)
 8002182:	f002 ffdf 	bl	8005144 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002186:	bf00      	nop
 8002188:	37f8      	adds	r7, #248	@ 0xf8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	52005000 	.word	0x52005000
 8002194:	58024400 	.word	0x58024400
 8002198:	58021000 	.word	0x58021000
 800219c:	58020000 	.word	0x58020000
 80021a0:	58020400 	.word	0x58020400
 80021a4:	58020c00 	.word	0x58020c00
 80021a8:	58020800 	.word	0x58020800

080021ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0bc      	sub	sp, #240	@ 0xf0
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0318 	add.w	r3, r7, #24
 80021c8:	22c0      	movs	r2, #192	@ 0xc0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f015 ff53 	bl	8018078 <memset>
  if(hspi->Instance==SPI1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a38      	ldr	r2, [pc, #224]	@ (80022b8 <HAL_SPI_MspInit+0x10c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d168      	bne.n	80022ae <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f007 fbf9 	bl	80099e8 <HAL_RCCEx_PeriphCLKConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80021fc:	f7ff fc1e 	bl	8001a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002200:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002208:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800220c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002224:	4a25      	ldr	r2, [pc, #148]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222e:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223c:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 800223e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002242:	4a1e      	ldr	r2, [pc, #120]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_SPI_MspInit+0x110>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002272:	2305      	movs	r3, #5
 8002274:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800227c:	4619      	mov	r1, r3
 800227e:	4810      	ldr	r0, [pc, #64]	@ (80022c0 <HAL_SPI_MspInit+0x114>)
 8002280:	f002 ff60 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002284:	2318      	movs	r3, #24
 8002286:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229c:	2305      	movs	r3, #5
 800229e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022a6:	4619      	mov	r1, r3
 80022a8:	4806      	ldr	r0, [pc, #24]	@ (80022c4 <HAL_SPI_MspInit+0x118>)
 80022aa:	f002 ff4b 	bl	8005144 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022ae:	bf00      	nop
 80022b0:	37f0      	adds	r7, #240	@ 0xf0
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40013000 	.word	0x40013000
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58020000 	.word	0x58020000
 80022c4:	58020400 	.word	0x58020400

080022c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <HAL_TIM_Base_MspInit+0x74>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10f      	bne.n	80022fa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_TIM_Base_MspInit+0x78>)
 80022dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e0:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <HAL_TIM_Base_MspInit+0x78>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_TIM_Base_MspInit+0x78>)
 80022ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80022f8:	e01b      	b.n	8002332 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a11      	ldr	r2, [pc, #68]	@ (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d116      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_TIM_Base_MspInit+0x78>)
 8002306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800230a:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <HAL_TIM_Base_MspInit+0x78>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_TIM_Base_MspInit+0x78>)
 8002316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2105      	movs	r1, #5
 8002326:	2036      	movs	r0, #54	@ 0x36
 8002328:	f000 fc38 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800232c:	2036      	movs	r0, #54	@ 0x36
 800232e:	f000 fc4f 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	58024400 	.word	0x58024400
 8002344:	40001000 	.word	0x40001000

08002348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11f      	bne.n	80023aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002370:	4a11      	ldr	r2, [pc, #68]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800237a:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800238c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800239a:	2301      	movs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	@ (80023bc <HAL_TIM_MspPostInit+0x74>)
 80023a6:	f002 fecd 	bl	8005144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58021000 	.word	0x58021000

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0ba      	sub	sp, #232	@ 0xe8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	22c0      	movs	r2, #192	@ 0xc0
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f015 fe49 	bl	8018078 <memset>
  if(huart->Instance==UART8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002494 <HAL_UART_MspInit+0xd4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d14d      	bne.n	800248c <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80023f0:	f04f 0202 	mov.w	r2, #2
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f007 faee 	bl	80099e8 <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002412:	f7ff fb13 	bl	8001a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800241c:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 800241e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002422:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002426:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800242c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_UART_MspInit+0xd8>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002452:	2303      	movs	r3, #3
 8002454:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800246a:	2308      	movs	r3, #8
 800246c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002474:	4619      	mov	r1, r3
 8002476:	4809      	ldr	r0, [pc, #36]	@ (800249c <HAL_UART_MspInit+0xdc>)
 8002478:	f002 fe64 	bl	8005144 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2105      	movs	r1, #5
 8002480:	2053      	movs	r0, #83	@ 0x53
 8002482:	f000 fb8b 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002486:	2053      	movs	r0, #83	@ 0x53
 8002488:	f000 fba2 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 800248c:	bf00      	nop
 800248e:	37e8      	adds	r7, #232	@ 0xe8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40007c00 	.word	0x40007c00
 8002498:	58024400 	.word	0x58024400
 800249c:	58021000 	.word	0x58021000

080024a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b090      	sub	sp, #64	@ 0x40
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d827      	bhi.n	80024fe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	201c      	movs	r0, #28
 80024b4:	f000 fb72 	bl	8002b9c <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024b8:	201c      	movs	r0, #28
 80024ba:	f000 fb89 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80024be:	4a29      	ldr	r2, [pc, #164]	@ (8002564 <HAL_InitTick+0xc4>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_InitTick+0xc8>)
 80024c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024ca:	4a27      	ldr	r2, [pc, #156]	@ (8002568 <HAL_InitTick+0xc8>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024d4:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <HAL_InitTick+0xc8>)
 80024d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024e2:	f107 0210 	add.w	r2, r7, #16
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f007 fa39 	bl	8009964 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <HAL_InitTick+0x6a>
 80024fc:	e001      	b.n	8002502 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e02c      	b.n	800255c <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002502:	f007 fa03 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 8002506:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002508:	e004      	b.n	8002514 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800250a:	f007 f9ff 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 800250e:	4603      	mov	r3, r0
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002516:	4a15      	ldr	r2, [pc, #84]	@ (800256c <HAL_InitTick+0xcc>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	3b01      	subs	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002522:	4b13      	ldr	r3, [pc, #76]	@ (8002570 <HAL_InitTick+0xd0>)
 8002524:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002528:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_InitTick+0xd0>)
 800252c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002530:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002532:	4a0f      	ldr	r2, [pc, #60]	@ (8002570 <HAL_InitTick+0xd0>)
 8002534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002536:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_InitTick+0xd0>)
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_InitTick+0xd0>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002544:	480a      	ldr	r0, [pc, #40]	@ (8002570 <HAL_InitTick+0xd0>)
 8002546:	f009 fc76 	bl	800be36 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002550:	4807      	ldr	r0, [pc, #28]	@ (8002570 <HAL_InitTick+0xd0>)
 8002552:	f009 fcc7 	bl	800bee4 <HAL_TIM_Base_Start_IT>
 8002556:	4603      	mov	r3, r0
 8002558:	e000      	b.n	800255c <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
}
 800255c:	4618      	mov	r0, r3
 800255e:	3740      	adds	r7, #64	@ 0x40
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24000008 	.word	0x24000008
 8002568:	58024400 	.word	0x58024400
 800256c:	431bde83 	.word	0x431bde83
 8002570:	24070f64 	.word	0x24070f64

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <NMI_Handler+0x4>

0800257c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <MemManage_Handler+0x4>

0800258c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <BusFault_Handler+0x4>

08002594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <UsageFault_Handler+0x4>

0800259c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <TIM2_IRQHandler+0x10>)
 80025b2:	f009 fead 	bl	800c310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	24070f64 	.word	0x24070f64

080025c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 80025c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80025c8:	f002 ff9d 	bl	8005506 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <TIM6_DAC_IRQHandler+0x10>)
 80025d6:	f009 fe9b 	bl	800c310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	240005f8 	.word	0x240005f8

080025e4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <UART8_IRQHandler+0x10>)
 80025ea:	f00a ffd3 	bl	800d594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000644 	.word	0x24000644

080025f8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <I2C4_EV_IRQHandler+0x10>)
 80025fe:	f003 f94d 	bl	800589c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	240002ec 	.word	0x240002ec

0800260c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002610:	4802      	ldr	r0, [pc, #8]	@ (800261c <I2C4_ER_IRQHandler+0x10>)
 8002612:	f003 f95d 	bl	80058d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	240002ec 	.word	0x240002ec

08002620 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <OTG_FS_IRQHandler+0x10>)
 8002626:	f004 ff56 	bl	80074d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	24076e80 	.word	0x24076e80

08002634 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <BDMA_Channel0_IRQHandler+0x10>)
 800263a:	f001 fc0f 	bl	8003e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	24000340 	.word	0x24000340

08002648 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <BDMA_Channel1_IRQHandler+0x10>)
 800264e:	f001 fc05 	bl	8003e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240003b8 	.word	0x240003b8

0800265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_kill>:

int _kill(int pid, int sig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002676:	f015 fe3d 	bl	80182f4 <__errno>
 800267a:	4603      	mov	r3, r0
 800267c:	2216      	movs	r2, #22
 800267e:	601a      	str	r2, [r3, #0]
  return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <_exit>:

void _exit (int status)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffe7 	bl	800266c <_kill>
  while (1) {}    /* Make sure we hang here */
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <_exit+0x12>

080026a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e00a      	b.n	80026ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b4:	f3af 8000 	nop.w
 80026b8:	4601      	mov	r1, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	60ba      	str	r2, [r7, #8]
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf0      	blt.n	80026b4 <_read+0x12>
  }

  return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	605a      	str	r2, [r3, #4]
  return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_isatty>:

int _isatty(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	@ (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f015 fdbe 	bl	80182f4 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	24080000 	.word	0x24080000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	24070fb0 	.word	0x24070fb0
 80027ac:	240776d0 	.word	0x240776d0

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027b4:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <SystemInit+0xe4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	4a36      	ldr	r2, [pc, #216]	@ (8002894 <SystemInit+0xe4>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027c4:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <SystemInit+0xe8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d807      	bhi.n	80027e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027d0:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <SystemInit+0xe8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 030f 	bic.w	r3, r3, #15
 80027d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002898 <SystemInit+0xe8>)
 80027da:	f043 0307 	orr.w	r3, r3, #7
 80027de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80027e0:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <SystemInit+0xec>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2d      	ldr	r2, [pc, #180]	@ (800289c <SystemInit+0xec>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027ec:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <SystemInit+0xec>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027f2:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <SystemInit+0xec>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4929      	ldr	r1, [pc, #164]	@ (800289c <SystemInit+0xec>)
 80027f8:	4b29      	ldr	r3, [pc, #164]	@ (80028a0 <SystemInit+0xf0>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027fe:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <SystemInit+0xe8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800280a:	4b23      	ldr	r3, [pc, #140]	@ (8002898 <SystemInit+0xe8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 030f 	bic.w	r3, r3, #15
 8002812:	4a21      	ldr	r2, [pc, #132]	@ (8002898 <SystemInit+0xe8>)
 8002814:	f043 0307 	orr.w	r3, r3, #7
 8002818:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <SystemInit+0xec>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002820:	4b1e      	ldr	r3, [pc, #120]	@ (800289c <SystemInit+0xec>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002826:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <SystemInit+0xec>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <SystemInit+0xec>)
 800282e:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <SystemInit+0xf4>)
 8002830:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <SystemInit+0xec>)
 8002834:	4a1c      	ldr	r2, [pc, #112]	@ (80028a8 <SystemInit+0xf8>)
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002838:	4b18      	ldr	r3, [pc, #96]	@ (800289c <SystemInit+0xec>)
 800283a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <SystemInit+0xfc>)
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <SystemInit+0xec>)
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <SystemInit+0xec>)
 8002846:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <SystemInit+0xfc>)
 8002848:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <SystemInit+0xec>)
 800284c:	2200      	movs	r2, #0
 800284e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <SystemInit+0xec>)
 8002852:	4a16      	ldr	r2, [pc, #88]	@ (80028ac <SystemInit+0xfc>)
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <SystemInit+0xec>)
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <SystemInit+0xec>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <SystemInit+0xec>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <SystemInit+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <SystemInit+0x100>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <SystemInit+0x104>)
 8002874:	4013      	ands	r3, r2
 8002876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800287a:	d202      	bcs.n	8002882 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <SystemInit+0x108>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <SystemInit+0x10c>)
 8002884:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002888:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00
 8002898:	52002000 	.word	0x52002000
 800289c:	58024400 	.word	0x58024400
 80028a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80028a4:	02020200 	.word	0x02020200
 80028a8:	01ff0000 	.word	0x01ff0000
 80028ac:	01010280 	.word	0x01010280
 80028b0:	5c001000 	.word	0x5c001000
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	51008108 	.word	0x51008108
 80028bc:	52004000 	.word	0x52004000

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028c4:	f7ff ff74 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c8:	480c      	ldr	r0, [pc, #48]	@ (80028fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ca:	490d      	ldr	r1, [pc, #52]	@ (8002900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d0:	e002      	b.n	80028d8 <LoopCopyDataInit>

080028d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d6:	3304      	adds	r3, #4

080028d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028dc:	d3f9      	bcc.n	80028d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028de:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028e0:	4c0a      	ldr	r4, [pc, #40]	@ (800290c <LoopFillZerobss+0x22>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e4:	e001      	b.n	80028ea <LoopFillZerobss>

080028e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e8:	3204      	adds	r2, #4

080028ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ec:	d3fb      	bcc.n	80028e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ee:	f015 fd07 	bl	8018300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7fe fa7b 	bl	8000dec <main>
  bx  lr
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002900:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8002904:	0801ad58 	.word	0x0801ad58
  ldr r2, =_sbss
 8002908:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 800290c:	240776d0 	.word	0x240776d0

08002910 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC3_IRQHandler>
	...

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800291a:	2003      	movs	r0, #3
 800291c:	f000 f933 	bl	8002b86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002920:	f006 fe4a 	bl	80095b8 <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_Init+0x68>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4913      	ldr	r1, [pc, #76]	@ (8002980 <HAL_Init+0x6c>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800293e:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <HAL_Init+0x68>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <HAL_Init+0x6c>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	4a0b      	ldr	r2, [pc, #44]	@ (8002984 <HAL_Init+0x70>)
 8002956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002958:	4a0b      	ldr	r2, [pc, #44]	@ (8002988 <HAL_Init+0x74>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295e:	200f      	movs	r0, #15
 8002960:	f7ff fd9e 	bl	80024a0 <HAL_InitTick>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e002      	b.n	8002974 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800296e:	f7ff f8d5 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	58024400 	.word	0x58024400
 8002980:	0801a8cc 	.word	0x0801a8cc
 8002984:	24000004 	.word	0x24000004
 8002988:	24000000 	.word	0x24000000

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2400000c 	.word	0x2400000c
 80029b0:	24070fb4 	.word	0x24070fb4

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	24070fb4 	.word	0x24070fb4

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2400000c 	.word	0x2400000c

08002a14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_GetREVID+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	5c001000 	.word	0x5c001000

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x40>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x40>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00
 8002a70:	05fa0000 	.word	0x05fa0000

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	@ (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	@ (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff4c 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002baa:	f7ff ff63 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f7ff ffb3 	bl	8002b20 <NVIC_EncodePriority>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff82 	bl	8002acc <__NVIC_SetPriority>
}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff56 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002bf0:	f3bf 8f5f 	dmb	sy
}
 8002bf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <HAL_MPU_Disable+0x28>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	4a06      	ldr	r2, [pc, #24]	@ (8002c14 <HAL_MPU_Disable+0x28>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_MPU_Disable+0x2c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00
 8002c18:	e000ed90 	.word	0xe000ed90

08002c1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c24:	4a0b      	ldr	r2, [pc, #44]	@ (8002c54 <HAL_MPU_Enable+0x38>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_MPU_Enable+0x3c>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	4a09      	ldr	r2, [pc, #36]	@ (8002c58 <HAL_MPU_Enable+0x3c>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3a:	f3bf 8f4f 	dsb	sy
}
 8002c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c40:	f3bf 8f6f 	isb	sy
}
 8002c44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed90 	.word	0xe000ed90
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	785a      	ldrb	r2, [r3, #1]
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7b1b      	ldrb	r3, [r3, #12]
 8002c84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7adb      	ldrb	r3, [r3, #11]
 8002c8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7a9b      	ldrb	r3, [r3, #10]
 8002c92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7b5b      	ldrb	r3, [r3, #13]
 8002c9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7b9b      	ldrb	r3, [r3, #14]
 8002ca2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7bdb      	ldrb	r3, [r3, #15]
 8002caa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7a5b      	ldrb	r3, [r3, #9]
 8002cb2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7a1b      	ldrb	r3, [r3, #8]
 8002cba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cbc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cc6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cc8:	6113      	str	r3, [r2, #16]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed90 	.word	0xe000ed90

08002cdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff fe66 	bl	80029b4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e316      	b.n	8003322 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a66      	ldr	r2, [pc, #408]	@ (8002e94 <HAL_DMA_Init+0x1b8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a65      	ldr	r2, [pc, #404]	@ (8002e98 <HAL_DMA_Init+0x1bc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a63      	ldr	r2, [pc, #396]	@ (8002e9c <HAL_DMA_Init+0x1c0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a62      	ldr	r2, [pc, #392]	@ (8002ea0 <HAL_DMA_Init+0x1c4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a60      	ldr	r2, [pc, #384]	@ (8002ea4 <HAL_DMA_Init+0x1c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea8 <HAL_DMA_Init+0x1cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	@ (8002eac <HAL_DMA_Init+0x1d0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb0 <HAL_DMA_Init+0x1d4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb4 <HAL_DMA_Init+0x1d8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a59      	ldr	r2, [pc, #356]	@ (8002eb8 <HAL_DMA_Init+0x1dc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a57      	ldr	r2, [pc, #348]	@ (8002ebc <HAL_DMA_Init+0x1e0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a56      	ldr	r2, [pc, #344]	@ (8002ec0 <HAL_DMA_Init+0x1e4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a54      	ldr	r2, [pc, #336]	@ (8002ec4 <HAL_DMA_Init+0x1e8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a53      	ldr	r2, [pc, #332]	@ (8002ec8 <HAL_DMA_Init+0x1ec>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <HAL_DMA_Init+0x1f0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Init+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a50      	ldr	r2, [pc, #320]	@ (8002ed0 <HAL_DMA_Init+0x1f4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0xbc>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_Init+0xbe>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 813b 	beq.w	8003016 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a37      	ldr	r2, [pc, #220]	@ (8002e94 <HAL_DMA_Init+0x1b8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d04a      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a36      	ldr	r2, [pc, #216]	@ (8002e98 <HAL_DMA_Init+0x1bc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d045      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a34      	ldr	r2, [pc, #208]	@ (8002e9c <HAL_DMA_Init+0x1c0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d040      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a33      	ldr	r2, [pc, #204]	@ (8002ea0 <HAL_DMA_Init+0x1c4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d03b      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a31      	ldr	r2, [pc, #196]	@ (8002ea4 <HAL_DMA_Init+0x1c8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d036      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a30      	ldr	r2, [pc, #192]	@ (8002ea8 <HAL_DMA_Init+0x1cc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d031      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2e      	ldr	r2, [pc, #184]	@ (8002eac <HAL_DMA_Init+0x1d0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d02c      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb0 <HAL_DMA_Init+0x1d4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d027      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb4 <HAL_DMA_Init+0x1d8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d022      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb8 <HAL_DMA_Init+0x1dc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d01d      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a28      	ldr	r2, [pc, #160]	@ (8002ebc <HAL_DMA_Init+0x1e0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a27      	ldr	r2, [pc, #156]	@ (8002ec0 <HAL_DMA_Init+0x1e4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a25      	ldr	r2, [pc, #148]	@ (8002ec4 <HAL_DMA_Init+0x1e8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a24      	ldr	r2, [pc, #144]	@ (8002ec8 <HAL_DMA_Init+0x1ec>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a22      	ldr	r2, [pc, #136]	@ (8002ecc <HAL_DMA_Init+0x1f0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_DMA_Init+0x174>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a21      	ldr	r2, [pc, #132]	@ (8002ed0 <HAL_DMA_Init+0x1f4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d108      	bne.n	8002e62 <HAL_DMA_Init+0x186>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e007      	b.n	8002e72 <HAL_DMA_Init+0x196>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e72:	e02f      	b.n	8002ed4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e74:	f7ff fd9e 	bl	80029b4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d928      	bls.n	8002ed4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e246      	b.n	8003322 <HAL_DMA_Init+0x646>
 8002e94:	40020010 	.word	0x40020010
 8002e98:	40020028 	.word	0x40020028
 8002e9c:	40020040 	.word	0x40020040
 8002ea0:	40020058 	.word	0x40020058
 8002ea4:	40020070 	.word	0x40020070
 8002ea8:	40020088 	.word	0x40020088
 8002eac:	400200a0 	.word	0x400200a0
 8002eb0:	400200b8 	.word	0x400200b8
 8002eb4:	40020410 	.word	0x40020410
 8002eb8:	40020428 	.word	0x40020428
 8002ebc:	40020440 	.word	0x40020440
 8002ec0:	40020458 	.word	0x40020458
 8002ec4:	40020470 	.word	0x40020470
 8002ec8:	40020488 	.word	0x40020488
 8002ecc:	400204a0 	.word	0x400204a0
 8002ed0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1c8      	bne.n	8002e74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4b83      	ldr	r3, [pc, #524]	@ (80030fc <HAL_DMA_Init+0x420>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002efa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d107      	bne.n	8002f38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	4313      	orrs	r3, r2
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f38:	4b71      	ldr	r3, [pc, #452]	@ (8003100 <HAL_DMA_Init+0x424>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b71      	ldr	r3, [pc, #452]	@ (8003104 <HAL_DMA_Init+0x428>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f44:	d328      	bcc.n	8002f98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b28      	cmp	r3, #40	@ 0x28
 8002f4c:	d903      	bls.n	8002f56 <HAL_DMA_Init+0x27a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f54:	d917      	bls.n	8002f86 <HAL_DMA_Init+0x2aa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f5c:	d903      	bls.n	8002f66 <HAL_DMA_Init+0x28a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b42      	cmp	r3, #66	@ 0x42
 8002f64:	d90f      	bls.n	8002f86 <HAL_DMA_Init+0x2aa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b46      	cmp	r3, #70	@ 0x46
 8002f6c:	d903      	bls.n	8002f76 <HAL_DMA_Init+0x29a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b48      	cmp	r3, #72	@ 0x48
 8002f74:	d907      	bls.n	8002f86 <HAL_DMA_Init+0x2aa>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f7c:	d905      	bls.n	8002f8a <HAL_DMA_Init+0x2ae>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b52      	cmp	r3, #82	@ 0x52
 8002f84:	d801      	bhi.n	8002f8a <HAL_DMA_Init+0x2ae>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_DMA_Init+0x2b0>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d117      	bne.n	8002ff2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 ff2b 	bl	8004e30 <DMA_CheckFifoParam>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e197      	b.n	8003322 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 fe66 	bl	8004ccc <DMA_CalcBaseAndBitshift>
 8003000:	4603      	mov	r3, r0
 8003002:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	223f      	movs	r2, #63	@ 0x3f
 800300e:	409a      	lsls	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e0cd      	b.n	80031b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3b      	ldr	r2, [pc, #236]	@ (8003108 <HAL_DMA_Init+0x42c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a39      	ldr	r2, [pc, #228]	@ (800310c <HAL_DMA_Init+0x430>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a38      	ldr	r2, [pc, #224]	@ (8003110 <HAL_DMA_Init+0x434>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a36      	ldr	r2, [pc, #216]	@ (8003114 <HAL_DMA_Init+0x438>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a35      	ldr	r2, [pc, #212]	@ (8003118 <HAL_DMA_Init+0x43c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a33      	ldr	r2, [pc, #204]	@ (800311c <HAL_DMA_Init+0x440>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <HAL_DMA_Init+0x444>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_Init+0x38a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a30      	ldr	r2, [pc, #192]	@ (8003124 <HAL_DMA_Init+0x448>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_DMA_Init+0x38e>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_DMA_Init+0x390>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8097 	beq.w	80031a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_DMA_Init+0x42c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d021      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a22      	ldr	r2, [pc, #136]	@ (800310c <HAL_DMA_Init+0x430>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01c      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <HAL_DMA_Init+0x434>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d017      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <HAL_DMA_Init+0x438>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <HAL_DMA_Init+0x43c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00d      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <HAL_DMA_Init+0x440>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_DMA_Init+0x444>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <HAL_DMA_Init+0x3e4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_DMA_Init+0x448>)
 80030be:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <HAL_DMA_Init+0x44c>)
 80030dc:	4013      	ands	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d021      	beq.n	800312c <HAL_DMA_Init+0x450>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b80      	cmp	r3, #128	@ 0x80
 80030ee:	d102      	bne.n	80030f6 <HAL_DMA_Init+0x41a>
 80030f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030f4:	e01b      	b.n	800312e <HAL_DMA_Init+0x452>
 80030f6:	2300      	movs	r3, #0
 80030f8:	e019      	b.n	800312e <HAL_DMA_Init+0x452>
 80030fa:	bf00      	nop
 80030fc:	fe10803f 	.word	0xfe10803f
 8003100:	5c001000 	.word	0x5c001000
 8003104:	ffff0000 	.word	0xffff0000
 8003108:	58025408 	.word	0x58025408
 800310c:	5802541c 	.word	0x5802541c
 8003110:	58025430 	.word	0x58025430
 8003114:	58025444 	.word	0x58025444
 8003118:	58025458 	.word	0x58025458
 800311c:	5802546c 	.word	0x5802546c
 8003120:	58025480 	.word	0x58025480
 8003124:	58025494 	.word	0x58025494
 8003128:	fffe000f 	.word	0xfffe000f
 800312c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68d2      	ldr	r2, [r2, #12]
 8003132:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800313c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800314c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800315c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b6e      	ldr	r3, [pc, #440]	@ (800332c <HAL_DMA_Init+0x650>)
 8003174:	4413      	add	r3, r2
 8003176:	4a6e      	ldr	r2, [pc, #440]	@ (8003330 <HAL_DMA_Init+0x654>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 fda1 	bl	8004ccc <DMA_CalcBaseAndBitshift>
 800318a:	4603      	mov	r3, r0
 800318c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2201      	movs	r2, #1
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e008      	b.n	80031b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0b7      	b.n	8003322 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003334 <HAL_DMA_Init+0x658>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d072      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003338 <HAL_DMA_Init+0x65c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d06d      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5c      	ldr	r2, [pc, #368]	@ (800333c <HAL_DMA_Init+0x660>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d068      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003340 <HAL_DMA_Init+0x664>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d063      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <HAL_DMA_Init+0x668>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d05e      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a57      	ldr	r2, [pc, #348]	@ (8003348 <HAL_DMA_Init+0x66c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d059      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a56      	ldr	r2, [pc, #344]	@ (800334c <HAL_DMA_Init+0x670>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d054      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a54      	ldr	r2, [pc, #336]	@ (8003350 <HAL_DMA_Init+0x674>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04f      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a53      	ldr	r2, [pc, #332]	@ (8003354 <HAL_DMA_Init+0x678>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a51      	ldr	r2, [pc, #324]	@ (8003358 <HAL_DMA_Init+0x67c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a50      	ldr	r2, [pc, #320]	@ (800335c <HAL_DMA_Init+0x680>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a4e      	ldr	r2, [pc, #312]	@ (8003360 <HAL_DMA_Init+0x684>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4d      	ldr	r2, [pc, #308]	@ (8003364 <HAL_DMA_Init+0x688>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_DMA_Init+0x68c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a4a      	ldr	r2, [pc, #296]	@ (800336c <HAL_DMA_Init+0x690>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a48      	ldr	r2, [pc, #288]	@ (8003370 <HAL_DMA_Init+0x694>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a47      	ldr	r2, [pc, #284]	@ (8003374 <HAL_DMA_Init+0x698>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a45      	ldr	r2, [pc, #276]	@ (8003378 <HAL_DMA_Init+0x69c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a44      	ldr	r2, [pc, #272]	@ (800337c <HAL_DMA_Init+0x6a0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a42      	ldr	r2, [pc, #264]	@ (8003380 <HAL_DMA_Init+0x6a4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a41      	ldr	r2, [pc, #260]	@ (8003384 <HAL_DMA_Init+0x6a8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3f      	ldr	r2, [pc, #252]	@ (8003388 <HAL_DMA_Init+0x6ac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3e      	ldr	r2, [pc, #248]	@ (800338c <HAL_DMA_Init+0x6b0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_Init+0x5c6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3c      	ldr	r2, [pc, #240]	@ (8003390 <HAL_DMA_Init+0x6b4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_DMA_Init+0x5ca>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_Init+0x5cc>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d032      	beq.n	8003312 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fe3b 	bl	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d102      	bne.n	80032c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80032d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_DMA_Init+0x624>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d80c      	bhi.n	8003300 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f001 feb8 	bl	800505c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e008      	b.n	8003312 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	a7fdabf8 	.word	0xa7fdabf8
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	40020010 	.word	0x40020010
 8003338:	40020028 	.word	0x40020028
 800333c:	40020040 	.word	0x40020040
 8003340:	40020058 	.word	0x40020058
 8003344:	40020070 	.word	0x40020070
 8003348:	40020088 	.word	0x40020088
 800334c:	400200a0 	.word	0x400200a0
 8003350:	400200b8 	.word	0x400200b8
 8003354:	40020410 	.word	0x40020410
 8003358:	40020428 	.word	0x40020428
 800335c:	40020440 	.word	0x40020440
 8003360:	40020458 	.word	0x40020458
 8003364:	40020470 	.word	0x40020470
 8003368:	40020488 	.word	0x40020488
 800336c:	400204a0 	.word	0x400204a0
 8003370:	400204b8 	.word	0x400204b8
 8003374:	58025408 	.word	0x58025408
 8003378:	5802541c 	.word	0x5802541c
 800337c:	58025430 	.word	0x58025430
 8003380:	58025444 	.word	0x58025444
 8003384:	58025458 	.word	0x58025458
 8003388:	5802546c 	.word	0x5802546c
 800338c:	58025480 	.word	0x58025480
 8003390:	58025494 	.word	0x58025494

08003394 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff fb0a 	bl	80029b4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e2dc      	b.n	8003966 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d008      	beq.n	80033ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e2cd      	b.n	8003966 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a76      	ldr	r2, [pc, #472]	@ (80035a8 <HAL_DMA_Abort+0x214>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a74      	ldr	r2, [pc, #464]	@ (80035ac <HAL_DMA_Abort+0x218>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_DMA_Abort+0x21c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a71      	ldr	r2, [pc, #452]	@ (80035b4 <HAL_DMA_Abort+0x220>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a70      	ldr	r2, [pc, #448]	@ (80035b8 <HAL_DMA_Abort+0x224>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6e      	ldr	r2, [pc, #440]	@ (80035bc <HAL_DMA_Abort+0x228>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6d      	ldr	r2, [pc, #436]	@ (80035c0 <HAL_DMA_Abort+0x22c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6b      	ldr	r2, [pc, #428]	@ (80035c4 <HAL_DMA_Abort+0x230>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6a      	ldr	r2, [pc, #424]	@ (80035c8 <HAL_DMA_Abort+0x234>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	@ (80035cc <HAL_DMA_Abort+0x238>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a67      	ldr	r2, [pc, #412]	@ (80035d0 <HAL_DMA_Abort+0x23c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a65      	ldr	r2, [pc, #404]	@ (80035d4 <HAL_DMA_Abort+0x240>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a64      	ldr	r2, [pc, #400]	@ (80035d8 <HAL_DMA_Abort+0x244>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a62      	ldr	r2, [pc, #392]	@ (80035dc <HAL_DMA_Abort+0x248>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a61      	ldr	r2, [pc, #388]	@ (80035e0 <HAL_DMA_Abort+0x24c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_Abort+0xd6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5f      	ldr	r2, [pc, #380]	@ (80035e4 <HAL_DMA_Abort+0x250>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_DMA_Abort+0xda>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_DMA_Abort+0xdc>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 021e 	bic.w	r2, r2, #30
 8003482:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003492:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e00a      	b.n	80034b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 020e 	bic.w	r2, r2, #14
 80034aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3c      	ldr	r2, [pc, #240]	@ (80035a8 <HAL_DMA_Abort+0x214>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d072      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3a      	ldr	r2, [pc, #232]	@ (80035ac <HAL_DMA_Abort+0x218>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d06d      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a39      	ldr	r2, [pc, #228]	@ (80035b0 <HAL_DMA_Abort+0x21c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d068      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a37      	ldr	r2, [pc, #220]	@ (80035b4 <HAL_DMA_Abort+0x220>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d063      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a36      	ldr	r2, [pc, #216]	@ (80035b8 <HAL_DMA_Abort+0x224>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d05e      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a34      	ldr	r2, [pc, #208]	@ (80035bc <HAL_DMA_Abort+0x228>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d059      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <HAL_DMA_Abort+0x22c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d054      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a31      	ldr	r2, [pc, #196]	@ (80035c4 <HAL_DMA_Abort+0x230>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04f      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a30      	ldr	r2, [pc, #192]	@ (80035c8 <HAL_DMA_Abort+0x234>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04a      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <HAL_DMA_Abort+0x238>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <HAL_DMA_Abort+0x23c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d040      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <HAL_DMA_Abort+0x240>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03b      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a2a      	ldr	r2, [pc, #168]	@ (80035d8 <HAL_DMA_Abort+0x244>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d036      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <HAL_DMA_Abort+0x248>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <HAL_DMA_Abort+0x24c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02c      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <HAL_DMA_Abort+0x250>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d027      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <HAL_DMA_Abort+0x254>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a22      	ldr	r2, [pc, #136]	@ (80035ec <HAL_DMA_Abort+0x258>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a21      	ldr	r2, [pc, #132]	@ (80035f0 <HAL_DMA_Abort+0x25c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <HAL_DMA_Abort+0x260>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1e      	ldr	r2, [pc, #120]	@ (80035f8 <HAL_DMA_Abort+0x264>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1c      	ldr	r2, [pc, #112]	@ (80035fc <HAL_DMA_Abort+0x268>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <HAL_DMA_Abort+0x26c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_Abort+0x20e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <HAL_DMA_Abort+0x270>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d132      	bne.n	8003608 <HAL_DMA_Abort+0x274>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e031      	b.n	800360a <HAL_DMA_Abort+0x276>
 80035a6:	bf00      	nop
 80035a8:	40020010 	.word	0x40020010
 80035ac:	40020028 	.word	0x40020028
 80035b0:	40020040 	.word	0x40020040
 80035b4:	40020058 	.word	0x40020058
 80035b8:	40020070 	.word	0x40020070
 80035bc:	40020088 	.word	0x40020088
 80035c0:	400200a0 	.word	0x400200a0
 80035c4:	400200b8 	.word	0x400200b8
 80035c8:	40020410 	.word	0x40020410
 80035cc:	40020428 	.word	0x40020428
 80035d0:	40020440 	.word	0x40020440
 80035d4:	40020458 	.word	0x40020458
 80035d8:	40020470 	.word	0x40020470
 80035dc:	40020488 	.word	0x40020488
 80035e0:	400204a0 	.word	0x400204a0
 80035e4:	400204b8 	.word	0x400204b8
 80035e8:	58025408 	.word	0x58025408
 80035ec:	5802541c 	.word	0x5802541c
 80035f0:	58025430 	.word	0x58025430
 80035f4:	58025444 	.word	0x58025444
 80035f8:	58025458 	.word	0x58025458
 80035fc:	5802546c 	.word	0x5802546c
 8003600:	58025480 	.word	0x58025480
 8003604:	58025494 	.word	0x58025494
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800361c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6d      	ldr	r2, [pc, #436]	@ (80037d8 <HAL_DMA_Abort+0x444>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	@ (80037dc <HAL_DMA_Abort+0x448>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6a      	ldr	r2, [pc, #424]	@ (80037e0 <HAL_DMA_Abort+0x44c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a68      	ldr	r2, [pc, #416]	@ (80037e4 <HAL_DMA_Abort+0x450>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a67      	ldr	r2, [pc, #412]	@ (80037e8 <HAL_DMA_Abort+0x454>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a65      	ldr	r2, [pc, #404]	@ (80037ec <HAL_DMA_Abort+0x458>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a64      	ldr	r2, [pc, #400]	@ (80037f0 <HAL_DMA_Abort+0x45c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a62      	ldr	r2, [pc, #392]	@ (80037f4 <HAL_DMA_Abort+0x460>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a61      	ldr	r2, [pc, #388]	@ (80037f8 <HAL_DMA_Abort+0x464>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5f      	ldr	r2, [pc, #380]	@ (80037fc <HAL_DMA_Abort+0x468>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5e      	ldr	r2, [pc, #376]	@ (8003800 <HAL_DMA_Abort+0x46c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5c      	ldr	r2, [pc, #368]	@ (8003804 <HAL_DMA_Abort+0x470>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5b      	ldr	r2, [pc, #364]	@ (8003808 <HAL_DMA_Abort+0x474>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a59      	ldr	r2, [pc, #356]	@ (800380c <HAL_DMA_Abort+0x478>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_DMA_Abort+0x47c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_Abort+0x32a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a56      	ldr	r2, [pc, #344]	@ (8003814 <HAL_DMA_Abort+0x480>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <HAL_DMA_Abort+0x33c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e007      	b.n	80036e0 <HAL_DMA_Abort+0x34c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036e0:	e013      	b.n	800370a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e2:	f7ff f967 	bl	80029b4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d90c      	bls.n	800370a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2203      	movs	r2, #3
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12d      	b.n	8003966 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2f      	ldr	r2, [pc, #188]	@ (80037d8 <HAL_DMA_Abort+0x444>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04a      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <HAL_DMA_Abort+0x448>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d045      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2c      	ldr	r2, [pc, #176]	@ (80037e0 <HAL_DMA_Abort+0x44c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d040      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2a      	ldr	r2, [pc, #168]	@ (80037e4 <HAL_DMA_Abort+0x450>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d03b      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a29      	ldr	r2, [pc, #164]	@ (80037e8 <HAL_DMA_Abort+0x454>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d036      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a27      	ldr	r2, [pc, #156]	@ (80037ec <HAL_DMA_Abort+0x458>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a26      	ldr	r2, [pc, #152]	@ (80037f0 <HAL_DMA_Abort+0x45c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02c      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a24      	ldr	r2, [pc, #144]	@ (80037f4 <HAL_DMA_Abort+0x460>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d027      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a23      	ldr	r2, [pc, #140]	@ (80037f8 <HAL_DMA_Abort+0x464>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d022      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a21      	ldr	r2, [pc, #132]	@ (80037fc <HAL_DMA_Abort+0x468>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a20      	ldr	r2, [pc, #128]	@ (8003800 <HAL_DMA_Abort+0x46c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <HAL_DMA_Abort+0x470>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1d      	ldr	r2, [pc, #116]	@ (8003808 <HAL_DMA_Abort+0x474>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <HAL_DMA_Abort+0x478>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d009      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003810 <HAL_DMA_Abort+0x47c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Abort+0x422>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a18      	ldr	r2, [pc, #96]	@ (8003814 <HAL_DMA_Abort+0x480>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Abort+0x426>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_DMA_Abort+0x428>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02b      	beq.n	8003818 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	223f      	movs	r2, #63	@ 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	e02a      	b.n	800382e <HAL_DMA_Abort+0x49a>
 80037d8:	40020010 	.word	0x40020010
 80037dc:	40020028 	.word	0x40020028
 80037e0:	40020040 	.word	0x40020040
 80037e4:	40020058 	.word	0x40020058
 80037e8:	40020070 	.word	0x40020070
 80037ec:	40020088 	.word	0x40020088
 80037f0:	400200a0 	.word	0x400200a0
 80037f4:	400200b8 	.word	0x400200b8
 80037f8:	40020410 	.word	0x40020410
 80037fc:	40020428 	.word	0x40020428
 8003800:	40020440 	.word	0x40020440
 8003804:	40020458 	.word	0x40020458
 8003808:	40020470 	.word	0x40020470
 800380c:	40020488 	.word	0x40020488
 8003810:	400204a0 	.word	0x400204a0
 8003814:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2201      	movs	r2, #1
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4f      	ldr	r2, [pc, #316]	@ (8003970 <HAL_DMA_Abort+0x5dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d072      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a4d      	ldr	r2, [pc, #308]	@ (8003974 <HAL_DMA_Abort+0x5e0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d06d      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4c      	ldr	r2, [pc, #304]	@ (8003978 <HAL_DMA_Abort+0x5e4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d068      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4a      	ldr	r2, [pc, #296]	@ (800397c <HAL_DMA_Abort+0x5e8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d063      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a49      	ldr	r2, [pc, #292]	@ (8003980 <HAL_DMA_Abort+0x5ec>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d05e      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a47      	ldr	r2, [pc, #284]	@ (8003984 <HAL_DMA_Abort+0x5f0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d059      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a46      	ldr	r2, [pc, #280]	@ (8003988 <HAL_DMA_Abort+0x5f4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d054      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a44      	ldr	r2, [pc, #272]	@ (800398c <HAL_DMA_Abort+0x5f8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d04f      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a43      	ldr	r2, [pc, #268]	@ (8003990 <HAL_DMA_Abort+0x5fc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d04a      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a41      	ldr	r2, [pc, #260]	@ (8003994 <HAL_DMA_Abort+0x600>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d045      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a40      	ldr	r2, [pc, #256]	@ (8003998 <HAL_DMA_Abort+0x604>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d040      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3e      	ldr	r2, [pc, #248]	@ (800399c <HAL_DMA_Abort+0x608>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d03b      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	@ (80039a0 <HAL_DMA_Abort+0x60c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d036      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <HAL_DMA_Abort+0x610>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d031      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3a      	ldr	r2, [pc, #232]	@ (80039a8 <HAL_DMA_Abort+0x614>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d02c      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a38      	ldr	r2, [pc, #224]	@ (80039ac <HAL_DMA_Abort+0x618>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a37      	ldr	r2, [pc, #220]	@ (80039b0 <HAL_DMA_Abort+0x61c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d022      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a35      	ldr	r2, [pc, #212]	@ (80039b4 <HAL_DMA_Abort+0x620>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01d      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a34      	ldr	r2, [pc, #208]	@ (80039b8 <HAL_DMA_Abort+0x624>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a32      	ldr	r2, [pc, #200]	@ (80039bc <HAL_DMA_Abort+0x628>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a31      	ldr	r2, [pc, #196]	@ (80039c0 <HAL_DMA_Abort+0x62c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2f      	ldr	r2, [pc, #188]	@ (80039c4 <HAL_DMA_Abort+0x630>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2e      	ldr	r2, [pc, #184]	@ (80039c8 <HAL_DMA_Abort+0x634>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_DMA_Abort+0x58a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2c      	ldr	r2, [pc, #176]	@ (80039cc <HAL_DMA_Abort+0x638>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_DMA_Abort+0x58e>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_DMA_Abort+0x590>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003930:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003948:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003952:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40020010 	.word	0x40020010
 8003974:	40020028 	.word	0x40020028
 8003978:	40020040 	.word	0x40020040
 800397c:	40020058 	.word	0x40020058
 8003980:	40020070 	.word	0x40020070
 8003984:	40020088 	.word	0x40020088
 8003988:	400200a0 	.word	0x400200a0
 800398c:	400200b8 	.word	0x400200b8
 8003990:	40020410 	.word	0x40020410
 8003994:	40020428 	.word	0x40020428
 8003998:	40020440 	.word	0x40020440
 800399c:	40020458 	.word	0x40020458
 80039a0:	40020470 	.word	0x40020470
 80039a4:	40020488 	.word	0x40020488
 80039a8:	400204a0 	.word	0x400204a0
 80039ac:	400204b8 	.word	0x400204b8
 80039b0:	58025408 	.word	0x58025408
 80039b4:	5802541c 	.word	0x5802541c
 80039b8:	58025430 	.word	0x58025430
 80039bc:	58025444 	.word	0x58025444
 80039c0:	58025458 	.word	0x58025458
 80039c4:	5802546c 	.word	0x5802546c
 80039c8:	58025480 	.word	0x58025480
 80039cc:	58025494 	.word	0x58025494

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e237      	b.n	8003e52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e22c      	b.n	8003e52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003b70 <HAL_DMA_Abort_IT+0x1a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d04a      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5b      	ldr	r2, [pc, #364]	@ (8003b74 <HAL_DMA_Abort_IT+0x1a4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d045      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a59      	ldr	r2, [pc, #356]	@ (8003b78 <HAL_DMA_Abort_IT+0x1a8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d040      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a58      	ldr	r2, [pc, #352]	@ (8003b7c <HAL_DMA_Abort_IT+0x1ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d03b      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a56      	ldr	r2, [pc, #344]	@ (8003b80 <HAL_DMA_Abort_IT+0x1b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d036      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a55      	ldr	r2, [pc, #340]	@ (8003b84 <HAL_DMA_Abort_IT+0x1b4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d031      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a53      	ldr	r2, [pc, #332]	@ (8003b88 <HAL_DMA_Abort_IT+0x1b8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02c      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a52      	ldr	r2, [pc, #328]	@ (8003b8c <HAL_DMA_Abort_IT+0x1bc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d027      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a50      	ldr	r2, [pc, #320]	@ (8003b90 <HAL_DMA_Abort_IT+0x1c0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4f      	ldr	r2, [pc, #316]	@ (8003b94 <HAL_DMA_Abort_IT+0x1c4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01d      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a4d      	ldr	r2, [pc, #308]	@ (8003b98 <HAL_DMA_Abort_IT+0x1c8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d018      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8003b9c <HAL_DMA_Abort_IT+0x1cc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00e      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a49      	ldr	r2, [pc, #292]	@ (8003ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a46      	ldr	r2, [pc, #280]	@ (8003bac <HAL_DMA_Abort_IT+0x1dc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_DMA_Abort_IT+0xcc>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_DMA_Abort_IT+0xce>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8086 	beq.w	8003bb0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8003b70 <HAL_DMA_Abort_IT+0x1a0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04a      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2e      	ldr	r2, [pc, #184]	@ (8003b74 <HAL_DMA_Abort_IT+0x1a4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d045      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b78 <HAL_DMA_Abort_IT+0x1a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d040      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_DMA_Abort_IT+0x1ac>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d03b      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <HAL_DMA_Abort_IT+0x1b0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d036      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <HAL_DMA_Abort_IT+0x1b4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d031      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a26      	ldr	r2, [pc, #152]	@ (8003b88 <HAL_DMA_Abort_IT+0x1b8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02c      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_DMA_Abort_IT+0x1bc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d027      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	@ (8003b90 <HAL_DMA_Abort_IT+0x1c0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_DMA_Abort_IT+0x1c4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01d      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a20      	ldr	r2, [pc, #128]	@ (8003b98 <HAL_DMA_Abort_IT+0x1c8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <HAL_DMA_Abort_IT+0x1cc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba0 <HAL_DMA_Abort_IT+0x1d0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_DMA_Abort_IT+0x1d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_DMA_Abort_IT+0x1d8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_DMA_Abort_IT+0x17c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_DMA_Abort_IT+0x1dc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <HAL_DMA_Abort_IT+0x18e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e178      	b.n	8003e50 <HAL_DMA_Abort_IT+0x480>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e16f      	b.n	8003e50 <HAL_DMA_Abort_IT+0x480>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 020e 	bic.w	r2, r2, #14
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6c      	ldr	r2, [pc, #432]	@ (8003d78 <HAL_DMA_Abort_IT+0x3a8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04a      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6b      	ldr	r2, [pc, #428]	@ (8003d7c <HAL_DMA_Abort_IT+0x3ac>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d045      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a69      	ldr	r2, [pc, #420]	@ (8003d80 <HAL_DMA_Abort_IT+0x3b0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a68      	ldr	r2, [pc, #416]	@ (8003d84 <HAL_DMA_Abort_IT+0x3b4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d03b      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a66      	ldr	r2, [pc, #408]	@ (8003d88 <HAL_DMA_Abort_IT+0x3b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d036      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a65      	ldr	r2, [pc, #404]	@ (8003d8c <HAL_DMA_Abort_IT+0x3bc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d031      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a63      	ldr	r2, [pc, #396]	@ (8003d90 <HAL_DMA_Abort_IT+0x3c0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02c      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a62      	ldr	r2, [pc, #392]	@ (8003d94 <HAL_DMA_Abort_IT+0x3c4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d027      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a60      	ldr	r2, [pc, #384]	@ (8003d98 <HAL_DMA_Abort_IT+0x3c8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003d9c <HAL_DMA_Abort_IT+0x3cc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5d      	ldr	r2, [pc, #372]	@ (8003da0 <HAL_DMA_Abort_IT+0x3d0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a5c      	ldr	r2, [pc, #368]	@ (8003da4 <HAL_DMA_Abort_IT+0x3d4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003da8 <HAL_DMA_Abort_IT+0x3d8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a59      	ldr	r2, [pc, #356]	@ (8003dac <HAL_DMA_Abort_IT+0x3dc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a57      	ldr	r2, [pc, #348]	@ (8003db0 <HAL_DMA_Abort_IT+0x3e0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x290>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a56      	ldr	r2, [pc, #344]	@ (8003db4 <HAL_DMA_Abort_IT+0x3e4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <HAL_DMA_Abort_IT+0x2a2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e007      	b.n	8003c82 <HAL_DMA_Abort_IT+0x2b2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3c      	ldr	r2, [pc, #240]	@ (8003d78 <HAL_DMA_Abort_IT+0x3a8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d072      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	@ (8003d7c <HAL_DMA_Abort_IT+0x3ac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d06d      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a39      	ldr	r2, [pc, #228]	@ (8003d80 <HAL_DMA_Abort_IT+0x3b0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d068      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a37      	ldr	r2, [pc, #220]	@ (8003d84 <HAL_DMA_Abort_IT+0x3b4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d063      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a36      	ldr	r2, [pc, #216]	@ (8003d88 <HAL_DMA_Abort_IT+0x3b8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d05e      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a34      	ldr	r2, [pc, #208]	@ (8003d8c <HAL_DMA_Abort_IT+0x3bc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d059      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a33      	ldr	r2, [pc, #204]	@ (8003d90 <HAL_DMA_Abort_IT+0x3c0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d054      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a31      	ldr	r2, [pc, #196]	@ (8003d94 <HAL_DMA_Abort_IT+0x3c4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04f      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a30      	ldr	r2, [pc, #192]	@ (8003d98 <HAL_DMA_Abort_IT+0x3c8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d04a      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d9c <HAL_DMA_Abort_IT+0x3cc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d045      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2d      	ldr	r2, [pc, #180]	@ (8003da0 <HAL_DMA_Abort_IT+0x3d0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d040      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8003da4 <HAL_DMA_Abort_IT+0x3d4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d03b      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003da8 <HAL_DMA_Abort_IT+0x3d8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d036      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a28      	ldr	r2, [pc, #160]	@ (8003dac <HAL_DMA_Abort_IT+0x3dc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <HAL_DMA_Abort_IT+0x3e0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d02c      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a25      	ldr	r2, [pc, #148]	@ (8003db4 <HAL_DMA_Abort_IT+0x3e4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d027      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a24      	ldr	r2, [pc, #144]	@ (8003db8 <HAL_DMA_Abort_IT+0x3e8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a22      	ldr	r2, [pc, #136]	@ (8003dbc <HAL_DMA_Abort_IT+0x3ec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	@ (8003dc0 <HAL_DMA_Abort_IT+0x3f0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d018      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc4 <HAL_DMA_Abort_IT+0x3f4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <HAL_DMA_Abort_IT+0x3f8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <HAL_DMA_Abort_IT+0x3fc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd0 <HAL_DMA_Abort_IT+0x400>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_DMA_Abort_IT+0x3a2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	@ (8003dd4 <HAL_DMA_Abort_IT+0x404>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d132      	bne.n	8003dd8 <HAL_DMA_Abort_IT+0x408>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e031      	b.n	8003dda <HAL_DMA_Abort_IT+0x40a>
 8003d76:	bf00      	nop
 8003d78:	40020010 	.word	0x40020010
 8003d7c:	40020028 	.word	0x40020028
 8003d80:	40020040 	.word	0x40020040
 8003d84:	40020058 	.word	0x40020058
 8003d88:	40020070 	.word	0x40020070
 8003d8c:	40020088 	.word	0x40020088
 8003d90:	400200a0 	.word	0x400200a0
 8003d94:	400200b8 	.word	0x400200b8
 8003d98:	40020410 	.word	0x40020410
 8003d9c:	40020428 	.word	0x40020428
 8003da0:	40020440 	.word	0x40020440
 8003da4:	40020458 	.word	0x40020458
 8003da8:	40020470 	.word	0x40020470
 8003dac:	40020488 	.word	0x40020488
 8003db0:	400204a0 	.word	0x400204a0
 8003db4:	400204b8 	.word	0x400204b8
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d028      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop

08003e5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e68:	4b67      	ldr	r3, [pc, #412]	@ (8004008 <HAL_DMA_IRQHandler+0x1ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a67      	ldr	r2, [pc, #412]	@ (800400c <HAL_DMA_IRQHandler+0x1b0>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5f      	ldr	r2, [pc, #380]	@ (8004010 <HAL_DMA_IRQHandler+0x1b4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004014 <HAL_DMA_IRQHandler+0x1b8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8004018 <HAL_DMA_IRQHandler+0x1bc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800401c <HAL_DMA_IRQHandler+0x1c0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a59      	ldr	r2, [pc, #356]	@ (8004020 <HAL_DMA_IRQHandler+0x1c4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a57      	ldr	r2, [pc, #348]	@ (8004024 <HAL_DMA_IRQHandler+0x1c8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a56      	ldr	r2, [pc, #344]	@ (8004028 <HAL_DMA_IRQHandler+0x1cc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a54      	ldr	r2, [pc, #336]	@ (800402c <HAL_DMA_IRQHandler+0x1d0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a53      	ldr	r2, [pc, #332]	@ (8004030 <HAL_DMA_IRQHandler+0x1d4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a51      	ldr	r2, [pc, #324]	@ (8004034 <HAL_DMA_IRQHandler+0x1d8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a50      	ldr	r2, [pc, #320]	@ (8004038 <HAL_DMA_IRQHandler+0x1dc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_DMA_IRQHandler+0x1e0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_DMA_IRQHandler+0x1e4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4b      	ldr	r2, [pc, #300]	@ (8004044 <HAL_DMA_IRQHandler+0x1e8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004048 <HAL_DMA_IRQHandler+0x1ec>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xd2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a48      	ldr	r2, [pc, #288]	@ (800404c <HAL_DMA_IRQHandler+0x1f0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_DMA_IRQHandler+0xd6>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_DMA_IRQHandler+0xd8>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 842b 	beq.w	8004790 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2208      	movs	r2, #8
 8003f44:	409a      	lsls	r2, r3
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a2 	beq.w	8004094 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2e      	ldr	r2, [pc, #184]	@ (8004010 <HAL_DMA_IRQHandler+0x1b4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d04a      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <HAL_DMA_IRQHandler+0x1b8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d045      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	@ (8004018 <HAL_DMA_IRQHandler+0x1bc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d040      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_DMA_IRQHandler+0x1c0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d03b      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	@ (8004020 <HAL_DMA_IRQHandler+0x1c4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d036      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <HAL_DMA_IRQHandler+0x1c8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d031      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a25      	ldr	r2, [pc, #148]	@ (8004028 <HAL_DMA_IRQHandler+0x1cc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	@ (800402c <HAL_DMA_IRQHandler+0x1d0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d027      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	@ (8004030 <HAL_DMA_IRQHandler+0x1d4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a21      	ldr	r2, [pc, #132]	@ (8004034 <HAL_DMA_IRQHandler+0x1d8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004038 <HAL_DMA_IRQHandler+0x1dc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <HAL_DMA_IRQHandler+0x1e0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <HAL_DMA_IRQHandler+0x1e4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <HAL_DMA_IRQHandler+0x1e8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <HAL_DMA_IRQHandler+0x1ec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	@ (800404c <HAL_DMA_IRQHandler+0x1f0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d12f      	bne.n	8004050 <HAL_DMA_IRQHandler+0x1f4>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e02e      	b.n	8004064 <HAL_DMA_IRQHandler+0x208>
 8004006:	bf00      	nop
 8004008:	24000000 	.word	0x24000000
 800400c:	1b4e81b5 	.word	0x1b4e81b5
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf14      	ite	ne
 800405e:	2301      	movne	r3, #1
 8004060:	2300      	moveq	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0204 	bic.w	r2, r2, #4
 8004076:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2208      	movs	r2, #8
 8004082:	409a      	lsls	r2, r3
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06e      	beq.n	8004188 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a69      	ldr	r2, [pc, #420]	@ (8004254 <HAL_DMA_IRQHandler+0x3f8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d04a      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a67      	ldr	r2, [pc, #412]	@ (8004258 <HAL_DMA_IRQHandler+0x3fc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d045      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a66      	ldr	r2, [pc, #408]	@ (800425c <HAL_DMA_IRQHandler+0x400>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d040      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a64      	ldr	r2, [pc, #400]	@ (8004260 <HAL_DMA_IRQHandler+0x404>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d03b      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a63      	ldr	r2, [pc, #396]	@ (8004264 <HAL_DMA_IRQHandler+0x408>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d036      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a61      	ldr	r2, [pc, #388]	@ (8004268 <HAL_DMA_IRQHandler+0x40c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d031      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a60      	ldr	r2, [pc, #384]	@ (800426c <HAL_DMA_IRQHandler+0x410>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d02c      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004270 <HAL_DMA_IRQHandler+0x414>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d027      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a5d      	ldr	r2, [pc, #372]	@ (8004274 <HAL_DMA_IRQHandler+0x418>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a5b      	ldr	r2, [pc, #364]	@ (8004278 <HAL_DMA_IRQHandler+0x41c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5a      	ldr	r2, [pc, #360]	@ (800427c <HAL_DMA_IRQHandler+0x420>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a58      	ldr	r2, [pc, #352]	@ (8004280 <HAL_DMA_IRQHandler+0x424>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a57      	ldr	r2, [pc, #348]	@ (8004284 <HAL_DMA_IRQHandler+0x428>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a55      	ldr	r2, [pc, #340]	@ (8004288 <HAL_DMA_IRQHandler+0x42c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a54      	ldr	r2, [pc, #336]	@ (800428c <HAL_DMA_IRQHandler+0x430>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_DMA_IRQHandler+0x2ee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a52      	ldr	r2, [pc, #328]	@ (8004290 <HAL_DMA_IRQHandler+0x434>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10a      	bne.n	8004160 <HAL_DMA_IRQHandler+0x304>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e003      	b.n	8004168 <HAL_DMA_IRQHandler+0x30c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2201      	movs	r2, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004180:	f043 0202 	orr.w	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	2204      	movs	r2, #4
 8004192:	409a      	lsls	r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808f 	beq.w	80042bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004254 <HAL_DMA_IRQHandler+0x3f8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04a      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004258 <HAL_DMA_IRQHandler+0x3fc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d045      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a29      	ldr	r2, [pc, #164]	@ (800425c <HAL_DMA_IRQHandler+0x400>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d040      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a27      	ldr	r2, [pc, #156]	@ (8004260 <HAL_DMA_IRQHandler+0x404>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a26      	ldr	r2, [pc, #152]	@ (8004264 <HAL_DMA_IRQHandler+0x408>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <HAL_DMA_IRQHandler+0x40c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a23      	ldr	r2, [pc, #140]	@ (800426c <HAL_DMA_IRQHandler+0x410>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d02c      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a21      	ldr	r2, [pc, #132]	@ (8004270 <HAL_DMA_IRQHandler+0x414>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d027      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a20      	ldr	r2, [pc, #128]	@ (8004274 <HAL_DMA_IRQHandler+0x418>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <HAL_DMA_IRQHandler+0x41c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <HAL_DMA_IRQHandler+0x420>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1b      	ldr	r2, [pc, #108]	@ (8004280 <HAL_DMA_IRQHandler+0x424>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <HAL_DMA_IRQHandler+0x428>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a18      	ldr	r2, [pc, #96]	@ (8004288 <HAL_DMA_IRQHandler+0x42c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <HAL_DMA_IRQHandler+0x430>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_DMA_IRQHandler+0x3e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <HAL_DMA_IRQHandler+0x434>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d12a      	bne.n	8004294 <HAL_DMA_IRQHandler+0x438>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e023      	b.n	800429c <HAL_DMA_IRQHandler+0x440>
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2204      	movs	r2, #4
 80042aa:	409a      	lsls	r2, r3
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2210      	movs	r2, #16
 80042c6:	409a      	lsls	r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a6 	beq.w	800441e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a85      	ldr	r2, [pc, #532]	@ (80044ec <HAL_DMA_IRQHandler+0x690>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d04a      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a83      	ldr	r2, [pc, #524]	@ (80044f0 <HAL_DMA_IRQHandler+0x694>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d045      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a82      	ldr	r2, [pc, #520]	@ (80044f4 <HAL_DMA_IRQHandler+0x698>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d040      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a80      	ldr	r2, [pc, #512]	@ (80044f8 <HAL_DMA_IRQHandler+0x69c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d03b      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a7f      	ldr	r2, [pc, #508]	@ (80044fc <HAL_DMA_IRQHandler+0x6a0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d036      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7d      	ldr	r2, [pc, #500]	@ (8004500 <HAL_DMA_IRQHandler+0x6a4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d031      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7c      	ldr	r2, [pc, #496]	@ (8004504 <HAL_DMA_IRQHandler+0x6a8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d02c      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7a      	ldr	r2, [pc, #488]	@ (8004508 <HAL_DMA_IRQHandler+0x6ac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d027      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a79      	ldr	r2, [pc, #484]	@ (800450c <HAL_DMA_IRQHandler+0x6b0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a77      	ldr	r2, [pc, #476]	@ (8004510 <HAL_DMA_IRQHandler+0x6b4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01d      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a76      	ldr	r2, [pc, #472]	@ (8004514 <HAL_DMA_IRQHandler+0x6b8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a74      	ldr	r2, [pc, #464]	@ (8004518 <HAL_DMA_IRQHandler+0x6bc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a73      	ldr	r2, [pc, #460]	@ (800451c <HAL_DMA_IRQHandler+0x6c0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a71      	ldr	r2, [pc, #452]	@ (8004520 <HAL_DMA_IRQHandler+0x6c4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a70      	ldr	r2, [pc, #448]	@ (8004524 <HAL_DMA_IRQHandler+0x6c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_DMA_IRQHandler+0x516>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6e      	ldr	r2, [pc, #440]	@ (8004528 <HAL_DMA_IRQHandler+0x6cc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10a      	bne.n	8004388 <HAL_DMA_IRQHandler+0x52c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e009      	b.n	800439c <HAL_DMA_IRQHandler+0x540>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d03e      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2210      	movs	r2, #16
 80043aa:	409a      	lsls	r2, r3
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d024      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e01f      	b.n	800441e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e016      	b.n	800441e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0208 	bic.w	r2, r2, #8
 800440c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2220      	movs	r2, #32
 8004428:	409a      	lsls	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8110 	beq.w	8004654 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2c      	ldr	r2, [pc, #176]	@ (80044ec <HAL_DMA_IRQHandler+0x690>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d04a      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <HAL_DMA_IRQHandler+0x694>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d045      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <HAL_DMA_IRQHandler+0x698>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d040      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <HAL_DMA_IRQHandler+0x69c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d03b      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_DMA_IRQHandler+0x6a0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d036      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a25      	ldr	r2, [pc, #148]	@ (8004500 <HAL_DMA_IRQHandler+0x6a4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d031      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a23      	ldr	r2, [pc, #140]	@ (8004504 <HAL_DMA_IRQHandler+0x6a8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02c      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a22      	ldr	r2, [pc, #136]	@ (8004508 <HAL_DMA_IRQHandler+0x6ac>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d027      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	@ (800450c <HAL_DMA_IRQHandler+0x6b0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d022      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1f      	ldr	r2, [pc, #124]	@ (8004510 <HAL_DMA_IRQHandler+0x6b4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01d      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <HAL_DMA_IRQHandler+0x6b8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d018      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004518 <HAL_DMA_IRQHandler+0x6bc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	@ (800451c <HAL_DMA_IRQHandler+0x6c0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00e      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_DMA_IRQHandler+0x6c4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <HAL_DMA_IRQHandler+0x6c8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x678>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_DMA_IRQHandler+0x6cc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d12b      	bne.n	800452c <HAL_DMA_IRQHandler+0x6d0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e02a      	b.n	8004540 <HAL_DMA_IRQHandler+0x6e4>
 80044ea:	bf00      	nop
 80044ec:	40020010 	.word	0x40020010
 80044f0:	40020028 	.word	0x40020028
 80044f4:	40020040 	.word	0x40020040
 80044f8:	40020058 	.word	0x40020058
 80044fc:	40020070 	.word	0x40020070
 8004500:	40020088 	.word	0x40020088
 8004504:	400200a0 	.word	0x400200a0
 8004508:	400200b8 	.word	0x400200b8
 800450c:	40020410 	.word	0x40020410
 8004510:	40020428 	.word	0x40020428
 8004514:	40020440 	.word	0x40020440
 8004518:	40020458 	.word	0x40020458
 800451c:	40020470 	.word	0x40020470
 8004520:	40020488 	.word	0x40020488
 8004524:	400204a0 	.word	0x400204a0
 8004528:	400204b8 	.word	0x400204b8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8087 	beq.w	8004654 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	2220      	movs	r2, #32
 8004550:	409a      	lsls	r2, r3
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b04      	cmp	r3, #4
 8004560:	d139      	bne.n	80045d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0216 	bic.w	r2, r2, #22
 8004570:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004580:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <HAL_DMA_IRQHandler+0x736>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458e:	2b00      	cmp	r3, #0
 8004590:	d007      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0208 	bic.w	r2, r2, #8
 80045a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	223f      	movs	r2, #63	@ 0x3f
 80045ac:	409a      	lsls	r2, r3
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 834a 	beq.w	8004c60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
          }
          return;
 80045d4:	e344      	b.n	8004c60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d02c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
 8004602:	e027      	b.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d023      	beq.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
 8004614:	e01e      	b.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10f      	bne.n	8004644 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0210 	bic.w	r2, r2, #16
 8004632:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8306 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8088 	beq.w	800477c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7a      	ldr	r2, [pc, #488]	@ (8004864 <HAL_DMA_IRQHandler+0xa08>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d04a      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a79      	ldr	r2, [pc, #484]	@ (8004868 <HAL_DMA_IRQHandler+0xa0c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d045      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a77      	ldr	r2, [pc, #476]	@ (800486c <HAL_DMA_IRQHandler+0xa10>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d040      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a76      	ldr	r2, [pc, #472]	@ (8004870 <HAL_DMA_IRQHandler+0xa14>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d03b      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a74      	ldr	r2, [pc, #464]	@ (8004874 <HAL_DMA_IRQHandler+0xa18>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d036      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a73      	ldr	r2, [pc, #460]	@ (8004878 <HAL_DMA_IRQHandler+0xa1c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d031      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a71      	ldr	r2, [pc, #452]	@ (800487c <HAL_DMA_IRQHandler+0xa20>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02c      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a70      	ldr	r2, [pc, #448]	@ (8004880 <HAL_DMA_IRQHandler+0xa24>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d027      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004884 <HAL_DMA_IRQHandler+0xa28>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004888 <HAL_DMA_IRQHandler+0xa2c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d01d      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6b      	ldr	r2, [pc, #428]	@ (800488c <HAL_DMA_IRQHandler+0xa30>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004890 <HAL_DMA_IRQHandler+0xa34>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a68      	ldr	r2, [pc, #416]	@ (8004894 <HAL_DMA_IRQHandler+0xa38>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a67      	ldr	r2, [pc, #412]	@ (8004898 <HAL_DMA_IRQHandler+0xa3c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a65      	ldr	r2, [pc, #404]	@ (800489c <HAL_DMA_IRQHandler+0xa40>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_DMA_IRQHandler+0x8b8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a64      	ldr	r2, [pc, #400]	@ (80048a0 <HAL_DMA_IRQHandler+0xa44>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <HAL_DMA_IRQHandler+0x8ca>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e007      	b.n	8004736 <HAL_DMA_IRQHandler+0x8da>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473e:	429a      	cmp	r2, r3
 8004740:	d307      	bcc.n	8004752 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f2      	bne.n	8004736 <HAL_DMA_IRQHandler+0x8da>
 8004750:	e000      	b.n	8004754 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004752:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2203      	movs	r2, #3
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800476a:	e003      	b.n	8004774 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8272 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
 800478e:	e26c      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a43      	ldr	r2, [pc, #268]	@ (80048a4 <HAL_DMA_IRQHandler+0xa48>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d022      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_DMA_IRQHandler+0xa4c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d01d      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a40      	ldr	r2, [pc, #256]	@ (80048ac <HAL_DMA_IRQHandler+0xa50>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d018      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3f      	ldr	r2, [pc, #252]	@ (80048b0 <HAL_DMA_IRQHandler+0xa54>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3d      	ldr	r2, [pc, #244]	@ (80048b4 <HAL_DMA_IRQHandler+0xa58>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3c      	ldr	r2, [pc, #240]	@ (80048b8 <HAL_DMA_IRQHandler+0xa5c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d009      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <HAL_DMA_IRQHandler+0xa60>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_DMA_IRQHandler+0x984>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a39      	ldr	r2, [pc, #228]	@ (80048c0 <HAL_DMA_IRQHandler+0xa64>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x988>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_DMA_IRQHandler+0x98a>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 823f 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	2204      	movs	r2, #4
 80047fe:	409a      	lsls	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80cd 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xb48>
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80c7 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2204      	movs	r2, #4
 8004820:	409a      	lsls	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d049      	beq.n	80048c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8210 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800484c:	e20a      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8206 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004860:	e200      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe08>
 8004862:	bf00      	nop
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
 80048a4:	58025408 	.word	0x58025408
 80048a8:	5802541c 	.word	0x5802541c
 80048ac:	58025430 	.word	0x58025430
 80048b0:	58025444 	.word	0x58025444
 80048b4:	58025458 	.word	0x58025458
 80048b8:	5802546c 	.word	0x5802546c
 80048bc:	58025480 	.word	0x58025480
 80048c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d160      	bne.n	8004990 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad0 <HAL_DMA_IRQHandler+0xc74>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7d      	ldr	r2, [pc, #500]	@ (8004ad4 <HAL_DMA_IRQHandler+0xc78>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ad8 <HAL_DMA_IRQHandler+0xc7c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7a      	ldr	r2, [pc, #488]	@ (8004adc <HAL_DMA_IRQHandler+0xc80>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a79      	ldr	r2, [pc, #484]	@ (8004ae0 <HAL_DMA_IRQHandler+0xc84>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a77      	ldr	r2, [pc, #476]	@ (8004ae4 <HAL_DMA_IRQHandler+0xc88>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a76      	ldr	r2, [pc, #472]	@ (8004ae8 <HAL_DMA_IRQHandler+0xc8c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_DMA_IRQHandler+0xc90>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a73      	ldr	r2, [pc, #460]	@ (8004af0 <HAL_DMA_IRQHandler+0xc94>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a71      	ldr	r2, [pc, #452]	@ (8004af4 <HAL_DMA_IRQHandler+0xc98>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a70      	ldr	r2, [pc, #448]	@ (8004af8 <HAL_DMA_IRQHandler+0xc9c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_DMA_IRQHandler+0xca0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b00 <HAL_DMA_IRQHandler+0xca4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6b      	ldr	r2, [pc, #428]	@ (8004b04 <HAL_DMA_IRQHandler+0xca8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b08 <HAL_DMA_IRQHandler+0xcac>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_DMA_IRQHandler+0xb12>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_DMA_IRQHandler+0xcb0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <HAL_DMA_IRQHandler+0xb24>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0208 	bic.w	r2, r2, #8
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e007      	b.n	8004990 <HAL_DMA_IRQHandler+0xb34>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0204 	bic.w	r2, r2, #4
 800498e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8165 	beq.w	8004c64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a2:	e15f      	b.n	8004c64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2202      	movs	r2, #2
 80049ae:	409a      	lsls	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80c5 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xce8>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80bf 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2202      	movs	r2, #2
 80049d0:	409a      	lsls	r2, r3
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d018      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 813a 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	e134      	b.n	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8130 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a10:	e12a      	b.n	8004c68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8089 	bne.w	8004b30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad0 <HAL_DMA_IRQHandler+0xc74>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04a      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <HAL_DMA_IRQHandler+0xc78>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d045      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a28      	ldr	r2, [pc, #160]	@ (8004ad8 <HAL_DMA_IRQHandler+0xc7c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d040      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <HAL_DMA_IRQHandler+0xc80>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d03b      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ae0 <HAL_DMA_IRQHandler+0xc84>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d036      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a23      	ldr	r2, [pc, #140]	@ (8004ae4 <HAL_DMA_IRQHandler+0xc88>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <HAL_DMA_IRQHandler+0xc8c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02c      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_DMA_IRQHandler+0xc90>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d027      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_DMA_IRQHandler+0xc94>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_DMA_IRQHandler+0xc98>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_DMA_IRQHandler+0xc9c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1a      	ldr	r2, [pc, #104]	@ (8004afc <HAL_DMA_IRQHandler+0xca0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <HAL_DMA_IRQHandler+0xca4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <HAL_DMA_IRQHandler+0xca8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_DMA_IRQHandler+0xcac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_IRQHandler+0xc62>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <HAL_DMA_IRQHandler+0xcb0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d128      	bne.n	8004b10 <HAL_DMA_IRQHandler+0xcb4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0214 	bic.w	r2, r2, #20
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e027      	b.n	8004b20 <HAL_DMA_IRQHandler+0xcc4>
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 020a 	bic.w	r2, r2, #10
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8097 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b42:	e091      	b.n	8004c68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8088 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8082 	beq.w	8004c6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a41      	ldr	r2, [pc, #260]	@ (8004c70 <HAL_DMA_IRQHandler+0xe14>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d04a      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3f      	ldr	r2, [pc, #252]	@ (8004c74 <HAL_DMA_IRQHandler+0xe18>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d045      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c78 <HAL_DMA_IRQHandler+0xe1c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d040      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a3c      	ldr	r2, [pc, #240]	@ (8004c7c <HAL_DMA_IRQHandler+0xe20>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d03b      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a3b      	ldr	r2, [pc, #236]	@ (8004c80 <HAL_DMA_IRQHandler+0xe24>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d036      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a39      	ldr	r2, [pc, #228]	@ (8004c84 <HAL_DMA_IRQHandler+0xe28>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a38      	ldr	r2, [pc, #224]	@ (8004c88 <HAL_DMA_IRQHandler+0xe2c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d02c      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a36      	ldr	r2, [pc, #216]	@ (8004c8c <HAL_DMA_IRQHandler+0xe30>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d027      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a35      	ldr	r2, [pc, #212]	@ (8004c90 <HAL_DMA_IRQHandler+0xe34>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d022      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a33      	ldr	r2, [pc, #204]	@ (8004c94 <HAL_DMA_IRQHandler+0xe38>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a32      	ldr	r2, [pc, #200]	@ (8004c98 <HAL_DMA_IRQHandler+0xe3c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a30      	ldr	r2, [pc, #192]	@ (8004c9c <HAL_DMA_IRQHandler+0xe40>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca0 <HAL_DMA_IRQHandler+0xe44>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca4 <HAL_DMA_IRQHandler+0xe48>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <HAL_DMA_IRQHandler+0xe4c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdaa>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2a      	ldr	r2, [pc, #168]	@ (8004cac <HAL_DMA_IRQHandler+0xe50>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <HAL_DMA_IRQHandler+0xdbc>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 021c 	bic.w	r2, r2, #28
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e007      	b.n	8004c28 <HAL_DMA_IRQHandler+0xdcc>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 020e 	bic.w	r2, r2, #14
 8004c26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2201      	movs	r2, #1
 8004c32:	409a      	lsls	r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
 8004c5e:	e004      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c60:	bf00      	nop
 8004c62:	e002      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c64:	bf00      	nop
 8004c66:	e000      	b.n	8004c6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c6a:	3728      	adds	r7, #40	@ 0x28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40020010 	.word	0x40020010
 8004c74:	40020028 	.word	0x40020028
 8004c78:	40020040 	.word	0x40020040
 8004c7c:	40020058 	.word	0x40020058
 8004c80:	40020070 	.word	0x40020070
 8004c84:	40020088 	.word	0x40020088
 8004c88:	400200a0 	.word	0x400200a0
 8004c8c:	400200b8 	.word	0x400200b8
 8004c90:	40020410 	.word	0x40020410
 8004c94:	40020428 	.word	0x40020428
 8004c98:	40020440 	.word	0x40020440
 8004c9c:	40020458 	.word	0x40020458
 8004ca0:	40020470 	.word	0x40020470
 8004ca4:	40020488 	.word	0x40020488
 8004ca8:	400204a0 	.word	0x400204a0
 8004cac:	400204b8 	.word	0x400204b8

08004cb0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cbe:	b2db      	uxtb	r3, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a42      	ldr	r2, [pc, #264]	@ (8004de4 <DMA_CalcBaseAndBitshift+0x118>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04a      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d045      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3f      	ldr	r2, [pc, #252]	@ (8004dec <DMA_CalcBaseAndBitshift+0x120>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d040      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8004df0 <DMA_CalcBaseAndBitshift+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d03b      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a3c      	ldr	r2, [pc, #240]	@ (8004df4 <DMA_CalcBaseAndBitshift+0x128>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d036      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8004df8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d031      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a39      	ldr	r2, [pc, #228]	@ (8004dfc <DMA_CalcBaseAndBitshift+0x130>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d02c      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a38      	ldr	r2, [pc, #224]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x134>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d027      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x138>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a35      	ldr	r2, [pc, #212]	@ (8004e08 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01d      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a33      	ldr	r2, [pc, #204]	@ (8004e0c <DMA_CalcBaseAndBitshift+0x140>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a32      	ldr	r2, [pc, #200]	@ (8004e10 <DMA_CalcBaseAndBitshift+0x144>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <DMA_CalcBaseAndBitshift+0x148>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e18 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	@ (8004e1c <DMA_CalcBaseAndBitshift+0x150>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e20 <DMA_CalcBaseAndBitshift+0x154>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <DMA_CalcBaseAndBitshift+0xac>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <DMA_CalcBaseAndBitshift+0xae>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d024      	beq.n	8004dc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	3b10      	subs	r3, #16
 8004d86:	4a27      	ldr	r2, [pc, #156]	@ (8004e24 <DMA_CalcBaseAndBitshift+0x158>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	4a24      	ldr	r2, [pc, #144]	@ (8004e28 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d98:	5cd3      	ldrb	r3, [r2, r3]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d908      	bls.n	8004db8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b1f      	ldr	r3, [pc, #124]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x160>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004db6:	e00d      	b.n	8004dd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <DMA_CalcBaseAndBitshift+0x160>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc6:	e005      	b.n	8004dd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	40020010 	.word	0x40020010
 8004de8:	40020028 	.word	0x40020028
 8004dec:	40020040 	.word	0x40020040
 8004df0:	40020058 	.word	0x40020058
 8004df4:	40020070 	.word	0x40020070
 8004df8:	40020088 	.word	0x40020088
 8004dfc:	400200a0 	.word	0x400200a0
 8004e00:	400200b8 	.word	0x400200b8
 8004e04:	40020410 	.word	0x40020410
 8004e08:	40020428 	.word	0x40020428
 8004e0c:	40020440 	.word	0x40020440
 8004e10:	40020458 	.word	0x40020458
 8004e14:	40020470 	.word	0x40020470
 8004e18:	40020488 	.word	0x40020488
 8004e1c:	400204a0 	.word	0x400204a0
 8004e20:	400204b8 	.word	0x400204b8
 8004e24:	aaaaaaab 	.word	0xaaaaaaab
 8004e28:	0801a8dc 	.word	0x0801a8dc
 8004e2c:	fffffc00 	.word	0xfffffc00

08004e30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d120      	bne.n	8004e86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d858      	bhi.n	8004efe <DMA_CheckFifoParam+0xce>
 8004e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <DMA_CheckFifoParam+0x24>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e65 	.word	0x08004e65
 8004e58:	08004e77 	.word	0x08004e77
 8004e5c:	08004e65 	.word	0x08004e65
 8004e60:	08004eff 	.word	0x08004eff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d048      	beq.n	8004f02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e74:	e045      	b.n	8004f02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e7e:	d142      	bne.n	8004f06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e84:	e03f      	b.n	8004f06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e8e:	d123      	bne.n	8004ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d838      	bhi.n	8004f0a <DMA_CheckFifoParam+0xda>
 8004e98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <DMA_CheckFifoParam+0x70>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004eb7 	.word	0x08004eb7
 8004ea8:	08004eb1 	.word	0x08004eb1
 8004eac:	08004ec9 	.word	0x08004ec9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb4:	e030      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d025      	beq.n	8004f0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ec6:	e022      	b.n	8004f0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ed0:	d11f      	bne.n	8004f12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed6:	e01c      	b.n	8004f12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d902      	bls.n	8004ee6 <DMA_CheckFifoParam+0xb6>
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d003      	beq.n	8004eec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ee4:	e018      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eea:	e015      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00e      	beq.n	8004f16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
    break;
 8004efc:	e00b      	b.n	8004f16 <DMA_CheckFifoParam+0xe6>
        break;
 8004efe:	bf00      	nop
 8004f00:	e00a      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e008      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f06:	bf00      	nop
 8004f08:	e006      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e004      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
        break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <DMA_CheckFifoParam+0xe8>
    break;
 8004f16:	bf00      	nop
    }
  }

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a38      	ldr	r2, [pc, #224]	@ (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a36      	ldr	r2, [pc, #216]	@ (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01d      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a33      	ldr	r2, [pc, #204]	@ (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a32      	ldr	r2, [pc, #200]	@ (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	@ (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2f      	ldr	r2, [pc, #188]	@ (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d101      	bne.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3b08      	subs	r3, #8
 8004f98:	4a28      	ldr	r2, [pc, #160]	@ (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	091b      	lsrs	r3, r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	461a      	mov	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a24      	ldr	r2, [pc, #144]	@ (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fc4:	e024      	b.n	8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	3b10      	subs	r3, #16
 8004fce:	4a1e      	ldr	r2, [pc, #120]	@ (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	@ (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d806      	bhi.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d902      	bls.n	8004fee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3308      	adds	r3, #8
 8004fec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2201      	movs	r2, #1
 800500a:	409a      	lsls	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	58025408 	.word	0x58025408
 8005020:	5802541c 	.word	0x5802541c
 8005024:	58025430 	.word	0x58025430
 8005028:	58025444 	.word	0x58025444
 800502c:	58025458 	.word	0x58025458
 8005030:	5802546c 	.word	0x5802546c
 8005034:	58025480 	.word	0x58025480
 8005038:	58025494 	.word	0x58025494
 800503c:	cccccccd 	.word	0xcccccccd
 8005040:	16009600 	.word	0x16009600
 8005044:	58025880 	.word	0x58025880
 8005048:	aaaaaaab 	.word	0xaaaaaaab
 800504c:	400204b8 	.word	0x400204b8
 8005050:	4002040f 	.word	0x4002040f
 8005054:	10008200 	.word	0x10008200
 8005058:	40020880 	.word	0x40020880

0800505c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d04a      	beq.n	8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d847      	bhi.n	8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a25      	ldr	r2, [pc, #148]	@ (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d022      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a24      	ldr	r2, [pc, #144]	@ (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d01d      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a22      	ldr	r2, [pc, #136]	@ (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d018      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a21      	ldr	r2, [pc, #132]	@ (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4b17      	ldr	r3, [pc, #92]	@ (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80050e6:	e009      	b.n	80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a11      	ldr	r2, [pc, #68]	@ (8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	58025408 	.word	0x58025408
 8005118:	5802541c 	.word	0x5802541c
 800511c:	58025430 	.word	0x58025430
 8005120:	58025444 	.word	0x58025444
 8005124:	58025458 	.word	0x58025458
 8005128:	5802546c 	.word	0x5802546c
 800512c:	58025480 	.word	0x58025480
 8005130:	58025494 	.word	0x58025494
 8005134:	1600963f 	.word	0x1600963f
 8005138:	58025940 	.word	0x58025940
 800513c:	1000823f 	.word	0x1000823f
 8005140:	40020940 	.word	0x40020940

08005144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	@ 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005152:	4b89      	ldr	r3, [pc, #548]	@ (8005378 <HAL_GPIO_Init+0x234>)
 8005154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005156:	e194      	b.n	8005482 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	2101      	movs	r1, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	4013      	ands	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8186 	beq.w	800547c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d005      	beq.n	8005188 <HAL_GPIO_Init+0x44>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d130      	bne.n	80051ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	2203      	movs	r2, #3
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051be:	2201      	movs	r2, #1
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 0201 	and.w	r2, r3, #1
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d017      	beq.n	8005226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	2203      	movs	r2, #3
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4013      	ands	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4313      	orrs	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d123      	bne.n	800527a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	08da      	lsrs	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3208      	adds	r2, #8
 800523a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	08da      	lsrs	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3208      	adds	r2, #8
 8005274:	69b9      	ldr	r1, [r7, #24]
 8005276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 0203 	and.w	r2, r3, #3
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80e0 	beq.w	800547c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052bc:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <HAL_GPIO_Init+0x238>)
 80052be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052c2:	4a2e      	ldr	r2, [pc, #184]	@ (800537c <HAL_GPIO_Init+0x238>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80052cc:	4b2b      	ldr	r3, [pc, #172]	@ (800537c <HAL_GPIO_Init+0x238>)
 80052ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052da:	4a29      	ldr	r2, [pc, #164]	@ (8005380 <HAL_GPIO_Init+0x23c>)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	3302      	adds	r3, #2
 80052e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	220f      	movs	r2, #15
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <HAL_GPIO_Init+0x240>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d052      	beq.n	80053ac <HAL_GPIO_Init+0x268>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_GPIO_Init+0x244>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d031      	beq.n	8005372 <HAL_GPIO_Init+0x22e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1e      	ldr	r2, [pc, #120]	@ (800538c <HAL_GPIO_Init+0x248>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02b      	beq.n	800536e <HAL_GPIO_Init+0x22a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1d      	ldr	r2, [pc, #116]	@ (8005390 <HAL_GPIO_Init+0x24c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d025      	beq.n	800536a <HAL_GPIO_Init+0x226>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <HAL_GPIO_Init+0x250>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01f      	beq.n	8005366 <HAL_GPIO_Init+0x222>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <HAL_GPIO_Init+0x254>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d019      	beq.n	8005362 <HAL_GPIO_Init+0x21e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <HAL_GPIO_Init+0x258>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <HAL_GPIO_Init+0x21a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a19      	ldr	r2, [pc, #100]	@ (80053a0 <HAL_GPIO_Init+0x25c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00d      	beq.n	800535a <HAL_GPIO_Init+0x216>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <HAL_GPIO_Init+0x260>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <HAL_GPIO_Init+0x212>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <HAL_GPIO_Init+0x264>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_GPIO_Init+0x20e>
 800534e:	2309      	movs	r3, #9
 8005350:	e02d      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005352:	230a      	movs	r3, #10
 8005354:	e02b      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005356:	2308      	movs	r3, #8
 8005358:	e029      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800535a:	2307      	movs	r3, #7
 800535c:	e027      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800535e:	2306      	movs	r3, #6
 8005360:	e025      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005362:	2305      	movs	r3, #5
 8005364:	e023      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005366:	2304      	movs	r3, #4
 8005368:	e021      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800536a:	2303      	movs	r3, #3
 800536c:	e01f      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 800536e:	2302      	movs	r3, #2
 8005370:	e01d      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005372:	2301      	movs	r3, #1
 8005374:	e01b      	b.n	80053ae <HAL_GPIO_Init+0x26a>
 8005376:	bf00      	nop
 8005378:	58000080 	.word	0x58000080
 800537c:	58024400 	.word	0x58024400
 8005380:	58000400 	.word	0x58000400
 8005384:	58020000 	.word	0x58020000
 8005388:	58020400 	.word	0x58020400
 800538c:	58020800 	.word	0x58020800
 8005390:	58020c00 	.word	0x58020c00
 8005394:	58021000 	.word	0x58021000
 8005398:	58021400 	.word	0x58021400
 800539c:	58021800 	.word	0x58021800
 80053a0:	58021c00 	.word	0x58021c00
 80053a4:	58022000 	.word	0x58022000
 80053a8:	58022400 	.word	0x58022400
 80053ac:	2300      	movs	r3, #0
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	f002 0203 	and.w	r2, r2, #3
 80053b4:	0092      	lsls	r2, r2, #2
 80053b6:	4093      	lsls	r3, r2
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053be:	4938      	ldr	r1, [pc, #224]	@ (80054a0 <HAL_GPIO_Init+0x35c>)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	3302      	adds	r3, #2
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	43db      	mvns	r3, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4013      	ands	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	3301      	adds	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	f47f ae63 	bne.w	8005158 <HAL_GPIO_Init+0x14>
  }
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	3724      	adds	r7, #36	@ 0x24
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	58000400 	.word	0x58000400

080054a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	887b      	ldrh	r3, [r7, #2]
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
 80054c0:	e001      	b.n	80054c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
 80054e0:	4613      	mov	r3, r2
 80054e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054e4:	787b      	ldrb	r3, [r7, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054f0:	e003      	b.n	80054fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054f2:	887b      	ldrh	r3, [r7, #2]
 80054f4:	041a      	lsls	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	619a      	str	r2, [r3, #24]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005514:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fc f94d 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e08b      	b.n	8005666 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc faf8 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	@ 0x24
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0201 	bic.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800558c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800559c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d107      	bne.n	80055b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	e006      	b.n	80055c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d108      	bne.n	80055de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	e007      	b.n	80055ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <HAL_I2C_Init+0x134>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800560c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	02008000 	.word	0x02008000

08005674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	460b      	mov	r3, r1
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	f040 80f9 	bne.w	800588e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x34>
 80056a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0ed      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_I2C_Mem_Write+0x4e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e0e6      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056ca:	f7fd f973 	bl	80029b4 <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2319      	movs	r3, #25
 80056d6:	2201      	movs	r2, #1
 80056d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 ffc0 	bl	8006662 <I2C_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0d1      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2221      	movs	r2, #33	@ 0x21
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2240      	movs	r2, #64	@ 0x40
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800570c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005714:	88f8      	ldrh	r0, [r7, #6]
 8005716:	893a      	ldrh	r2, [r7, #8]
 8005718:	8979      	ldrh	r1, [r7, #10]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4603      	mov	r3, r0
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa67 	bl	8005bf8 <I2C_RequestMemoryWrite>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0a9      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2bff      	cmp	r3, #255	@ 0xff
 8005744:	d90e      	bls.n	8005764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	22ff      	movs	r2, #255	@ 0xff
 800574a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005750:	b2da      	uxtb	r2, r3
 8005752:	8979      	ldrh	r1, [r7, #10]
 8005754:	2300      	movs	r3, #0
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f001 f943 	bl	80069e8 <I2C_TransferConfig>
 8005762:	e00f      	b.n	8005784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005772:	b2da      	uxtb	r2, r3
 8005774:	8979      	ldrh	r1, [r7, #10]
 8005776:	2300      	movs	r3, #0
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f001 f932 	bl	80069e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 ffc3 	bl	8006714 <I2C_WaitOnTXISFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e07b      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	781a      	ldrb	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d034      	beq.n	800583c <HAL_I2C_Mem_Write+0x1c8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d130      	bne.n	800583c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 ff3c 	bl	8006662 <I2C_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04d      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2bff      	cmp	r3, #255	@ 0xff
 80057fc:	d90e      	bls.n	800581c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	22ff      	movs	r2, #255	@ 0xff
 8005802:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005808:	b2da      	uxtb	r2, r3
 800580a:	8979      	ldrh	r1, [r7, #10]
 800580c:	2300      	movs	r3, #0
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f001 f8e7 	bl	80069e8 <I2C_TransferConfig>
 800581a:	e00f      	b.n	800583c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	b2da      	uxtb	r2, r3
 800582c:	8979      	ldrh	r1, [r7, #10]
 800582e:	2300      	movs	r3, #0
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f001 f8d6 	bl	80069e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d19e      	bne.n	8005784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 ffa9 	bl	80067a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e01a      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2220      	movs	r2, #32
 8005860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <HAL_I2C_Mem_Write+0x224>)
 800586e:	400b      	ands	r3, r1
 8005870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e000      	b.n	8005890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800588e:	2302      	movs	r3, #2
  }
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	fe00e800 	.word	0xfe00e800

0800589c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
  }
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00f      	beq.n	8005912 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005900:	f043 0201 	orr.w	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005910:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00f      	beq.n	800593c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f043 0208 	orr.w	r2, r3, #8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800593a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005954:	f043 0202 	orr.w	r2, r3, #2
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005964:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 030b 	and.w	r3, r3, #11
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd19 	bl	80063b0 <I2C_ITError>
  }
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
 80059ba:	4613      	mov	r3, r2
 80059bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b086      	sub	sp, #24
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <I2C_Slave_ISR_IT+0x24>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0e2      	b.n	8005bf0 <I2C_Slave_ISR_IT+0x1ea>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fa09 	bl	8005e60 <I2C_ITSlaveCplt>
 8005a4e:	e0ca      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04b      	beq.n	8005af2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d046      	beq.n	8005af2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d128      	bne.n	8005ac0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b28      	cmp	r3, #40	@ 0x28
 8005a78:	d108      	bne.n	8005a8c <I2C_Slave_ISR_IT+0x86>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a80:	d104      	bne.n	8005a8c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a82:	6939      	ldr	r1, [r7, #16]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fc3f 	bl	8006308 <I2C_ITListenCplt>
 8005a8a:	e031      	b.n	8005af0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b29      	cmp	r3, #41	@ 0x29
 8005a96:	d10e      	bne.n	8005ab6 <I2C_Slave_ISR_IT+0xb0>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a9e:	d00a      	beq.n	8005ab6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fd98 	bl	80065de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f97a 	bl	8005da8 <I2C_ITSlaveSeqCplt>
 8005ab4:	e01c      	b.n	8005af0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2210      	movs	r2, #16
 8005abc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005abe:	e08f      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005acc:	f043 0204 	orr.w	r2, r3, #4
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <I2C_Slave_ISR_IT+0xdc>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ae0:	d17e      	bne.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fc61 	bl	80063b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005aee:	e077      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
 8005af0:	e076      	b.n	8005be0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02f      	beq.n	8005b5c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d02a      	beq.n	8005b5c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d018      	beq.n	8005b42 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d14b      	bne.n	8005be4 <I2C_Slave_ISR_IT+0x1de>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b52:	d047      	beq.n	8005be4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f927 	bl	8005da8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b5a:	e043      	b.n	8005be4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b70:	6939      	ldr	r1, [r7, #16]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f894 	bl	8005ca0 <I2C_ITAddrCplt>
 8005b78:	e035      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d030      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02b      	beq.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d018      	beq.n	8005bca <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005bc8:	e00d      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bd0:	d002      	beq.n	8005bd8 <I2C_Slave_ISR_IT+0x1d2>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f8e5 	bl	8005da8 <I2C_ITSlaveSeqCplt>
 8005bde:	e002      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005be4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	461a      	mov	r2, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	817b      	strh	r3, [r7, #10]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	813b      	strh	r3, [r7, #8]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	8979      	ldrh	r1, [r7, #10]
 8005c18:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <I2C_RequestMemoryWrite+0xa4>)
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fee1 	bl	80069e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fd72 	bl	8006714 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e02c      	b.n	8005c94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c40:	893b      	ldrh	r3, [r7, #8]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c4a:	e015      	b.n	8005c78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	69b9      	ldr	r1, [r7, #24]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fd58 	bl	8006714 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e012      	b.n	8005c94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2180      	movs	r1, #128	@ 0x80
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fced 	bl	8006662 <I2C_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	80002000 	.word	0x80002000

08005ca0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005cb6:	2b28      	cmp	r3, #40	@ 0x28
 8005cb8:	d16a      	bne.n	8005d90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005cd8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005cf4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d138      	bne.n	8005d70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005cfe:	897b      	ldrh	r3, [r7, #10]
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	89bb      	ldrh	r3, [r7, #12]
 8005d06:	4053      	eors	r3, r2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f003 0306 	and.w	r3, r3, #6
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11c      	bne.n	8005d4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d13b      	bne.n	8005da0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2208      	movs	r2, #8
 8005d34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d3e:	89ba      	ldrh	r2, [r7, #12]
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fe32 	bl	80059ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d4a:	e029      	b.n	8005da0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fe79 	bl	8006a4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d62:	89ba      	ldrh	r2, [r7, #12]
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fe20 	bl	80059ae <HAL_I2C_AddrCallback>
}
 8005d6e:	e017      	b.n	8005da0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fe69 	bl	8006a4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d82:	89ba      	ldrh	r2, [r7, #12]
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fe10 	bl	80059ae <HAL_I2C_AddrCallback>
}
 8005d8e:	e007      	b.n	8005da0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2208      	movs	r2, #8
 8005d96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e00c      	b.n	8005df6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b29      	cmp	r3, #41	@ 0x29
 8005e00:	d112      	bne.n	8005e28 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2228      	movs	r2, #40	@ 0x28
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2221      	movs	r2, #33	@ 0x21
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e10:	2101      	movs	r1, #1
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fe1a 	bl	8006a4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fdb0 	bl	8005986 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e26:	e017      	b.n	8005e58 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e32:	d111      	bne.n	8005e58 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2228      	movs	r2, #40	@ 0x28
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2222      	movs	r2, #34	@ 0x22
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e42:	2102      	movs	r1, #2
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fe01 	bl	8006a4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fda1 	bl	800599a <HAL_I2C_SlaveRxCpltCallback>
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e82:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	2b21      	cmp	r3, #33	@ 0x21
 8005e90:	d002      	beq.n	8005e98 <I2C_ITSlaveCplt+0x38>
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b29      	cmp	r3, #41	@ 0x29
 8005e96:	d108      	bne.n	8005eaa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e98:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fdd5 	bl	8006a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2221      	movs	r2, #33	@ 0x21
 8005ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ea8:	e019      	b.n	8005ede <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	2b22      	cmp	r3, #34	@ 0x22
 8005eae:	d002      	beq.n	8005eb6 <I2C_ITSlaveCplt+0x56>
 8005eb0:	7afb      	ldrb	r3, [r7, #11]
 8005eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eb4:	d108      	bne.n	8005ec8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005eb6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fdc6 	bl	8006a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2222      	movs	r2, #34	@ 0x22
 8005ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ec6:	e00a      	b.n	8005ede <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005ec8:	7afb      	ldrb	r3, [r7, #11]
 8005eca:	2b28      	cmp	r3, #40	@ 0x28
 8005ecc:	d107      	bne.n	8005ede <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005ece:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fdba 	bl	8006a4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b7f      	ldr	r3, [pc, #508]	@ (80060f8 <I2C_ITSlaveCplt+0x298>)
 8005efa:	400b      	ands	r3, r1
 8005efc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb6d 	bl	80065de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d07a      	beq.n	8006004 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 8111 	beq.w	800614a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	@ (80060fc <I2C_ITSlaveCplt+0x29c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d059      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a71      	ldr	r2, [pc, #452]	@ (8006100 <I2C_ITSlaveCplt+0x2a0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d053      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6f      	ldr	r2, [pc, #444]	@ (8006104 <I2C_ITSlaveCplt+0x2a4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04d      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6d      	ldr	r2, [pc, #436]	@ (8006108 <I2C_ITSlaveCplt+0x2a8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d047      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800610c <I2C_ITSlaveCplt+0x2ac>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d041      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a69      	ldr	r2, [pc, #420]	@ (8006110 <I2C_ITSlaveCplt+0x2b0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d03b      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a67      	ldr	r2, [pc, #412]	@ (8006114 <I2C_ITSlaveCplt+0x2b4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d035      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a65      	ldr	r2, [pc, #404]	@ (8006118 <I2C_ITSlaveCplt+0x2b8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02f      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a63      	ldr	r2, [pc, #396]	@ (800611c <I2C_ITSlaveCplt+0x2bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d029      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a61      	ldr	r2, [pc, #388]	@ (8006120 <I2C_ITSlaveCplt+0x2c0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d023      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8006124 <I2C_ITSlaveCplt+0x2c4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01d      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a5d      	ldr	r2, [pc, #372]	@ (8006128 <I2C_ITSlaveCplt+0x2c8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d017      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800612c <I2C_ITSlaveCplt+0x2cc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d011      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a59      	ldr	r2, [pc, #356]	@ (8006130 <I2C_ITSlaveCplt+0x2d0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a57      	ldr	r2, [pc, #348]	@ (8006134 <I2C_ITSlaveCplt+0x2d4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d005      	beq.n	8005fe8 <I2C_ITSlaveCplt+0x188>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a55      	ldr	r2, [pc, #340]	@ (8006138 <I2C_ITSlaveCplt+0x2d8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d105      	bne.n	8005ff4 <I2C_ITSlaveCplt+0x194>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	e004      	b.n	8005ffe <I2C_ITSlaveCplt+0x19e>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8006002:	e0a2      	b.n	800614a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 809d 	beq.w	800614a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800601e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8090 	beq.w	800614a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a32      	ldr	r2, [pc, #200]	@ (80060fc <I2C_ITSlaveCplt+0x29c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d059      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a30      	ldr	r2, [pc, #192]	@ (8006100 <I2C_ITSlaveCplt+0x2a0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d053      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2e      	ldr	r2, [pc, #184]	@ (8006104 <I2C_ITSlaveCplt+0x2a4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04d      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a2c      	ldr	r2, [pc, #176]	@ (8006108 <I2C_ITSlaveCplt+0x2a8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d047      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2a      	ldr	r2, [pc, #168]	@ (800610c <I2C_ITSlaveCplt+0x2ac>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d041      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a28      	ldr	r2, [pc, #160]	@ (8006110 <I2C_ITSlaveCplt+0x2b0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d03b      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <I2C_ITSlaveCplt+0x2b4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d035      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a24      	ldr	r2, [pc, #144]	@ (8006118 <I2C_ITSlaveCplt+0x2b8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02f      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a22      	ldr	r2, [pc, #136]	@ (800611c <I2C_ITSlaveCplt+0x2bc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d029      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <I2C_ITSlaveCplt+0x2c0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d023      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006124 <I2C_ITSlaveCplt+0x2c4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006128 <I2C_ITSlaveCplt+0x2c8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d017      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <I2C_ITSlaveCplt+0x2cc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d011      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a18      	ldr	r2, [pc, #96]	@ (8006130 <I2C_ITSlaveCplt+0x2d0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00b      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a16      	ldr	r2, [pc, #88]	@ (8006134 <I2C_ITSlaveCplt+0x2d4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d005      	beq.n	80060ea <I2C_ITSlaveCplt+0x28a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <I2C_ITSlaveCplt+0x2d8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d128      	bne.n	800613c <I2C_ITSlaveCplt+0x2dc>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	e027      	b.n	8006146 <I2C_ITSlaveCplt+0x2e6>
 80060f6:	bf00      	nop
 80060f8:	fe00e800 	.word	0xfe00e800
 80060fc:	40020010 	.word	0x40020010
 8006100:	40020028 	.word	0x40020028
 8006104:	40020040 	.word	0x40020040
 8006108:	40020058 	.word	0x40020058
 800610c:	40020070 	.word	0x40020070
 8006110:	40020088 	.word	0x40020088
 8006114:	400200a0 	.word	0x400200a0
 8006118:	400200b8 	.word	0x400200b8
 800611c:	40020410 	.word	0x40020410
 8006120:	40020428 	.word	0x40020428
 8006124:	40020440 	.word	0x40020440
 8006128:	40020458 	.word	0x40020458
 800612c:	40020470 	.word	0x40020470
 8006130:	40020488 	.word	0x40020488
 8006134:	400204a0 	.word	0x400204a0
 8006138:	400204b8 	.word	0x400204b8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	b29b      	uxth	r3, r3
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0304 	bic.w	r3, r3, #4
 800615a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a4:	f043 0204 	orr.w	r2, r3, #4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d049      	beq.n	800624a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d044      	beq.n	800624a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d128      	bne.n	800621c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b28      	cmp	r3, #40	@ 0x28
 80061d4:	d108      	bne.n	80061e8 <I2C_ITSlaveCplt+0x388>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061dc:	d104      	bne.n	80061e8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80061de:	6979      	ldr	r1, [r7, #20]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f891 	bl	8006308 <I2C_ITListenCplt>
 80061e6:	e030      	b.n	800624a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b29      	cmp	r3, #41	@ 0x29
 80061f2:	d10e      	bne.n	8006212 <I2C_ITSlaveCplt+0x3b2>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061fa:	d00a      	beq.n	8006212 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2210      	movs	r2, #16
 8006202:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f9ea 	bl	80065de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fdcc 	bl	8005da8 <I2C_ITSlaveSeqCplt>
 8006210:	e01b      	b.n	800624a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2210      	movs	r2, #16
 8006218:	61da      	str	r2, [r3, #28]
 800621a:	e016      	b.n	800624a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2210      	movs	r2, #16
 8006222:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <I2C_ITSlaveCplt+0x3de>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800623c:	d105      	bne.n	800624a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f8b3 	bl	80063b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625c:	2b00      	cmp	r3, #0
 800625e:	d010      	beq.n	8006282 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f8a2 	bl	80063b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b28      	cmp	r3, #40	@ 0x28
 8006276:	d141      	bne.n	80062fc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f844 	bl	8006308 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006280:	e03c      	b.n	80062fc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800628a:	d014      	beq.n	80062b6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fd8b 	bl	8005da8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <I2C_ITSlaveCplt+0x4a4>)
 8006296:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fb8b 	bl	80059ca <HAL_I2C_ListenCpltCallback>
}
 80062b4:	e022      	b.n	80062fc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b22      	cmp	r3, #34	@ 0x22
 80062c0:	d10e      	bne.n	80062e0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fb5e 	bl	800599a <HAL_I2C_SlaveRxCpltCallback>
}
 80062de:	e00d      	b.n	80062fc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fb45 	bl	8005986 <HAL_I2C_SlaveTxCpltCallback>
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	ffff0000 	.word	0xffff0000

08006308 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a25      	ldr	r2, [pc, #148]	@ (80063ac <I2C_ITListenCplt+0xa4>)
 8006316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d022      	beq.n	8006384 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d012      	beq.n	8006384 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637c:	f043 0204 	orr.w	r2, r3, #4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006384:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb5f 	bl	8006a4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2210      	movs	r2, #16
 8006394:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fb13 	bl	80059ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	ffff0000 	.word	0xffff0000

080063b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a6d      	ldr	r2, [pc, #436]	@ (8006584 <I2C_ITError+0x1d4>)
 80063ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b28      	cmp	r3, #40	@ 0x28
 80063e6:	d005      	beq.n	80063f4 <I2C_ITError+0x44>
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b29      	cmp	r3, #41	@ 0x29
 80063ec:	d002      	beq.n	80063f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f2:	d10b      	bne.n	800640c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063f4:	2103      	movs	r1, #3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fb28 	bl	8006a4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2228      	movs	r2, #40	@ 0x28
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a60      	ldr	r2, [pc, #384]	@ (8006588 <I2C_ITError+0x1d8>)
 8006408:	635a      	str	r2, [r3, #52]	@ 0x34
 800640a:	e030      	b.n	800646e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800640c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fb1b 	bl	8006a4c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8e1 	bl	80065de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b60      	cmp	r3, #96	@ 0x60
 8006426:	d01f      	beq.n	8006468 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b20      	cmp	r3, #32
 800643c:	d114      	bne.n	8006468 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d109      	bne.n	8006460 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2210      	movs	r2, #16
 8006452:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006458:	f043 0204 	orr.w	r2, r3, #4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2220      	movs	r2, #32
 8006466:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006472:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d039      	beq.n	80064f0 <I2C_ITError+0x140>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b11      	cmp	r3, #17
 8006480:	d002      	beq.n	8006488 <I2C_ITError+0xd8>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b21      	cmp	r3, #33	@ 0x21
 8006486:	d133      	bne.n	80064f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006496:	d107      	bne.n	80064a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fbff 	bl	8004cb0 <HAL_DMA_GetState>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d017      	beq.n	80064e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	4a33      	ldr	r2, [pc, #204]	@ (800658c <I2C_ITError+0x1dc>)
 80064be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd fa7f 	bl	80039d0 <HAL_DMA_Abort_IT>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d04d      	beq.n	8006574 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064e2:	4610      	mov	r0, r2
 80064e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064e6:	e045      	b.n	8006574 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f851 	bl	8006590 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064ee:	e041      	b.n	8006574 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d039      	beq.n	800656c <I2C_ITError+0x1bc>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b12      	cmp	r3, #18
 80064fc:	d002      	beq.n	8006504 <I2C_ITError+0x154>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b22      	cmp	r3, #34	@ 0x22
 8006502:	d133      	bne.n	800656c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800650e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006512:	d107      	bne.n	8006524 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006522:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fbc1 	bl	8004cb0 <HAL_DMA_GetState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b01      	cmp	r3, #1
 8006532:	d017      	beq.n	8006564 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	4a14      	ldr	r2, [pc, #80]	@ (800658c <I2C_ITError+0x1dc>)
 800653a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	4618      	mov	r0, r3
 800654a:	f7fd fa41 	bl	80039d0 <HAL_DMA_Abort_IT>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d011      	beq.n	8006578 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800655e:	4610      	mov	r0, r2
 8006560:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006562:	e009      	b.n	8006578 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f813 	bl	8006590 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800656a:	e005      	b.n	8006578 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f80f 	bl	8006590 <I2C_TreatErrorCallback>
  }
}
 8006572:	e002      	b.n	800657a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006578:	bf00      	nop
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	ffff0000 	.word	0xffff0000
 8006588:	08005a07 	.word	0x08005a07
 800658c:	08006627 	.word	0x08006627

08006590 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b60      	cmp	r3, #96	@ 0x60
 80065a2:	d10e      	bne.n	80065c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fa19 	bl	80059f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065c0:	e009      	b.n	80065d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fa04 	bl	80059de <HAL_I2C_ErrorCallback>
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d103      	bne.n	80065fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2200      	movs	r2, #0
 80065fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d007      	beq.n	800661a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	619a      	str	r2, [r3, #24]
  }
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006640:	2200      	movs	r2, #0
 8006642:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	2200      	movs	r2, #0
 8006652:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff9b 	bl	8006590 <I2C_TreatErrorCallback>
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006672:	e03b      	b.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f8d5 	bl	8006828 <I2C_IsErrorOccurred>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e041      	b.n	800670c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d02d      	beq.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006690:	f7fc f990 	bl	80029b4 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d122      	bne.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699a      	ldr	r2, [r3, #24]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4013      	ands	r3, r2
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d113      	bne.n	80066ec <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e00f      	b.n	800670c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	bf0c      	ite	eq
 80066fc:	2301      	moveq	r3, #1
 80066fe:	2300      	movne	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	429a      	cmp	r2, r3
 8006708:	d0b4      	beq.n	8006674 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006720:	e033      	b.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f87e 	bl	8006828 <I2C_IsErrorOccurred>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e031      	b.n	800679a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673c:	d025      	beq.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673e:	f7fc f939 	bl	80029b4 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	d302      	bcc.n	8006754 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11a      	bne.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	d013      	beq.n	800678a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	f043 0220 	orr.w	r2, r3, #32
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e007      	b.n	800679a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d1c4      	bne.n	8006722 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067ae:	e02f      	b.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f837 	bl	8006828 <I2C_IsErrorOccurred>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e02d      	b.n	8006820 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c4:	f7fc f8f6 	bl	80029b4 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d11a      	bne.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d013      	beq.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ec:	f043 0220 	orr.w	r2, r3, #32
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e007      	b.n	8006820 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b20      	cmp	r3, #32
 800681c:	d1c8      	bne.n	80067b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	@ 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	d068      	beq.n	8006926 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2210      	movs	r2, #16
 800685a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800685c:	e049      	b.n	80068f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d045      	beq.n	80068f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fc f8a5 	bl	80029b4 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <I2C_IsErrorOccurred+0x54>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d13a      	bne.n	80068f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006886:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800689a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689e:	d121      	bne.n	80068e4 <I2C_IsErrorOccurred+0xbc>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068a6:	d01d      	beq.n	80068e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068a8:	7cfb      	ldrb	r3, [r7, #19]
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d01a      	beq.n	80068e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068be:	f7fc f879 	bl	80029b4 <HAL_GetTick>
 80068c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c4:	e00e      	b.n	80068e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068c6:	f7fc f875 	bl	80029b4 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b19      	cmp	r3, #25
 80068d2:	d907      	bls.n	80068e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	f043 0320 	orr.w	r3, r3, #32
 80068da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80068e2:	e006      	b.n	80068f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d1e9      	bne.n	80068c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d003      	beq.n	8006908 <I2C_IsErrorOccurred+0xe0>
 8006900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0aa      	beq.n	800685e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2220      	movs	r2, #32
 8006916:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00b      	beq.n	8006972 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	f043 0308 	orr.w	r3, r3, #8
 8006960:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800696a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	f043 0302 	orr.w	r3, r3, #2
 8006982:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01c      	beq.n	80069d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fe1e 	bl	80065de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <I2C_IsErrorOccurred+0x1bc>)
 80069ae:	400b      	ands	r3, r1
 80069b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80069d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	@ 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	fe00e800 	.word	0xfe00e800

080069e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	817b      	strh	r3, [r7, #10]
 80069f6:	4613      	mov	r3, r2
 80069f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80069fa:	897b      	ldrh	r3, [r7, #10]
 80069fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a00:	7a7b      	ldrb	r3, [r7, #9]
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	0d5b      	lsrs	r3, r3, #21
 8006a22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006a26:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <I2C_TransferConfig+0x60>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	ea02 0103 	and.w	r1, r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	03ff63ff 	.word	0x03ff63ff

08006a4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00f      	beq.n	8006a86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a7a:	2b28      	cmp	r3, #40	@ 0x28
 8006a7c:	d003      	beq.n	8006a86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006a84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a86:	887b      	ldrh	r3, [r7, #2]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006a96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aa4:	2b28      	cmp	r3, #40	@ 0x28
 8006aa6:	d003      	beq.n	8006ab0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006aae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da03      	bge.n	8006ac0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ac0:	887b      	ldrh	r3, [r7, #2]
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d103      	bne.n	8006ace <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006ace:	887b      	ldrh	r3, [r7, #2]
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d103      	bne.n	8006adc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f043 0320 	orr.w	r3, r3, #32
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006adc:	887b      	ldrh	r3, [r7, #2]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d103      	bne.n	8006aea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	43da      	mvns	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	400a      	ands	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]
}
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d138      	bne.n	8006b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e032      	b.n	8006b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2224      	movs	r2, #36	@ 0x24
 8006b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0201 	bic.w	r2, r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e000      	b.n	8006b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d139      	bne.n	8006c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e033      	b.n	8006c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0201 	bic.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	e000      	b.n	8006c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c28:	2302      	movs	r3, #2
  }
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e0bf      	b.n	8006dca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fb f850 	bl	8001d04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6899      	ldr	r1, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006cac:	400b      	ands	r3, r1
 8006cae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6899      	ldr	r1, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68d9      	ldr	r1, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68d9      	ldr	r1, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1a      	ldr	r2, [r3, #32]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6919      	ldr	r1, [r3, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	4b33      	ldr	r3, [pc, #204]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006d08:	400b      	ands	r3, r1
 8006d0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6919      	ldr	r1, [r3, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6959      	ldr	r1, [r3, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b27      	ldr	r3, [pc, #156]	@ (8006dd4 <HAL_LTDC_Init+0x19c>)
 8006d36:	400b      	ands	r3, r1
 8006d38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6959      	ldr	r1, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0206 	orr.w	r2, r2, #6
 8006da6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	f000f800 	.word	0xf000f800

08006dd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006dd8:	b5b0      	push	{r4, r5, r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_LTDC_ConfigLayer+0x1a>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e02c      	b.n	8006e4c <HAL_LTDC_ConfigLayer+0x74>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2134      	movs	r1, #52	@ 0x34
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	4614      	mov	r4, r2
 8006e16:	461d      	mov	r5, r3
 8006e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f877 	bl	8006f20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2201      	movs	r2, #1
 8006e38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bdb0      	pop	{r4, r5, r7, pc}

08006e54 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_LTDC_SetAddress+0x1a>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e024      	b.n	8006eb8 <HAL_LTDC_SetAddress+0x64>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2234      	movs	r2, #52	@ 0x34
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	3338      	adds	r3, #56	@ 0x38
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f841 	bl	8006f20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d101      	bne.n	8006ed8 <HAL_LTDC_Reload+0x18>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e01c      	b.n	8006f12 <HAL_LTDC_Reload+0x52>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0208 	orr.w	r2, r2, #8
 8006ef6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	@ 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	0c1b      	lsrs	r3, r3, #16
 8006f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3c:	4413      	add	r3, r2
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	01db      	lsls	r3, r3, #7
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3384      	adds	r3, #132	@ 0x84
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4611      	mov	r1, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	01d2      	lsls	r2, r2, #7
 8006f5c:	440a      	add	r2, r1
 8006f5e:	3284      	adds	r2, #132	@ 0x84
 8006f60:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006f64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	440b      	add	r3, r1
 8006f86:	3384      	adds	r3, #132	@ 0x84
 8006f88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006f8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f9e:	4413      	add	r3, r2
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	01db      	lsls	r3, r3, #7
 8006fae:	4413      	add	r3, r2
 8006fb0:	3384      	adds	r3, #132	@ 0x84
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	01d2      	lsls	r2, r2, #7
 8006fbe:	440a      	add	r2, r1
 8006fc0:	3284      	adds	r2, #132	@ 0x84
 8006fc2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006fc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fd6:	4413      	add	r3, r2
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	01db      	lsls	r3, r3, #7
 8006fe4:	440b      	add	r3, r1
 8006fe6:	3384      	adds	r3, #132	@ 0x84
 8006fe8:	4619      	mov	r1, r3
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	01db      	lsls	r3, r3, #7
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3384      	adds	r3, #132	@ 0x84
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	4611      	mov	r1, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	01d2      	lsls	r2, r2, #7
 800700a:	440a      	add	r2, r1
 800700c:	3284      	adds	r2, #132	@ 0x84
 800700e:	f023 0307 	bic.w	r3, r3, #7
 8007012:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	01db      	lsls	r3, r3, #7
 800701e:	4413      	add	r3, r2
 8007020:	3384      	adds	r3, #132	@ 0x84
 8007022:	461a      	mov	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	061b      	lsls	r3, r3, #24
 8007044:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	01db      	lsls	r3, r3, #7
 8007050:	4413      	add	r3, r2
 8007052:	3384      	adds	r3, #132	@ 0x84
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	01db      	lsls	r3, r3, #7
 8007060:	4413      	add	r3, r2
 8007062:	3384      	adds	r3, #132	@ 0x84
 8007064:	461a      	mov	r2, r3
 8007066:	2300      	movs	r3, #0
 8007068:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007070:	461a      	mov	r2, r3
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	431a      	orrs	r2, r3
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	431a      	orrs	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4619      	mov	r1, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	01db      	lsls	r3, r3, #7
 8007084:	440b      	add	r3, r1
 8007086:	3384      	adds	r3, #132	@ 0x84
 8007088:	4619      	mov	r1, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	01db      	lsls	r3, r3, #7
 800709a:	4413      	add	r3, r2
 800709c:	3384      	adds	r3, #132	@ 0x84
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	4611      	mov	r1, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	01d2      	lsls	r2, r2, #7
 80070aa:	440a      	add	r2, r1
 80070ac:	3284      	adds	r2, #132	@ 0x84
 80070ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	01db      	lsls	r3, r3, #7
 80070be:	4413      	add	r3, r2
 80070c0:	3384      	adds	r3, #132	@ 0x84
 80070c2:	461a      	mov	r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	01db      	lsls	r3, r3, #7
 80070d4:	4413      	add	r3, r2
 80070d6:	3384      	adds	r3, #132	@ 0x84
 80070d8:	69da      	ldr	r2, [r3, #28]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4619      	mov	r1, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	01db      	lsls	r3, r3, #7
 80070e4:	440b      	add	r3, r1
 80070e6:	3384      	adds	r3, #132	@ 0x84
 80070e8:	4619      	mov	r1, r3
 80070ea:	4b58      	ldr	r3, [pc, #352]	@ (800724c <LTDC_SetConfig+0x32c>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	6809      	ldr	r1, [r1, #0]
 80070fc:	4608      	mov	r0, r1
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	01c9      	lsls	r1, r1, #7
 8007102:	4401      	add	r1, r0
 8007104:	3184      	adds	r1, #132	@ 0x84
 8007106:	4313      	orrs	r3, r2
 8007108:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	01db      	lsls	r3, r3, #7
 8007114:	4413      	add	r3, r2
 8007116:	3384      	adds	r3, #132	@ 0x84
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	01db      	lsls	r3, r3, #7
 8007124:	4413      	add	r3, r2
 8007126:	3384      	adds	r3, #132	@ 0x84
 8007128:	461a      	mov	r2, r3
 800712a:	2300      	movs	r3, #0
 800712c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	01db      	lsls	r3, r3, #7
 8007138:	4413      	add	r3, r2
 800713a:	3384      	adds	r3, #132	@ 0x84
 800713c:	461a      	mov	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007142:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800714c:	2304      	movs	r3, #4
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	e01b      	b.n	800718a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d102      	bne.n	8007160 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800715a:	2303      	movs	r3, #3
 800715c:	61fb      	str	r3, [r7, #28]
 800715e:	e014      	b.n	800718a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d00b      	beq.n	8007180 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800716c:	2b02      	cmp	r3, #2
 800716e:	d007      	beq.n	8007180 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007174:	2b03      	cmp	r3, #3
 8007176:	d003      	beq.n	8007180 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800717c:	2b07      	cmp	r3, #7
 800717e:	d102      	bne.n	8007186 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007180:	2302      	movs	r3, #2
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e001      	b.n	800718a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007186:	2301      	movs	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	01db      	lsls	r3, r3, #7
 8007194:	4413      	add	r3, r2
 8007196:	3384      	adds	r3, #132	@ 0x84
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	4611      	mov	r1, r2
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	01d2      	lsls	r2, r2, #7
 80071a4:	440a      	add	r2, r1
 80071a6:	3284      	adds	r2, #132	@ 0x84
 80071a8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80071ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
 80071b8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	1acb      	subs	r3, r1, r3
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	fb01 f303 	mul.w	r3, r1, r3
 80071ca:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80071cc:	68f9      	ldr	r1, [r7, #12]
 80071ce:	6809      	ldr	r1, [r1, #0]
 80071d0:	4608      	mov	r0, r1
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	01c9      	lsls	r1, r1, #7
 80071d6:	4401      	add	r1, r0
 80071d8:	3184      	adds	r1, #132	@ 0x84
 80071da:	4313      	orrs	r3, r2
 80071dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	01db      	lsls	r3, r3, #7
 80071e8:	4413      	add	r3, r2
 80071ea:	3384      	adds	r3, #132	@ 0x84
 80071ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	01db      	lsls	r3, r3, #7
 80071f8:	440b      	add	r3, r1
 80071fa:	3384      	adds	r3, #132	@ 0x84
 80071fc:	4619      	mov	r1, r3
 80071fe:	4b14      	ldr	r3, [pc, #80]	@ (8007250 <LTDC_SetConfig+0x330>)
 8007200:	4013      	ands	r3, r2
 8007202:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	01db      	lsls	r3, r3, #7
 800720e:	4413      	add	r3, r2
 8007210:	3384      	adds	r3, #132	@ 0x84
 8007212:	461a      	mov	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	01db      	lsls	r3, r3, #7
 8007224:	4413      	add	r3, r2
 8007226:	3384      	adds	r3, #132	@ 0x84
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	4611      	mov	r1, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	01d2      	lsls	r2, r2, #7
 8007234:	440a      	add	r2, r1
 8007236:	3284      	adds	r2, #132	@ 0x84
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	6013      	str	r3, [r2, #0]
}
 800723e:	bf00      	nop
 8007240:	3724      	adds	r7, #36	@ 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	fffff8f8 	.word	0xfffff8f8
 8007250:	fffff800 	.word	0xfffff800

08007254 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af02      	add	r7, sp, #8
 800725a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0fe      	b.n	8007464 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f00e ff84 	bl	8016188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2203      	movs	r2, #3
 8007284:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f008 fdaa 	bl	800fde6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7c1a      	ldrb	r2, [r3, #16]
 800729a:	f88d 2000 	strb.w	r2, [sp]
 800729e:	3304      	adds	r3, #4
 80072a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072a2:	f008 fc7b 	bl	800fb9c <USB_CoreInit>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0d5      	b.n	8007464 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f008 fda2 	bl	800fe08 <USB_SetCurrentMode>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0c6      	b.n	8007464 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
 80072da:	e04a      	b.n	8007372 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	3315      	adds	r3, #21
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	3314      	adds	r3, #20
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	b298      	uxth	r0, r3
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	332e      	adds	r3, #46	@ 0x2e
 8007318:	4602      	mov	r2, r0
 800731a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	3318      	adds	r3, #24
 800732c:	2200      	movs	r2, #0
 800732e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007330:	7bfa      	ldrb	r2, [r7, #15]
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	331c      	adds	r3, #28
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007344:	7bfa      	ldrb	r2, [r7, #15]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	3320      	adds	r3, #32
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007358:	7bfa      	ldrb	r2, [r7, #15]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4413      	add	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	3324      	adds	r3, #36	@ 0x24
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	3301      	adds	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	7bfa      	ldrb	r2, [r7, #15]
 8007378:	429a      	cmp	r2, r3
 800737a:	d3af      	bcc.n	80072dc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]
 8007380:	e044      	b.n	800740c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007382:	7bfa      	ldrb	r2, [r7, #15]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007398:	7bfa      	ldrb	r2, [r7, #15]
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073f0:	7bfa      	ldrb	r2, [r7, #15]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	3301      	adds	r3, #1
 800740a:	73fb      	strb	r3, [r7, #15]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	791b      	ldrb	r3, [r3, #4]
 8007410:	7bfa      	ldrb	r2, [r7, #15]
 8007412:	429a      	cmp	r2, r3
 8007414:	d3b5      	bcc.n	8007382 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7c1a      	ldrb	r2, [r3, #16]
 800741e:	f88d 2000 	strb.w	r2, [sp]
 8007422:	3304      	adds	r3, #4
 8007424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007426:	f008 fd3b 	bl	800fea0 <USB_DevInit>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e013      	b.n	8007464 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7b1b      	ldrb	r3, [r3, #12]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d102      	bne.n	8007458 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 f96c 	bl	8008730 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4618      	mov	r0, r3
 800745e:	f009 fd7a 	bl	8010f56 <USB_DevDisconnect>

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_PCD_Start+0x1c>
 8007484:	2302      	movs	r3, #2
 8007486:	e022      	b.n	80074ce <HAL_PCD_Start+0x62>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d009      	beq.n	80074b0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d105      	bne.n	80074b0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f008 fc85 	bl	800fdc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f009 fd28 	bl	8010f14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074d6:	b590      	push	{r4, r7, lr}
 80074d8:	b08d      	sub	sp, #52	@ 0x34
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f009 fde6 	bl	80110be <USB_GetMode>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 84b9 	bne.w	8007e6c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f009 fd4a 	bl	8010f98 <USB_ReadInterrupts>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 84af 	beq.w	8007e6a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f009 fd37 	bl	8010f98 <USB_ReadInterrupts>
 800752a:	4603      	mov	r3, r0
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b02      	cmp	r3, #2
 8007532:	d107      	bne.n	8007544 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	695a      	ldr	r2, [r3, #20]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f002 0202 	and.w	r2, r2, #2
 8007542:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f009 fd25 	bl	8010f98 <USB_ReadInterrupts>
 800754e:	4603      	mov	r3, r0
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b10      	cmp	r3, #16
 8007556:	d161      	bne.n	800761c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0210 	bic.w	r2, r2, #16
 8007566:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f003 020f 	and.w	r2, r3, #15
 8007574:	4613      	mov	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4413      	add	r3, r2
 8007584:	3304      	adds	r3, #4
 8007586:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	0c5b      	lsrs	r3, r3, #17
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	2b02      	cmp	r3, #2
 8007592:	d124      	bne.n	80075de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d035      	beq.n	800760c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80075aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	6a38      	ldr	r0, [r7, #32]
 80075b4:	f009 fb5c 	bl	8010c70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c4:	441a      	add	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	695a      	ldr	r2, [r3, #20]
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	091b      	lsrs	r3, r3, #4
 80075d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075d6:	441a      	add	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	615a      	str	r2, [r3, #20]
 80075dc:	e016      	b.n	800760c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	0c5b      	lsrs	r3, r3, #17
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	2b06      	cmp	r3, #6
 80075e8:	d110      	bne.n	800760c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075f0:	2208      	movs	r2, #8
 80075f2:	4619      	mov	r1, r3
 80075f4:	6a38      	ldr	r0, [r7, #32]
 80075f6:	f009 fb3b 	bl	8010c70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	695a      	ldr	r2, [r3, #20]
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	091b      	lsrs	r3, r3, #4
 8007602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007606:	441a      	add	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0210 	orr.w	r2, r2, #16
 800761a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4618      	mov	r0, r3
 8007622:	f009 fcb9 	bl	8010f98 <USB_ReadInterrupts>
 8007626:	4603      	mov	r3, r0
 8007628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800762c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007630:	f040 80a7 	bne.w	8007782 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f009 fcbe 	bl	8010fbe <USB_ReadDevAllOutEpInterrupt>
 8007642:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007644:	e099      	b.n	800777a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 808e 	beq.w	800776e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	4611      	mov	r1, r2
 800765c:	4618      	mov	r0, r3
 800765e:	f009 fce2 	bl	8011026 <USB_ReadDevOutEPInterrupt>
 8007662:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767a:	461a      	mov	r2, r3
 800767c:	2301      	movs	r3, #1
 800767e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fece 	bl	8008424 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00c      	beq.n	80076ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800769e:	461a      	mov	r2, r3
 80076a0:	2308      	movs	r3, #8
 80076a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80076a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 ffa4 	bl	80085f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c2:	461a      	mov	r2, r3
 80076c4:	2310      	movs	r3, #16
 80076c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d030      	beq.n	8007734 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076da:	2b80      	cmp	r3, #128	@ 0x80
 80076dc:	d109      	bne.n	80076f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80076f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f4:	4613      	mov	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	4413      	add	r3, r2
 8007704:	3304      	adds	r3, #4
 8007706:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	78db      	ldrb	r3, [r3, #3]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d108      	bne.n	8007722 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2200      	movs	r2, #0
 8007714:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	b2db      	uxtb	r3, r3
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f00e fe69 	bl	80163f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772e:	461a      	mov	r2, r3
 8007730:	2302      	movs	r3, #2
 8007732:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d008      	beq.n	8007750 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800773e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774a:	461a      	mov	r2, r3
 800774c:	2320      	movs	r3, #32
 800774e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007766:	461a      	mov	r2, r3
 8007768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800776c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	3301      	adds	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	f47f af62 	bne.w	8007646 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f009 fc06 	bl	8010f98 <USB_ReadInterrupts>
 800778c:	4603      	mov	r3, r0
 800778e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007796:	f040 80db 	bne.w	8007950 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f009 fc27 	bl	8010ff2 <USB_ReadDevAllInEpInterrupt>
 80077a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80077aa:	e0cd      	b.n	8007948 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80c2 	beq.w	800793c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f009 fc4d 	bl	8011062 <USB_ReadDevInEPInterrupt>
 80077c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d057      	beq.n	8007884 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	2201      	movs	r2, #1
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	43db      	mvns	r3, r3
 80077ee:	69f9      	ldr	r1, [r7, #28]
 80077f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077f4:	4013      	ands	r3, r2
 80077f6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007804:	461a      	mov	r2, r3
 8007806:	2301      	movs	r3, #1
 8007808:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	799b      	ldrb	r3, [r3, #6]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d132      	bne.n	8007878 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	3320      	adds	r3, #32
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4403      	add	r3, r0
 8007832:	331c      	adds	r3, #28
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4419      	add	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800783c:	4613      	mov	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4403      	add	r3, r0
 8007846:	3320      	adds	r3, #32
 8007848:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d113      	bne.n	8007878 <HAL_PCD_IRQHandler+0x3a2>
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	3324      	adds	r3, #36	@ 0x24
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d108      	bne.n	8007878 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007870:	461a      	mov	r2, r3
 8007872:	2101      	movs	r1, #1
 8007874:	f009 fc56 	bl	8011124 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f00e fd33 	bl	80162ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800789a:	461a      	mov	r2, r3
 800789c:	2308      	movs	r3, #8
 800789e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b6:	461a      	mov	r2, r3
 80078b8:	2310      	movs	r3, #16
 80078ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d008      	beq.n	80078d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d2:	461a      	mov	r2, r3
 80078d4:	2340      	movs	r3, #64	@ 0x40
 80078d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d023      	beq.n	800792a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078e4:	6a38      	ldr	r0, [r7, #32]
 80078e6:	f008 fc39 	bl	801015c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	3310      	adds	r3, #16
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	3304      	adds	r3, #4
 80078fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	78db      	ldrb	r3, [r3, #3]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d108      	bne.n	8007918 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2200      	movs	r2, #0
 800790a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f00e fd80 	bl	8016418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007924:	461a      	mov	r2, r3
 8007926:	2302      	movs	r3, #2
 8007928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fce8 	bl	800830c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	3301      	adds	r3, #1
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	f47f af2e 	bne.w	80077ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f009 fb1f 	bl	8010f98 <USB_ReadInterrupts>
 800795a:	4603      	mov	r3, r0
 800795c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007964:	d122      	bne.n	80079ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	69fa      	ldr	r2, [r7, #28]
 8007970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007974:	f023 0301 	bic.w	r3, r3, #1
 8007978:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007980:	2b01      	cmp	r3, #1
 8007982:	d108      	bne.n	8007996 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800798c:	2100      	movs	r1, #0
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fef2 	bl	8008778 <HAL_PCDEx_LPM_Callback>
 8007994:	e002      	b.n	800799c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f00e fd1e 	bl	80163d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695a      	ldr	r2, [r3, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80079aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f009 faf1 	bl	8010f98 <USB_ReadInterrupts>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c0:	d112      	bne.n	80079e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d102      	bne.n	80079d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f00e fcda 	bl	801638c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695a      	ldr	r2, [r3, #20]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80079e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f009 fad3 	bl	8010f98 <USB_ReadInterrupts>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079fc:	d121      	bne.n	8007a42 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695a      	ldr	r2, [r3, #20]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007a0c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d111      	bne.n	8007a3c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a26:	089b      	lsrs	r3, r3, #2
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a32:	2101      	movs	r1, #1
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fe9f 	bl	8008778 <HAL_PCDEx_LPM_Callback>
 8007a3a:	e002      	b.n	8007a42 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f00e fca5 	bl	801638c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f009 faa6 	bl	8010f98 <USB_ReadInterrupts>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	f040 80b7 	bne.w	8007bc8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2110      	movs	r1, #16
 8007a74:	4618      	mov	r0, r3
 8007a76:	f008 fb71 	bl	801015c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a7e:	e046      	b.n	8007b0e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ab2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ac6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	69fa      	ldr	r2, [r7, #28]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ae6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d3b2      	bcc.n	8007a80 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007b2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	7bdb      	ldrb	r3, [r3, #15]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d016      	beq.n	8007b64 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b46:	f043 030b 	orr.w	r3, r3, #11
 8007b4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b5c:	f043 030b 	orr.w	r3, r3, #11
 8007b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b62:	e015      	b.n	8007b90 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b6a:	695a      	ldr	r2, [r3, #20]
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b72:	4619      	mov	r1, r3
 8007b74:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b8a:	f043 030b 	orr.w	r3, r3, #11
 8007b8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007ba2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f009 fab6 	bl	8011124 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695a      	ldr	r2, [r3, #20]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f009 f9e3 	bl	8010f98 <USB_ReadInterrupts>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bdc:	d123      	bne.n	8007c26 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f009 fa7a 	bl	80110dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f008 fb2e 	bl	801024e <USB_GetDevSpeed>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681c      	ldr	r4, [r3, #0]
 8007bfe:	f001 fe55 	bl	80098ac <HAL_RCC_GetHCLKFreq>
 8007c02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f008 f838 	bl	800fc80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f00e fb92 	bl	801633a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695a      	ldr	r2, [r3, #20]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f009 f9b4 	bl	8010f98 <USB_ReadInterrupts>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d10a      	bne.n	8007c50 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f00e fb6f 	bl	801631e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695a      	ldr	r2, [r3, #20]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f002 0208 	and.w	r2, r2, #8
 8007c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f009 f99f 	bl	8010f98 <USB_ReadInterrupts>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c60:	2b80      	cmp	r3, #128	@ 0x80
 8007c62:	d123      	bne.n	8007cac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c70:	2301      	movs	r3, #1
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c74:	e014      	b.n	8007ca0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fb08 	bl	80082aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	791b      	ldrb	r3, [r3, #4]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d3e4      	bcc.n	8007c76 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f009 f971 	bl	8010f98 <USB_ReadInterrupts>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cc0:	d13c      	bne.n	8007d3c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc6:	e02b      	b.n	8007d20 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d115      	bne.n	8007d1a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007cee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da12      	bge.n	8007d1a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	3317      	adds	r3, #23
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fac8 	bl	80082aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	791b      	ldrb	r3, [r3, #4]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d3cd      	bcc.n	8007cc8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695a      	ldr	r2, [r3, #20]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f009 f929 	bl	8010f98 <USB_ReadInterrupts>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d50:	d156      	bne.n	8007e00 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d52:	2301      	movs	r3, #1
 8007d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d56:	e045      	b.n	8007de4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d12e      	bne.n	8007dde <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da2b      	bge.n	8007dde <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007d92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d121      	bne.n	8007dde <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007dac:	2201      	movs	r2, #1
 8007dae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007dda:	6053      	str	r3, [r2, #4]
            break;
 8007ddc:	e008      	b.n	8007df0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	3301      	adds	r3, #1
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	791b      	ldrb	r3, [r3, #4]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d3b3      	bcc.n	8007d58 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f009 f8c7 	bl	8010f98 <USB_ReadInterrupts>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e14:	d10a      	bne.n	8007e2c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f00e fb10 	bl	801643c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f009 f8b1 	bl	8010f98 <USB_ReadInterrupts>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d115      	bne.n	8007e6c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f00e fb00 	bl	8016458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
 8007e68:	e000      	b.n	8007e6c <HAL_PCD_IRQHandler+0x996>
      return;
 8007e6a:	bf00      	nop
    }
  }
}
 8007e6c:	3734      	adds	r7, #52	@ 0x34
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd90      	pop	{r4, r7, pc}

08007e72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_PCD_SetAddress+0x1a>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e012      	b.n	8007eb2 <HAL_PCD_SetAddress+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	78fa      	ldrb	r2, [r7, #3]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f009 f810 	bl	8010ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4603      	mov	r3, r0
 8007eca:	70fb      	strb	r3, [r7, #3]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	803b      	strh	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0f      	bge.n	8007f00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	f003 020f 	and.w	r2, r3, #15
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	3310      	adds	r3, #16
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	705a      	strb	r2, [r3, #1]
 8007efe:	e00f      	b.n	8007f20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	f003 020f 	and.w	r2, r3, #15
 8007f06:	4613      	mov	r3, r2
 8007f08:	00db      	lsls	r3, r3, #3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4413      	add	r3, r2
 8007f16:	3304      	adds	r3, #4
 8007f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f2c:	883a      	ldrh	r2, [r7, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	78ba      	ldrb	r2, [r7, #2]
 8007f36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	785b      	ldrb	r3, [r3, #1]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007f4a:	78bb      	ldrb	r3, [r7, #2]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d102      	bne.n	8007f56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_PCD_EP_Open+0xaa>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e00e      	b.n	8007f82 <HAL_PCD_EP_Open+0xc8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68f9      	ldr	r1, [r7, #12]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f008 f990 	bl	8010298 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007f80:	7afb      	ldrb	r3, [r7, #11]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da0f      	bge.n	8007fbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	3310      	adds	r3, #16
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	705a      	strb	r2, [r3, #1]
 8007fbc:	e00f      	b.n	8007fde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	f003 020f 	and.w	r2, r3, #15
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_PCD_EP_Close+0x6e>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e00e      	b.n	8008016 <HAL_PCD_EP_Close+0x8c>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68f9      	ldr	r1, [r7, #12]
 8008006:	4618      	mov	r0, r3
 8008008:	f008 f9ce 	bl	80103a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b086      	sub	sp, #24
 8008022:	af00      	add	r7, sp, #0
 8008024:	60f8      	str	r0, [r7, #12]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
 800802a:	460b      	mov	r3, r1
 800802c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	f003 020f 	and.w	r2, r3, #15
 8008034:	4613      	mov	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	3304      	adds	r3, #4
 8008046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	2200      	movs	r2, #0
 8008058:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	b2da      	uxtb	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	799b      	ldrb	r3, [r3, #6]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d102      	bne.n	800807a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	799b      	ldrb	r3, [r3, #6]
 8008082:	461a      	mov	r2, r3
 8008084:	6979      	ldr	r1, [r7, #20]
 8008086:	f008 fa6b 	bl	8010560 <USB_EPStartXfer>

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	f003 020f 	and.w	r2, r3, #15
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80080b6:	681b      	ldr	r3, [r3, #0]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	460b      	mov	r3, r1
 80080d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	f003 020f 	and.w	r2, r3, #15
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	3310      	adds	r3, #16
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	3304      	adds	r3, #4
 80080ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2200      	movs	r2, #0
 80080fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2201      	movs	r2, #1
 8008102:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	b2da      	uxtb	r2, r3
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	799b      	ldrb	r3, [r3, #6]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d102      	bne.n	800811e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	799b      	ldrb	r3, [r3, #6]
 8008126:	461a      	mov	r2, r3
 8008128:	6979      	ldr	r1, [r7, #20]
 800812a:	f008 fa19 	bl	8010560 <USB_EPStartXfer>

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	7912      	ldrb	r2, [r2, #4]
 800814e:	4293      	cmp	r3, r2
 8008150:	d901      	bls.n	8008156 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e04f      	b.n	80081f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800815a:	2b00      	cmp	r3, #0
 800815c:	da0f      	bge.n	800817e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	f003 020f 	and.w	r2, r3, #15
 8008164:	4613      	mov	r3, r2
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	3310      	adds	r3, #16
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	4413      	add	r3, r2
 8008172:	3304      	adds	r3, #4
 8008174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	705a      	strb	r2, [r3, #1]
 800817c:	e00d      	b.n	800819a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <HAL_PCD_EP_SetStall+0x82>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e01d      	b.n	80081f6 <HAL_PCD_EP_SetStall+0xbe>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f008 fda9 	bl	8010d20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7999      	ldrb	r1, [r3, #6]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081e6:	461a      	mov	r2, r3
 80081e8:	f008 ff9c 	bl	8011124 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	7912      	ldrb	r2, [r2, #4]
 8008214:	4293      	cmp	r3, r2
 8008216:	d901      	bls.n	800821c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e042      	b.n	80082a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800821c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008220:	2b00      	cmp	r3, #0
 8008222:	da0f      	bge.n	8008244 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	f003 020f 	and.w	r2, r3, #15
 800822a:	4613      	mov	r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	3310      	adds	r3, #16
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	3304      	adds	r3, #4
 800823a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2201      	movs	r2, #1
 8008240:	705a      	strb	r2, [r3, #1]
 8008242:	e00f      	b.n	8008264 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	f003 020f 	and.w	r2, r3, #15
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4413      	add	r3, r2
 800825a:	3304      	adds	r3, #4
 800825c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	b2da      	uxtb	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_PCD_EP_ClrStall+0x86>
 8008280:	2302      	movs	r3, #2
 8008282:	e00e      	b.n	80082a2 <HAL_PCD_EP_ClrStall+0xa4>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68f9      	ldr	r1, [r7, #12]
 8008292:	4618      	mov	r0, r3
 8008294:	f008 fdb2 	bl	8010dfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80082b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da0c      	bge.n	80082d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	3310      	adds	r3, #16
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	4413      	add	r3, r2
 80082d2:	3304      	adds	r3, #4
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e00c      	b.n	80082f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	f003 020f 	and.w	r2, r3, #15
 80082de:	4613      	mov	r3, r2
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	3304      	adds	r3, #4
 80082f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68f9      	ldr	r1, [r7, #12]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f008 fbd1 	bl	8010aa0 <USB_EPStopXfer>
 80082fe:	4603      	mov	r3, r0
 8008300:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008302:	7afb      	ldrb	r3, [r7, #11]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	@ 0x28
 8008310:	af02      	add	r7, sp, #8
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	3310      	adds	r3, #16
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	429a      	cmp	r2, r3
 800833e:	d901      	bls.n	8008344 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e06b      	b.n	800841c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	429a      	cmp	r2, r3
 8008358:	d902      	bls.n	8008360 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	3303      	adds	r3, #3
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008368:	e02a      	b.n	80083c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	429a      	cmp	r2, r3
 800837e:	d902      	bls.n	8008386 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	3303      	adds	r3, #3
 800838a:	089b      	lsrs	r3, r3, #2
 800838c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68d9      	ldr	r1, [r3, #12]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	b2da      	uxtb	r2, r3
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	4603      	mov	r3, r0
 80083a2:	6978      	ldr	r0, [r7, #20]
 80083a4:	f008 fc26 	bl	8010bf4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	441a      	add	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	695a      	ldr	r2, [r3, #20]
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	441a      	add	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d809      	bhi.n	80083ea <PCD_WriteEmptyTxFifo+0xde>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	695a      	ldr	r2, [r3, #20]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083de:	429a      	cmp	r2, r3
 80083e0:	d203      	bcs.n	80083ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1bf      	bne.n	800836a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d811      	bhi.n	800841a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	2201      	movs	r2, #1
 80083fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008402:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	43db      	mvns	r3, r3
 8008410:	6939      	ldr	r1, [r7, #16]
 8008412:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008416:	4013      	ands	r3, r2
 8008418:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3720      	adds	r7, #32
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	333c      	adds	r3, #60	@ 0x3c
 800843c:	3304      	adds	r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	799b      	ldrb	r3, [r3, #6]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d17b      	bne.n	8008552 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d015      	beq.n	8008490 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	4a61      	ldr	r2, [pc, #388]	@ (80085ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	f240 80b9 	bls.w	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80b3 	beq.w	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008486:	461a      	mov	r2, r3
 8008488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800848c:	6093      	str	r3, [r2, #8]
 800848e:	e0a7      	b.n	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a6:	461a      	mov	r2, r3
 80084a8:	2320      	movs	r3, #32
 80084aa:	6093      	str	r3, [r2, #8]
 80084ac:	e098      	b.n	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f040 8093 	bne.w	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	4a4b      	ldr	r2, [pc, #300]	@ (80085ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d90f      	bls.n	80084e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d8:	461a      	mov	r2, r3
 80084da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084de:	6093      	str	r3, [r2, #8]
 80084e0:	e07e      	b.n	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	3304      	adds	r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1a      	ldr	r2, [r3, #32]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	0159      	lsls	r1, r3, #5
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	440b      	add	r3, r1
 8008504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d114      	bne.n	8008544 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800852c:	461a      	mov	r2, r3
 800852e:	2101      	movs	r1, #1
 8008530:	f008 fdf8 	bl	8011124 <USB_EP0_OutStart>
 8008534:	e006      	b.n	8008544 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	441a      	add	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f00d feb2 	bl	80162b4 <HAL_PCD_DataOutStageCallback>
 8008550:	e046      	b.n	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	4a26      	ldr	r2, [pc, #152]	@ (80085f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d124      	bne.n	80085a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00a      	beq.n	800857a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008570:	461a      	mov	r2, r3
 8008572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008576:	6093      	str	r3, [r2, #8]
 8008578:	e032      	b.n	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d008      	beq.n	8008596 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008590:	461a      	mov	r2, r3
 8008592:	2320      	movs	r3, #32
 8008594:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f00d fe89 	bl	80162b4 <HAL_PCD_DataOutStageCallback>
 80085a2:	e01d      	b.n	80085e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d114      	bne.n	80085d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	4613      	mov	r3, r2
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d108      	bne.n	80085d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80085cc:	461a      	mov	r2, r3
 80085ce:	2100      	movs	r1, #0
 80085d0:	f008 fda8 	bl	8011124 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f00d fe6a 	bl	80162b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	4f54300a 	.word	0x4f54300a
 80085f0:	4f54310a 	.word	0x4f54310a

080085f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	333c      	adds	r3, #60	@ 0x3c
 800860c:	3304      	adds	r3, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4a15      	ldr	r2, [pc, #84]	@ (800867c <PCD_EP_OutSetupPacket_int+0x88>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d90e      	bls.n	8008648 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008640:	461a      	mov	r2, r3
 8008642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008646:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f00d fe21 	bl	8016290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4a0a      	ldr	r2, [pc, #40]	@ (800867c <PCD_EP_OutSetupPacket_int+0x88>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d90c      	bls.n	8008670 <PCD_EP_OutSetupPacket_int+0x7c>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	799b      	ldrb	r3, [r3, #6]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d108      	bne.n	8008670 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008668:	461a      	mov	r2, r3
 800866a:	2101      	movs	r1, #1
 800866c:	f008 fd5a 	bl	8011124 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	4f54300a 	.word	0x4f54300a

08008680 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
 800868c:	4613      	mov	r3, r2
 800868e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d107      	bne.n	80086ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800869e:	883b      	ldrh	r3, [r7, #0]
 80086a0:	0419      	lsls	r1, r3, #16
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80086ac:	e028      	b.n	8008700 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b4:	0c1b      	lsrs	r3, r3, #16
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4413      	add	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e00d      	b.n	80086de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	3340      	adds	r3, #64	@ 0x40
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	0c1b      	lsrs	r3, r3, #16
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	4413      	add	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	3301      	adds	r3, #1
 80086dc:	73fb      	strb	r3, [r7, #15]
 80086de:	7bfa      	ldrb	r2, [r7, #15]
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d3ec      	bcc.n	80086c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80086e8:	883b      	ldrh	r3, [r7, #0]
 80086ea:	0418      	lsls	r0, r3, #16
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	4302      	orrs	r2, r0
 80086f8:	3340      	adds	r3, #64	@ 0x40
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	887a      	ldrh	r2, [r7, #2]
 8008720:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800875e:	4b05      	ldr	r3, [pc, #20]	@ (8008774 <HAL_PCDEx_ActivateLPM+0x44>)
 8008760:	4313      	orrs	r3, r2
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	10000003 	.word	0x10000003

08008778 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008798:	4b19      	ldr	r3, [pc, #100]	@ (8008800 <HAL_PWREx_ConfigSupply+0x70>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d00a      	beq.n	80087ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087a4:	4b16      	ldr	r3, [pc, #88]	@ (8008800 <HAL_PWREx_ConfigSupply+0x70>)
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d001      	beq.n	80087b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e01f      	b.n	80087f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e01d      	b.n	80087f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087ba:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <HAL_PWREx_ConfigSupply+0x70>)
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f023 0207 	bic.w	r2, r3, #7
 80087c2:	490f      	ldr	r1, [pc, #60]	@ (8008800 <HAL_PWREx_ConfigSupply+0x70>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087ca:	f7fa f8f3 	bl	80029b4 <HAL_GetTick>
 80087ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087d0:	e009      	b.n	80087e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087d2:	f7fa f8ef 	bl	80029b4 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087e0:	d901      	bls.n	80087e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e007      	b.n	80087f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087e6:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <HAL_PWREx_ConfigSupply+0x70>)
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087f2:	d1ee      	bne.n	80087d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	58024800 	.word	0x58024800

08008804 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008808:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4a04      	ldr	r2, [pc, #16]	@ (8008820 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800880e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008812:	60d3      	str	r3, [r2, #12]
}
 8008814:	bf00      	nop
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	58024800 	.word	0x58024800

08008824 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af02      	add	r7, sp, #8
 800882a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800882c:	f7fa f8c2 	bl	80029b4 <HAL_GetTick>
 8008830:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e05f      	b.n	80088fc <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d107      	bne.n	8008858 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7f9 fb97 	bl	8001f7c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800884e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f85a 	bl	800890c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	3b01      	subs	r3, #1
 8008868:	021a      	lsls	r2, r3, #8
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	2120      	movs	r1, #32
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f852 	bl	8008928 <QSPI_WaitFlagStateUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d135      	bne.n	80088fa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	4b1b      	ldr	r3, [pc, #108]	@ (8008904 <HAL_QSPI_Init+0xe0>)
 8008896:	4013      	ands	r3, r2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6852      	ldr	r2, [r2, #4]
 800889c:	0611      	lsls	r1, r2, #24
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68d2      	ldr	r2, [r2, #12]
 80088a2:	4311      	orrs	r1, r2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	69d2      	ldr	r2, [r2, #28]
 80088a8:	4311      	orrs	r1, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6a12      	ldr	r2, [r2, #32]
 80088ae:	4311      	orrs	r1, r2
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	4b12      	ldr	r3, [pc, #72]	@ (8008908 <HAL_QSPI_Init+0xe4>)
 80088c0:	4013      	ands	r3, r2
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6912      	ldr	r2, [r2, #16]
 80088c6:	0411      	lsls	r1, r2, #16
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6952      	ldr	r2, [r2, #20]
 80088cc:	4311      	orrs	r1, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6992      	ldr	r2, [r2, #24]
 80088d2:	4311      	orrs	r1, r2
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	430b      	orrs	r3, r1
 80088da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0201 	orr.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80088fa:	7afb      	ldrb	r3, [r7, #11]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	00ffff2f 	.word	0x00ffff2f
 8008908:	ffe0f8fe 	.word	0xffe0f8fe

0800890c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	603b      	str	r3, [r7, #0]
 8008934:	4613      	mov	r3, r2
 8008936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008938:	e01a      	b.n	8008970 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d016      	beq.n	8008970 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008942:	f7fa f837 	bl	80029b4 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d302      	bcc.n	8008958 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2204      	movs	r2, #4
 800895c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008964:	f043 0201 	orr.w	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e00e      	b.n	800898e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	4013      	ands	r3, r2
 800897a:	2b00      	cmp	r3, #0
 800897c:	bf14      	ite	ne
 800897e:	2301      	movne	r3, #1
 8008980:	2300      	moveq	r3, #0
 8008982:	b2db      	uxtb	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	429a      	cmp	r2, r3
 800898a:	d1d6      	bne.n	800893a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	@ 0x30
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f000 bc48 	b.w	800923c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 8088 	beq.w	8008aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089ba:	4b99      	ldr	r3, [pc, #612]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089c4:	4b96      	ldr	r3, [pc, #600]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80089ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089cc:	2b10      	cmp	r3, #16
 80089ce:	d007      	beq.n	80089e0 <HAL_RCC_OscConfig+0x48>
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	2b18      	cmp	r3, #24
 80089d4:	d111      	bne.n	80089fa <HAL_RCC_OscConfig+0x62>
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d10c      	bne.n	80089fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089e0:	4b8f      	ldr	r3, [pc, #572]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d06d      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x130>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d169      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f000 bc21 	b.w	800923c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a02:	d106      	bne.n	8008a12 <HAL_RCC_OscConfig+0x7a>
 8008a04:	4b86      	ldr	r3, [pc, #536]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a85      	ldr	r2, [pc, #532]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e02e      	b.n	8008a70 <HAL_RCC_OscConfig+0xd8>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10c      	bne.n	8008a34 <HAL_RCC_OscConfig+0x9c>
 8008a1a:	4b81      	ldr	r3, [pc, #516]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a80      	ldr	r2, [pc, #512]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	4b7e      	ldr	r3, [pc, #504]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a7d      	ldr	r2, [pc, #500]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	e01d      	b.n	8008a70 <HAL_RCC_OscConfig+0xd8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a3c:	d10c      	bne.n	8008a58 <HAL_RCC_OscConfig+0xc0>
 8008a3e:	4b78      	ldr	r3, [pc, #480]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a77      	ldr	r2, [pc, #476]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	4b75      	ldr	r3, [pc, #468]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a74      	ldr	r2, [pc, #464]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	e00b      	b.n	8008a70 <HAL_RCC_OscConfig+0xd8>
 8008a58:	4b71      	ldr	r3, [pc, #452]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a70      	ldr	r2, [pc, #448]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	4b6e      	ldr	r3, [pc, #440]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a6d      	ldr	r2, [pc, #436]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d013      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7f9 ff9c 	bl	80029b4 <HAL_GetTick>
 8008a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a80:	f7f9 ff98 	bl	80029b4 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b64      	cmp	r3, #100	@ 0x64
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e3d4      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a92:	4b63      	ldr	r3, [pc, #396]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0xe8>
 8008a9e:	e014      	b.n	8008aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa0:	f7f9 ff88 	bl	80029b4 <HAL_GetTick>
 8008aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008aa6:	e008      	b.n	8008aba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aa8:	f7f9 ff84 	bl	80029b4 <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b64      	cmp	r3, #100	@ 0x64
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e3c0      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008aba:	4b59      	ldr	r3, [pc, #356]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f0      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x110>
 8008ac6:	e000      	b.n	8008aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80ca 	beq.w	8008c6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ad8:	4b51      	ldr	r3, [pc, #324]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <HAL_RCC_OscConfig+0x166>
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	2b18      	cmp	r3, #24
 8008af2:	d156      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x20a>
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f003 0303 	and.w	r3, r3, #3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d151      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008afe:	4b48      	ldr	r3, [pc, #288]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <HAL_RCC_OscConfig+0x17e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e392      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b16:	4b42      	ldr	r3, [pc, #264]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f023 0219 	bic.w	r2, r3, #25
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	493f      	ldr	r1, [pc, #252]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b28:	f7f9 ff44 	bl	80029b4 <HAL_GetTick>
 8008b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b30:	f7f9 ff40 	bl	80029b4 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e37c      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b42:	4b37      	ldr	r3, [pc, #220]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f0      	beq.n	8008b30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b4e:	f7f9 ff61 	bl	8002a14 <HAL_GetREVID>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d817      	bhi.n	8008b8c <HAL_RCC_OscConfig+0x1f4>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b40      	cmp	r3, #64	@ 0x40
 8008b62:	d108      	bne.n	8008b76 <HAL_RCC_OscConfig+0x1de>
 8008b64:	4b2e      	ldr	r3, [pc, #184]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b74:	e07a      	b.n	8008c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b76:	4b2a      	ldr	r3, [pc, #168]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	031b      	lsls	r3, r3, #12
 8008b84:	4926      	ldr	r1, [pc, #152]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b8a:	e06f      	b.n	8008c6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b8c:	4b24      	ldr	r3, [pc, #144]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	061b      	lsls	r3, r3, #24
 8008b9a:	4921      	ldr	r1, [pc, #132]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ba0:	e064      	b.n	8008c6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d047      	beq.n	8008c3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008baa:	4b1d      	ldr	r3, [pc, #116]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f023 0219 	bic.w	r2, r3, #25
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	491a      	ldr	r1, [pc, #104]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7f9 fefa 	bl	80029b4 <HAL_GetTick>
 8008bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bc4:	f7f9 fef6 	bl	80029b4 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e332      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bd6:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0f0      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008be2:	f7f9 ff17 	bl	8002a14 <HAL_GetREVID>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d819      	bhi.n	8008c24 <HAL_RCC_OscConfig+0x28c>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b40      	cmp	r3, #64	@ 0x40
 8008bf6:	d108      	bne.n	8008c0a <HAL_RCC_OscConfig+0x272>
 8008bf8:	4b09      	ldr	r3, [pc, #36]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008c00:	4a07      	ldr	r2, [pc, #28]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c06:	6053      	str	r3, [r2, #4]
 8008c08:	e030      	b.n	8008c6c <HAL_RCC_OscConfig+0x2d4>
 8008c0a:	4b05      	ldr	r3, [pc, #20]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	031b      	lsls	r3, r3, #12
 8008c18:	4901      	ldr	r1, [pc, #4]	@ (8008c20 <HAL_RCC_OscConfig+0x288>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	604b      	str	r3, [r1, #4]
 8008c1e:	e025      	b.n	8008c6c <HAL_RCC_OscConfig+0x2d4>
 8008c20:	58024400 	.word	0x58024400
 8008c24:	4b9a      	ldr	r3, [pc, #616]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	061b      	lsls	r3, r3, #24
 8008c32:	4997      	ldr	r1, [pc, #604]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	604b      	str	r3, [r1, #4]
 8008c38:	e018      	b.n	8008c6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c3a:	4b95      	ldr	r3, [pc, #596]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a94      	ldr	r2, [pc, #592]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c46:	f7f9 feb5 	bl	80029b4 <HAL_GetTick>
 8008c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c4c:	e008      	b.n	8008c60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c4e:	f7f9 feb1 	bl	80029b4 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e2ed      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c60:	4b8b      	ldr	r3, [pc, #556]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1f0      	bne.n	8008c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80a9 	beq.w	8008dcc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c7a:	4b85      	ldr	r3, [pc, #532]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c84:	4b82      	ldr	r3, [pc, #520]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d007      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x308>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	2b18      	cmp	r3, #24
 8008c94:	d13a      	bne.n	8008d0c <HAL_RCC_OscConfig+0x374>
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d135      	bne.n	8008d0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x320>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	2b80      	cmp	r3, #128	@ 0x80
 8008cb2:	d001      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e2c1      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cb8:	f7f9 feac 	bl	8002a14 <HAL_GetREVID>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d817      	bhi.n	8008cf6 <HAL_RCC_OscConfig+0x35e>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d108      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x348>
 8008cce:	4b70      	ldr	r3, [pc, #448]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008cd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cde:	e075      	b.n	8008dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	069b      	lsls	r3, r3, #26
 8008cee:	4968      	ldr	r1, [pc, #416]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cf4:	e06a      	b.n	8008dcc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cf6:	4b66      	ldr	r3, [pc, #408]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	061b      	lsls	r3, r3, #24
 8008d04:	4962      	ldr	r1, [pc, #392]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d0a:	e05f      	b.n	8008dcc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d042      	beq.n	8008d9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d14:	4b5e      	ldr	r3, [pc, #376]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a5d      	ldr	r2, [pc, #372]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d20:	f7f9 fe48 	bl	80029b4 <HAL_GetTick>
 8008d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008d28:	f7f9 fe44 	bl	80029b4 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e280      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d3a:	4b55      	ldr	r3, [pc, #340]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f0      	beq.n	8008d28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d46:	f7f9 fe65 	bl	8002a14 <HAL_GetREVID>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d817      	bhi.n	8008d84 <HAL_RCC_OscConfig+0x3ec>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d108      	bne.n	8008d6e <HAL_RCC_OscConfig+0x3d6>
 8008d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008d64:	4a4a      	ldr	r2, [pc, #296]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d6a:	6053      	str	r3, [r2, #4]
 8008d6c:	e02e      	b.n	8008dcc <HAL_RCC_OscConfig+0x434>
 8008d6e:	4b48      	ldr	r3, [pc, #288]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	069b      	lsls	r3, r3, #26
 8008d7c:	4944      	ldr	r1, [pc, #272]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	604b      	str	r3, [r1, #4]
 8008d82:	e023      	b.n	8008dcc <HAL_RCC_OscConfig+0x434>
 8008d84:	4b42      	ldr	r3, [pc, #264]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	061b      	lsls	r3, r3, #24
 8008d92:	493f      	ldr	r1, [pc, #252]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60cb      	str	r3, [r1, #12]
 8008d98:	e018      	b.n	8008dcc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da6:	f7f9 fe05 	bl	80029b4 <HAL_GetTick>
 8008daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dac:	e008      	b.n	8008dc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008dae:	f7f9 fe01 	bl	80029b4 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e23d      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dc0:	4b33      	ldr	r3, [pc, #204]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1f0      	bne.n	8008dae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d036      	beq.n	8008e46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d019      	beq.n	8008e14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008de0:	4b2b      	ldr	r3, [pc, #172]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008de4:	4a2a      	ldr	r2, [pc, #168]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dec:	f7f9 fde2 	bl	80029b4 <HAL_GetTick>
 8008df0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008df2:	e008      	b.n	8008e06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008df4:	f7f9 fdde 	bl	80029b4 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e21a      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e06:	4b22      	ldr	r3, [pc, #136]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0f0      	beq.n	8008df4 <HAL_RCC_OscConfig+0x45c>
 8008e12:	e018      	b.n	8008e46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e14:	4b1e      	ldr	r3, [pc, #120]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e18:	4a1d      	ldr	r2, [pc, #116]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e20:	f7f9 fdc8 	bl	80029b4 <HAL_GetTick>
 8008e24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e28:	f7f9 fdc4 	bl	80029b4 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e200      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e3a:	4b15      	ldr	r3, [pc, #84]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d039      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01c      	beq.n	8008e94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e66:	f7f9 fda5 	bl	80029b4 <HAL_GetTick>
 8008e6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e6c:	e008      	b.n	8008e80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e6e:	f7f9 fda1 	bl	80029b4 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d901      	bls.n	8008e80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e1dd      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e80:	4b03      	ldr	r3, [pc, #12]	@ (8008e90 <HAL_RCC_OscConfig+0x4f8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0f0      	beq.n	8008e6e <HAL_RCC_OscConfig+0x4d6>
 8008e8c:	e01b      	b.n	8008ec6 <HAL_RCC_OscConfig+0x52e>
 8008e8e:	bf00      	nop
 8008e90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e94:	4b9b      	ldr	r3, [pc, #620]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a9a      	ldr	r2, [pc, #616]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ea0:	f7f9 fd88 	bl	80029b4 <HAL_GetTick>
 8008ea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ea8:	f7f9 fd84 	bl	80029b4 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e1c0      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008eba:	4b92      	ldr	r3, [pc, #584]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f0      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 8081 	beq.w	8008fd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8009108 <HAL_RCC_OscConfig+0x770>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a8b      	ldr	r2, [pc, #556]	@ (8009108 <HAL_RCC_OscConfig+0x770>)
 8008eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ede:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ee0:	f7f9 fd68 	bl	80029b4 <HAL_GetTick>
 8008ee4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ee8:	f7f9 fd64 	bl	80029b4 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b64      	cmp	r3, #100	@ 0x64
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e1a0      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008efa:	4b83      	ldr	r3, [pc, #524]	@ (8009108 <HAL_RCC_OscConfig+0x770>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0f0      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d106      	bne.n	8008f1c <HAL_RCC_OscConfig+0x584>
 8008f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f12:	4a7c      	ldr	r2, [pc, #496]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f14:	f043 0301 	orr.w	r3, r3, #1
 8008f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f1a:	e02d      	b.n	8008f78 <HAL_RCC_OscConfig+0x5e0>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10c      	bne.n	8008f3e <HAL_RCC_OscConfig+0x5a6>
 8008f24:	4b77      	ldr	r3, [pc, #476]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f28:	4a76      	ldr	r2, [pc, #472]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f30:	4b74      	ldr	r3, [pc, #464]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f34:	4a73      	ldr	r2, [pc, #460]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f36:	f023 0304 	bic.w	r3, r3, #4
 8008f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f3c:	e01c      	b.n	8008f78 <HAL_RCC_OscConfig+0x5e0>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	2b05      	cmp	r3, #5
 8008f44:	d10c      	bne.n	8008f60 <HAL_RCC_OscConfig+0x5c8>
 8008f46:	4b6f      	ldr	r3, [pc, #444]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f4c:	f043 0304 	orr.w	r3, r3, #4
 8008f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f52:	4b6c      	ldr	r3, [pc, #432]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	4a6b      	ldr	r2, [pc, #428]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f58:	f043 0301 	orr.w	r3, r3, #1
 8008f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f5e:	e00b      	b.n	8008f78 <HAL_RCC_OscConfig+0x5e0>
 8008f60:	4b68      	ldr	r3, [pc, #416]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f64:	4a67      	ldr	r2, [pc, #412]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f6c:	4b65      	ldr	r3, [pc, #404]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f70:	4a64      	ldr	r2, [pc, #400]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008f72:	f023 0304 	bic.w	r3, r3, #4
 8008f76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d015      	beq.n	8008fac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f80:	f7f9 fd18 	bl	80029b4 <HAL_GetTick>
 8008f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f86:	e00a      	b.n	8008f9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f88:	f7f9 fd14 	bl	80029b4 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d901      	bls.n	8008f9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e14e      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f9e:	4b59      	ldr	r3, [pc, #356]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0ee      	beq.n	8008f88 <HAL_RCC_OscConfig+0x5f0>
 8008faa:	e014      	b.n	8008fd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fac:	f7f9 fd02 	bl	80029b4 <HAL_GetTick>
 8008fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fb2:	e00a      	b.n	8008fca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fb4:	f7f9 fcfe 	bl	80029b4 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e138      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fca:	4b4e      	ldr	r3, [pc, #312]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1ee      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 812d 	beq.w	800923a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008fe0:	4b48      	ldr	r3, [pc, #288]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fe8:	2b18      	cmp	r3, #24
 8008fea:	f000 80bd 	beq.w	8009168 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	f040 809e 	bne.w	8009134 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff8:	4b42      	ldr	r3, [pc, #264]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a41      	ldr	r2, [pc, #260]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8008ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7f9 fcd6 	bl	80029b4 <HAL_GetTick>
 8009008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800900c:	f7f9 fcd2 	bl	80029b4 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e10e      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800901e:	4b39      	ldr	r3, [pc, #228]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f0      	bne.n	800900c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800902a:	4b36      	ldr	r3, [pc, #216]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 800902c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800902e:	4b37      	ldr	r3, [pc, #220]	@ (800910c <HAL_RCC_OscConfig+0x774>)
 8009030:	4013      	ands	r3, r2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800903a:	0112      	lsls	r2, r2, #4
 800903c:	430a      	orrs	r2, r1
 800903e:	4931      	ldr	r1, [pc, #196]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8009040:	4313      	orrs	r3, r2
 8009042:	628b      	str	r3, [r1, #40]	@ 0x28
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009048:	3b01      	subs	r3, #1
 800904a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009052:	3b01      	subs	r3, #1
 8009054:	025b      	lsls	r3, r3, #9
 8009056:	b29b      	uxth	r3, r3
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905e:	3b01      	subs	r3, #1
 8009060:	041b      	lsls	r3, r3, #16
 8009062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906c:	3b01      	subs	r3, #1
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009074:	4923      	ldr	r1, [pc, #140]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8009076:	4313      	orrs	r3, r2
 8009078:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800907a:	4b22      	ldr	r3, [pc, #136]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 800907c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907e:	4a21      	ldr	r2, [pc, #132]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8009080:	f023 0301 	bic.w	r3, r3, #1
 8009084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009086:	4b1f      	ldr	r3, [pc, #124]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8009088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908a:	4b21      	ldr	r3, [pc, #132]	@ (8009110 <HAL_RCC_OscConfig+0x778>)
 800908c:	4013      	ands	r3, r2
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009092:	00d2      	lsls	r2, r2, #3
 8009094:	491b      	ldr	r1, [pc, #108]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 8009096:	4313      	orrs	r3, r2
 8009098:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800909a:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 800909c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909e:	f023 020c 	bic.w	r2, r3, #12
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a6:	4917      	ldr	r1, [pc, #92]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090ac:	4b15      	ldr	r3, [pc, #84]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	f023 0202 	bic.w	r2, r3, #2
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b8:	4912      	ldr	r1, [pc, #72]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090be:	4b11      	ldr	r3, [pc, #68]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	4a10      	ldr	r2, [pc, #64]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	4a0a      	ldr	r2, [pc, #40]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80090e2:	4b08      	ldr	r3, [pc, #32]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a07      	ldr	r2, [pc, #28]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090e8:	f043 0301 	orr.w	r3, r3, #1
 80090ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090ee:	4b05      	ldr	r3, [pc, #20]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a04      	ldr	r2, [pc, #16]	@ (8009104 <HAL_RCC_OscConfig+0x76c>)
 80090f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fa:	f7f9 fc5b 	bl	80029b4 <HAL_GetTick>
 80090fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009100:	e011      	b.n	8009126 <HAL_RCC_OscConfig+0x78e>
 8009102:	bf00      	nop
 8009104:	58024400 	.word	0x58024400
 8009108:	58024800 	.word	0x58024800
 800910c:	fffffc0c 	.word	0xfffffc0c
 8009110:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009114:	f7f9 fc4e 	bl	80029b4 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e08a      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009126:	4b47      	ldr	r3, [pc, #284]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f0      	beq.n	8009114 <HAL_RCC_OscConfig+0x77c>
 8009132:	e082      	b.n	800923a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009134:	4b43      	ldr	r3, [pc, #268]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a42      	ldr	r2, [pc, #264]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 800913a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800913e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009140:	f7f9 fc38 	bl	80029b4 <HAL_GetTick>
 8009144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009148:	f7f9 fc34 	bl	80029b4 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e070      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800915a:	4b3a      	ldr	r3, [pc, #232]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f0      	bne.n	8009148 <HAL_RCC_OscConfig+0x7b0>
 8009166:	e068      	b.n	800923a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009168:	4b36      	ldr	r3, [pc, #216]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800916e:	4b35      	ldr	r3, [pc, #212]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009172:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009178:	2b01      	cmp	r3, #1
 800917a:	d031      	beq.n	80091e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f003 0203 	and.w	r2, r3, #3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009186:	429a      	cmp	r2, r3
 8009188:	d12a      	bne.n	80091e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009196:	429a      	cmp	r2, r3
 8009198:	d122      	bne.n	80091e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d11a      	bne.n	80091e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	0a5b      	lsrs	r3, r3, #9
 80091ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d111      	bne.n	80091e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	0c1b      	lsrs	r3, r3, #16
 80091c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d108      	bne.n	80091e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	0e1b      	lsrs	r3, r3, #24
 80091d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091dc:	429a      	cmp	r2, r3
 80091de:	d001      	beq.n	80091e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e02b      	b.n	800923c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80091e4:	4b17      	ldr	r3, [pc, #92]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 80091e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e8:	08db      	lsrs	r3, r3, #3
 80091ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d01f      	beq.n	800923a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80091fa:	4b12      	ldr	r3, [pc, #72]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	4a11      	ldr	r2, [pc, #68]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009206:	f7f9 fbd5 	bl	80029b4 <HAL_GetTick>
 800920a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800920c:	bf00      	nop
 800920e:	f7f9 fbd1 	bl	80029b4 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	4293      	cmp	r3, r2
 8009218:	d0f9      	beq.n	800920e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800921a:	4b0a      	ldr	r3, [pc, #40]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 800921c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800921e:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <HAL_RCC_OscConfig+0x8b0>)
 8009220:	4013      	ands	r3, r2
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009226:	00d2      	lsls	r2, r2, #3
 8009228:	4906      	ldr	r1, [pc, #24]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 800922a:	4313      	orrs	r3, r2
 800922c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800922e:	4b05      	ldr	r3, [pc, #20]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 8009230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009232:	4a04      	ldr	r2, [pc, #16]	@ (8009244 <HAL_RCC_OscConfig+0x8ac>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3730      	adds	r7, #48	@ 0x30
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	58024400 	.word	0x58024400
 8009248:	ffff0007 	.word	0xffff0007

0800924c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e19c      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009260:	4b8a      	ldr	r3, [pc, #552]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d910      	bls.n	8009290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800926e:	4b87      	ldr	r3, [pc, #540]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f023 020f 	bic.w	r2, r3, #15
 8009276:	4985      	ldr	r1, [pc, #532]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	4313      	orrs	r3, r2
 800927c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800927e:	4b83      	ldr	r3, [pc, #524]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 030f 	and.w	r3, r3, #15
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d001      	beq.n	8009290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e184      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d010      	beq.n	80092be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	4b7b      	ldr	r3, [pc, #492]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d908      	bls.n	80092be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092ac:	4b78      	ldr	r3, [pc, #480]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	4975      	ldr	r1, [pc, #468]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092ba:	4313      	orrs	r3, r2
 80092bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0308 	and.w	r3, r3, #8
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d010      	beq.n	80092ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695a      	ldr	r2, [r3, #20]
 80092ce:	4b70      	ldr	r3, [pc, #448]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d908      	bls.n	80092ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092da:	4b6d      	ldr	r3, [pc, #436]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	496a      	ldr	r1, [pc, #424]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d010      	beq.n	800931a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699a      	ldr	r2, [r3, #24]
 80092fc:	4b64      	ldr	r3, [pc, #400]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009304:	429a      	cmp	r2, r3
 8009306:	d908      	bls.n	800931a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009308:	4b61      	ldr	r3, [pc, #388]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	495e      	ldr	r1, [pc, #376]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009316:	4313      	orrs	r3, r2
 8009318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0320 	and.w	r3, r3, #32
 8009322:	2b00      	cmp	r3, #0
 8009324:	d010      	beq.n	8009348 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69da      	ldr	r2, [r3, #28]
 800932a:	4b59      	ldr	r3, [pc, #356]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009332:	429a      	cmp	r2, r3
 8009334:	d908      	bls.n	8009348 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009336:	4b56      	ldr	r3, [pc, #344]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	4953      	ldr	r1, [pc, #332]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009344:	4313      	orrs	r3, r2
 8009346:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d010      	beq.n	8009376 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	4b4d      	ldr	r3, [pc, #308]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	429a      	cmp	r2, r3
 8009362:	d908      	bls.n	8009376 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009364:	4b4a      	ldr	r3, [pc, #296]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f023 020f 	bic.w	r2, r3, #15
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4947      	ldr	r1, [pc, #284]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009372:	4313      	orrs	r3, r2
 8009374:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d055      	beq.n	800942e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009382:	4b43      	ldr	r3, [pc, #268]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	4940      	ldr	r1, [pc, #256]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009390:	4313      	orrs	r3, r2
 8009392:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d107      	bne.n	80093ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800939c:	4b3c      	ldr	r3, [pc, #240]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d121      	bne.n	80093ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e0f6      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d107      	bne.n	80093c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093b4:	4b36      	ldr	r3, [pc, #216]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d115      	bne.n	80093ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0ea      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d107      	bne.n	80093dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093cc:	4b30      	ldr	r3, [pc, #192]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d109      	bne.n	80093ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e0de      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e0d6      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093ec:	4b28      	ldr	r3, [pc, #160]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f023 0207 	bic.w	r2, r3, #7
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	4925      	ldr	r1, [pc, #148]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fe:	f7f9 fad9 	bl	80029b4 <HAL_GetTick>
 8009402:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009404:	e00a      	b.n	800941c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009406:	f7f9 fad5 	bl	80029b4 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009414:	4293      	cmp	r3, r2
 8009416:	d901      	bls.n	800941c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e0be      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800941c:	4b1c      	ldr	r3, [pc, #112]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	429a      	cmp	r2, r3
 800942c:	d1eb      	bne.n	8009406 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d010      	beq.n	800945c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	4b14      	ldr	r3, [pc, #80]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	429a      	cmp	r2, r3
 8009448:	d208      	bcs.n	800945c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800944a:	4b11      	ldr	r3, [pc, #68]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	f023 020f 	bic.w	r2, r3, #15
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	490e      	ldr	r1, [pc, #56]	@ (8009490 <HAL_RCC_ClockConfig+0x244>)
 8009458:	4313      	orrs	r3, r2
 800945a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800945c:	4b0b      	ldr	r3, [pc, #44]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d214      	bcs.n	8009494 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800946a:	4b08      	ldr	r3, [pc, #32]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f023 020f 	bic.w	r2, r3, #15
 8009472:	4906      	ldr	r1, [pc, #24]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	4313      	orrs	r3, r2
 8009478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800947a:	4b04      	ldr	r3, [pc, #16]	@ (800948c <HAL_RCC_ClockConfig+0x240>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d005      	beq.n	8009494 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e086      	b.n	800959a <HAL_RCC_ClockConfig+0x34e>
 800948c:	52002000 	.word	0x52002000
 8009490:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d010      	beq.n	80094c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	4b3f      	ldr	r3, [pc, #252]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d208      	bcs.n	80094c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094b0:	4b3c      	ldr	r3, [pc, #240]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	4939      	ldr	r1, [pc, #228]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d010      	beq.n	80094f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695a      	ldr	r2, [r3, #20]
 80094d2:	4b34      	ldr	r3, [pc, #208]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094da:	429a      	cmp	r2, r3
 80094dc:	d208      	bcs.n	80094f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094de:	4b31      	ldr	r3, [pc, #196]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	492e      	ldr	r1, [pc, #184]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0310 	and.w	r3, r3, #16
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d010      	beq.n	800951e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699a      	ldr	r2, [r3, #24]
 8009500:	4b28      	ldr	r3, [pc, #160]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009508:	429a      	cmp	r2, r3
 800950a:	d208      	bcs.n	800951e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800950c:	4b25      	ldr	r3, [pc, #148]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	4922      	ldr	r1, [pc, #136]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 800951a:	4313      	orrs	r3, r2
 800951c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	d010      	beq.n	800954c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69da      	ldr	r2, [r3, #28]
 800952e:	4b1d      	ldr	r3, [pc, #116]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009536:	429a      	cmp	r2, r3
 8009538:	d208      	bcs.n	800954c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800953a:	4b1a      	ldr	r3, [pc, #104]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	4917      	ldr	r1, [pc, #92]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 8009548:	4313      	orrs	r3, r2
 800954a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800954c:	f000 f834 	bl	80095b8 <HAL_RCC_GetSysClockFreq>
 8009550:	4602      	mov	r2, r0
 8009552:	4b14      	ldr	r3, [pc, #80]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	4912      	ldr	r1, [pc, #72]	@ (80095a8 <HAL_RCC_ClockConfig+0x35c>)
 800955e:	5ccb      	ldrb	r3, [r1, r3]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
 8009568:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800956a:	4b0e      	ldr	r3, [pc, #56]	@ (80095a4 <HAL_RCC_ClockConfig+0x358>)
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	4a0d      	ldr	r2, [pc, #52]	@ (80095a8 <HAL_RCC_ClockConfig+0x35c>)
 8009574:	5cd3      	ldrb	r3, [r2, r3]
 8009576:	f003 031f 	and.w	r3, r3, #31
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	4a0a      	ldr	r2, [pc, #40]	@ (80095ac <HAL_RCC_ClockConfig+0x360>)
 8009582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009584:	4a0a      	ldr	r2, [pc, #40]	@ (80095b0 <HAL_RCC_ClockConfig+0x364>)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800958a:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <HAL_RCC_ClockConfig+0x368>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f7f8 ff86 	bl	80024a0 <HAL_InitTick>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
 80095a8:	0801a8cc 	.word	0x0801a8cc
 80095ac:	24000004 	.word	0x24000004
 80095b0:	24000000 	.word	0x24000000
 80095b4:	24000008 	.word	0x24000008

080095b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b089      	sub	sp, #36	@ 0x24
 80095bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095be:	4bb3      	ldr	r3, [pc, #716]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095c6:	2b18      	cmp	r3, #24
 80095c8:	f200 8155 	bhi.w	8009876 <HAL_RCC_GetSysClockFreq+0x2be>
 80095cc:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	08009639 	.word	0x08009639
 80095d8:	08009877 	.word	0x08009877
 80095dc:	08009877 	.word	0x08009877
 80095e0:	08009877 	.word	0x08009877
 80095e4:	08009877 	.word	0x08009877
 80095e8:	08009877 	.word	0x08009877
 80095ec:	08009877 	.word	0x08009877
 80095f0:	08009877 	.word	0x08009877
 80095f4:	0800965f 	.word	0x0800965f
 80095f8:	08009877 	.word	0x08009877
 80095fc:	08009877 	.word	0x08009877
 8009600:	08009877 	.word	0x08009877
 8009604:	08009877 	.word	0x08009877
 8009608:	08009877 	.word	0x08009877
 800960c:	08009877 	.word	0x08009877
 8009610:	08009877 	.word	0x08009877
 8009614:	08009665 	.word	0x08009665
 8009618:	08009877 	.word	0x08009877
 800961c:	08009877 	.word	0x08009877
 8009620:	08009877 	.word	0x08009877
 8009624:	08009877 	.word	0x08009877
 8009628:	08009877 	.word	0x08009877
 800962c:	08009877 	.word	0x08009877
 8009630:	08009877 	.word	0x08009877
 8009634:	0800966b 	.word	0x0800966b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009638:	4b94      	ldr	r3, [pc, #592]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009644:	4b91      	ldr	r3, [pc, #580]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	08db      	lsrs	r3, r3, #3
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	4a90      	ldr	r2, [pc, #576]	@ (8009890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
 8009654:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009656:	e111      	b.n	800987c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009658:	4b8d      	ldr	r3, [pc, #564]	@ (8009890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800965a:	61bb      	str	r3, [r7, #24]
      break;
 800965c:	e10e      	b.n	800987c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800965e:	4b8d      	ldr	r3, [pc, #564]	@ (8009894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009660:	61bb      	str	r3, [r7, #24]
      break;
 8009662:	e10b      	b.n	800987c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009664:	4b8c      	ldr	r3, [pc, #560]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009666:	61bb      	str	r3, [r7, #24]
      break;
 8009668:	e108      	b.n	800987c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800966a:	4b88      	ldr	r3, [pc, #544]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800966c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009674:	4b85      	ldr	r3, [pc, #532]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	091b      	lsrs	r3, r3, #4
 800967a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800967e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009680:	4b82      	ldr	r3, [pc, #520]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800968a:	4b80      	ldr	r3, [pc, #512]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800968c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800968e:	08db      	lsrs	r3, r3, #3
 8009690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	fb02 f303 	mul.w	r3, r2, r3
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80e1 	beq.w	8009870 <HAL_RCC_GetSysClockFreq+0x2b8>
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	f000 8083 	beq.w	80097bc <HAL_RCC_GetSysClockFreq+0x204>
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	f200 80a1 	bhi.w	8009800 <HAL_RCC_GetSysClockFreq+0x248>
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <HAL_RCC_GetSysClockFreq+0x114>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d056      	beq.n	8009778 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096ca:	e099      	b.n	8009800 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096cc:	4b6f      	ldr	r3, [pc, #444]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d02d      	beq.n	8009734 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096d8:	4b6c      	ldr	r3, [pc, #432]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	08db      	lsrs	r3, r3, #3
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	4a6b      	ldr	r2, [pc, #428]	@ (8009890 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096e4:	fa22 f303 	lsr.w	r3, r2, r3
 80096e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	ee07 3a90 	vmov	s15, r3
 80096f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009702:	4b62      	ldr	r3, [pc, #392]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009712:	ed97 6a02 	vldr	s12, [r7, #8]
 8009716:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800989c <HAL_RCC_GetSysClockFreq+0x2e4>
 800971a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009732:	e087      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80098a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009746:	4b51      	ldr	r3, [pc, #324]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974e:	ee07 3a90 	vmov	s15, r3
 8009752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009756:	ed97 6a02 	vldr	s12, [r7, #8]
 800975a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800989c <HAL_RCC_GetSysClockFreq+0x2e4>
 800975e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800976a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009776:	e065      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80098a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978a:	4b40      	ldr	r3, [pc, #256]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800978c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979a:	ed97 6a02 	vldr	s12, [r7, #8]
 800979e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800989c <HAL_RCC_GetSysClockFreq+0x2e4>
 80097a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097ba:	e043      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80098a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ce:	4b2f      	ldr	r3, [pc, #188]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097de:	ed97 6a02 	vldr	s12, [r7, #8]
 80097e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800989c <HAL_RCC_GetSysClockFreq+0x2e4>
 80097e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097fe:	e021      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80098a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800980e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009812:	4b1e      	ldr	r3, [pc, #120]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009822:	ed97 6a02 	vldr	s12, [r7, #8]
 8009826:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800989c <HAL_RCC_GetSysClockFreq+0x2e4>
 800982a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009842:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009844:	4b11      	ldr	r3, [pc, #68]	@ (800988c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009848:	0a5b      	lsrs	r3, r3, #9
 800984a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800984e:	3301      	adds	r3, #1
 8009850:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	ee07 3a90 	vmov	s15, r3
 8009858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800985c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009868:	ee17 3a90 	vmov	r3, s15
 800986c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800986e:	e005      	b.n	800987c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	61bb      	str	r3, [r7, #24]
      break;
 8009874:	e002      	b.n	800987c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009876:	4b07      	ldr	r3, [pc, #28]	@ (8009894 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009878:	61bb      	str	r3, [r7, #24]
      break;
 800987a:	bf00      	nop
  }

  return sysclockfreq;
 800987c:	69bb      	ldr	r3, [r7, #24]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3724      	adds	r7, #36	@ 0x24
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	58024400 	.word	0x58024400
 8009890:	03d09000 	.word	0x03d09000
 8009894:	003d0900 	.word	0x003d0900
 8009898:	017d7840 	.word	0x017d7840
 800989c:	46000000 	.word	0x46000000
 80098a0:	4c742400 	.word	0x4c742400
 80098a4:	4a742400 	.word	0x4a742400
 80098a8:	4bbebc20 	.word	0x4bbebc20

080098ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80098b2:	f7ff fe81 	bl	80095b8 <HAL_RCC_GetSysClockFreq>
 80098b6:	4602      	mov	r2, r0
 80098b8:	4b10      	ldr	r3, [pc, #64]	@ (80098fc <HAL_RCC_GetHCLKFreq+0x50>)
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	490f      	ldr	r1, [pc, #60]	@ (8009900 <HAL_RCC_GetHCLKFreq+0x54>)
 80098c4:	5ccb      	ldrb	r3, [r1, r3]
 80098c6:	f003 031f 	and.w	r3, r3, #31
 80098ca:	fa22 f303 	lsr.w	r3, r2, r3
 80098ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098d0:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <HAL_RCC_GetHCLKFreq+0x50>)
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	4a09      	ldr	r2, [pc, #36]	@ (8009900 <HAL_RCC_GetHCLKFreq+0x54>)
 80098da:	5cd3      	ldrb	r3, [r2, r3]
 80098dc:	f003 031f 	and.w	r3, r3, #31
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	fa22 f303 	lsr.w	r3, r2, r3
 80098e6:	4a07      	ldr	r2, [pc, #28]	@ (8009904 <HAL_RCC_GetHCLKFreq+0x58>)
 80098e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098ea:	4a07      	ldr	r2, [pc, #28]	@ (8009908 <HAL_RCC_GetHCLKFreq+0x5c>)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80098f0:	4b04      	ldr	r3, [pc, #16]	@ (8009904 <HAL_RCC_GetHCLKFreq+0x58>)
 80098f2:	681b      	ldr	r3, [r3, #0]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	58024400 	.word	0x58024400
 8009900:	0801a8cc 	.word	0x0801a8cc
 8009904:	24000004 	.word	0x24000004
 8009908:	24000000 	.word	0x24000000

0800990c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009910:	f7ff ffcc 	bl	80098ac <HAL_RCC_GetHCLKFreq>
 8009914:	4602      	mov	r2, r0
 8009916:	4b06      	ldr	r3, [pc, #24]	@ (8009930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	091b      	lsrs	r3, r3, #4
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	4904      	ldr	r1, [pc, #16]	@ (8009934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009922:	5ccb      	ldrb	r3, [r1, r3]
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800992c:	4618      	mov	r0, r3
 800992e:	bd80      	pop	{r7, pc}
 8009930:	58024400 	.word	0x58024400
 8009934:	0801a8cc 	.word	0x0801a8cc

08009938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800993c:	f7ff ffb6 	bl	80098ac <HAL_RCC_GetHCLKFreq>
 8009940:	4602      	mov	r2, r0
 8009942:	4b06      	ldr	r3, [pc, #24]	@ (800995c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	4904      	ldr	r1, [pc, #16]	@ (8009960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800994e:	5ccb      	ldrb	r3, [r1, r3]
 8009950:	f003 031f 	and.w	r3, r3, #31
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009958:	4618      	mov	r0, r3
 800995a:	bd80      	pop	{r7, pc}
 800995c:	58024400 	.word	0x58024400
 8009960:	0801a8cc 	.word	0x0801a8cc

08009964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	223f      	movs	r2, #63	@ 0x3f
 8009972:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009974:	4b1a      	ldr	r3, [pc, #104]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f003 0207 	and.w	r2, r3, #7
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009980:	4b17      	ldr	r3, [pc, #92]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800998c:	4b14      	ldr	r3, [pc, #80]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	f003 020f 	and.w	r2, r3, #15
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009998:	4b11      	ldr	r3, [pc, #68]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80099a4:	4b0e      	ldr	r3, [pc, #56]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80099b0:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80099bc:	4b08      	ldr	r3, [pc, #32]	@ (80099e0 <HAL_RCC_GetClockConfig+0x7c>)
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80099c8:	4b06      	ldr	r3, [pc, #24]	@ (80099e4 <HAL_RCC_GetClockConfig+0x80>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	58024400 	.word	0x58024400
 80099e4:	52002000 	.word	0x52002000

080099e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099ec:	b0ca      	sub	sp, #296	@ 0x128
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80099f4:	2300      	movs	r3, #0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80099fa:	2300      	movs	r3, #0
 80099fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009a0c:	2500      	movs	r5, #0
 8009a0e:	ea54 0305 	orrs.w	r3, r4, r5
 8009a12:	d049      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a1e:	d02f      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009a20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a24:	d828      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a2a:	d01a      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a30:	d822      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d003      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a3a:	d007      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a3c:	e01c      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3e:	4bb8      	ldr	r3, [pc, #736]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a42:	4ab7      	ldr	r2, [pc, #732]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a4a:	e01a      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a50:	3308      	adds	r3, #8
 8009a52:	2102      	movs	r1, #2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 fc8f 	bl	800b378 <RCCEx_PLL2_Config>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a60:	e00f      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a66:	3328      	adds	r3, #40	@ 0x28
 8009a68:	2102      	movs	r1, #2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f001 fd36 	bl	800b4dc <RCCEx_PLL3_Config>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a76:	e004      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a7e:	e000      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10a      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009a8a:	4ba5      	ldr	r3, [pc, #660]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a98:	4aa1      	ldr	r2, [pc, #644]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a9e:	e003      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009ab4:	f04f 0900 	mov.w	r9, #0
 8009ab8:	ea58 0309 	orrs.w	r3, r8, r9
 8009abc:	d047      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d82a      	bhi.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009af3 	.word	0x08009af3
 8009ad8:	08009b09 	.word	0x08009b09
 8009adc:	08009b27 	.word	0x08009b27
 8009ae0:	08009b27 	.word	0x08009b27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae4:	4b8e      	ldr	r3, [pc, #568]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	4a8d      	ldr	r2, [pc, #564]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009af0:	e01a      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af6:	3308      	adds	r3, #8
 8009af8:	2100      	movs	r1, #0
 8009afa:	4618      	mov	r0, r3
 8009afc:	f001 fc3c 	bl	800b378 <RCCEx_PLL2_Config>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b06:	e00f      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0c:	3328      	adds	r3, #40	@ 0x28
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f001 fce3 	bl	800b4dc <RCCEx_PLL3_Config>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b1c:	e004      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b24:	e000      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b30:	4b7b      	ldr	r3, [pc, #492]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b34:	f023 0107 	bic.w	r1, r3, #7
 8009b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3e:	4a78      	ldr	r2, [pc, #480]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b40:	430b      	orrs	r3, r1
 8009b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b44:	e003      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009b5a:	f04f 0b00 	mov.w	fp, #0
 8009b5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009b62:	d04c      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b6e:	d030      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b74:	d829      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009b76:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b78:	d02d      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009b7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b7c:	d825      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009b7e:	2b80      	cmp	r3, #128	@ 0x80
 8009b80:	d018      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009b82:	2b80      	cmp	r3, #128	@ 0x80
 8009b84:	d821      	bhi.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009b8a:	2b40      	cmp	r3, #64	@ 0x40
 8009b8c:	d007      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009b8e:	e01c      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b90:	4b63      	ldr	r3, [pc, #396]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	4a62      	ldr	r2, [pc, #392]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e01c      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f001 fbe6 	bl	800b378 <RCCEx_PLL2_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009bb2:	e011      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb8:	3328      	adds	r3, #40	@ 0x28
 8009bba:	2100      	movs	r1, #0
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 fc8d 	bl	800b4dc <RCCEx_PLL3_Config>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009bc8:	e006      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bd0:	e002      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009bd2:	bf00      	nop
 8009bd4:	e000      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009be0:	4b4f      	ldr	r3, [pc, #316]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bee:	4a4c      	ldr	r2, [pc, #304]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009bf4:	e003      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009c0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009c14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	d053      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009c26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c2a:	d035      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c30:	d82e      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c36:	d031      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009c38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c3c:	d828      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c42:	d01a      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c48:	d822      	bhi.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009c4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c52:	d007      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009c54:	e01c      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c56:	4b32      	ldr	r3, [pc, #200]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5a:	4a31      	ldr	r2, [pc, #196]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c62:	e01c      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	3308      	adds	r3, #8
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fb83 	bl	800b378 <RCCEx_PLL2_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c78:	e011      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7e:	3328      	adds	r3, #40	@ 0x28
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 fc2a 	bl	800b4dc <RCCEx_PLL3_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c8e:	e006      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c96:	e002      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10b      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009caa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cbc:	e003      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009cd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009cdc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	d056      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cf2:	d038      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cf8:	d831      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009cfa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009cfe:	d034      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009d00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d04:	d82b      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d0a:	d01d      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009d0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d10:	d825      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d1a:	d00a      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009d1c:	e01f      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d1e:	bf00      	nop
 8009d20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d24:	4ba2      	ldr	r3, [pc, #648]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	4aa1      	ldr	r2, [pc, #644]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d30:	e01c      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d36:	3308      	adds	r3, #8
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 fb1c 	bl	800b378 <RCCEx_PLL2_Config>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d46:	e011      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4c:	3328      	adds	r3, #40	@ 0x28
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fbc3 	bl	800b4dc <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d5c:	e006      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d64:	e002      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009d66:	bf00      	nop
 8009d68:	e000      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10b      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d74:	4b8e      	ldr	r3, [pc, #568]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d84:	4a8a      	ldr	r2, [pc, #552]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d8a:	e003      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009daa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009dae:	460b      	mov	r3, r1
 8009db0:	4313      	orrs	r3, r2
 8009db2:	d03a      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dba:	2b30      	cmp	r3, #48	@ 0x30
 8009dbc:	d01f      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009dbe:	2b30      	cmp	r3, #48	@ 0x30
 8009dc0:	d819      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d00c      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	d815      	bhi.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d019      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d111      	bne.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd2:	4b77      	ldr	r3, [pc, #476]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd6:	4a76      	ldr	r2, [pc, #472]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009dde:	e011      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de4:	3308      	adds	r3, #8
 8009de6:	2102      	movs	r1, #2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 fac5 	bl	800b378 <RCCEx_PLL2_Config>
 8009dee:	4603      	mov	r3, r0
 8009df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009df4:	e006      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dfc:	e002      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009dfe:	bf00      	nop
 8009e00:	e000      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e0c:	4b68      	ldr	r3, [pc, #416]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1a:	4a65      	ldr	r2, [pc, #404]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e1c:	430b      	orrs	r3, r1
 8009e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e20:	e003      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4313      	orrs	r3, r2
 8009e48:	d051      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e54:	d035      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e5a:	d82e      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009e5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e60:	d031      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009e62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e66:	d828      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e6c:	d01a      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e72:	d822      	bhi.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e7c:	d007      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009e7e:	e01c      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e80:	4b4b      	ldr	r3, [pc, #300]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e84:	4a4a      	ldr	r2, [pc, #296]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009e8c:	e01c      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e92:	3308      	adds	r3, #8
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fa6e 	bl	800b378 <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ea2:	e011      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea8:	3328      	adds	r3, #40	@ 0x28
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f001 fb15 	bl	800b4dc <RCCEx_PLL3_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009eb8:	e006      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ec0:	e002      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009ec2:	bf00      	nop
 8009ec4:	e000      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10a      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ed0:	4b37      	ldr	r3, [pc, #220]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ede:	4a34      	ldr	r2, [pc, #208]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ee4:	e003      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009efe:	2300      	movs	r3, #0
 8009f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	d056      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f18:	d033      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009f1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f1e:	d82c      	bhi.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f24:	d02f      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009f26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f2a:	d826      	bhi.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f30:	d02b      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009f32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f36:	d820      	bhi.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f3c:	d012      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009f3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f42:	d81a      	bhi.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d022      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f4c:	d115      	bne.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f52:	3308      	adds	r3, #8
 8009f54:	2101      	movs	r1, #1
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 fa0e 	bl	800b378 <RCCEx_PLL2_Config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f62:	e015      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f68:	3328      	adds	r3, #40	@ 0x28
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fab5 	bl	800b4dc <RCCEx_PLL3_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f78:	e00a      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f80:	e006      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009f82:	bf00      	nop
 8009f84:	e004      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009f86:	bf00      	nop
 8009f88:	e002      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009f8a:	bf00      	nop
 8009f8c:	e000      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10d      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f98:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa6:	4a02      	ldr	r2, [pc, #8]	@ (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fac:	e006      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009fae:	bf00      	nop
 8009fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009fd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	d055      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fe8:	d033      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fee:	d82c      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ff4:	d02f      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ffa:	d826      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ffc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a000:	d02b      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a002:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a006:	d820      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a00c:	d012      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a00e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a012:	d81a      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a014:	2b00      	cmp	r3, #0
 800a016:	d022      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a01c:	d115      	bne.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a022:	3308      	adds	r3, #8
 800a024:	2101      	movs	r1, #1
 800a026:	4618      	mov	r0, r3
 800a028:	f001 f9a6 	bl	800b378 <RCCEx_PLL2_Config>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a032:	e015      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a038:	3328      	adds	r3, #40	@ 0x28
 800a03a:	2101      	movs	r1, #1
 800a03c:	4618      	mov	r0, r3
 800a03e:	f001 fa4d 	bl	800b4dc <RCCEx_PLL3_Config>
 800a042:	4603      	mov	r3, r0
 800a044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a048:	e00a      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a050:	e006      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a052:	bf00      	nop
 800a054:	e004      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a056:	bf00      	nop
 800a058:	e002      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a05a:	bf00      	nop
 800a05c:	e000      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10b      	bne.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a068:	4ba3      	ldr	r3, [pc, #652]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a06c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a078:	4a9f      	ldr	r2, [pc, #636]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a07a:	430b      	orrs	r3, r1
 800a07c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a07e:	e003      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a09e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	d037      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0b2:	d00e      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a0b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0b8:	d816      	bhi.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d018      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a0be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0c2:	d111      	bne.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c4:	4b8c      	ldr	r3, [pc, #560]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c8:	4a8b      	ldr	r2, [pc, #556]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a0d0:	e00f      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	2101      	movs	r1, #1
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f001 f94c 	bl	800b378 <RCCEx_PLL2_Config>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a0e6:	e004      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0ee:	e000      	b.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10a      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a0fa:	4b7f      	ldr	r3, [pc, #508]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a108:	4a7b      	ldr	r2, [pc, #492]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10a:	430b      	orrs	r3, r1
 800a10c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a128:	2300      	movs	r3, #0
 800a12a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a12e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	d039      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d81c      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a142:	a201      	add	r2, pc, #4	@ (adr r2, 800a148 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a185 	.word	0x0800a185
 800a14c:	0800a159 	.word	0x0800a159
 800a150:	0800a167 	.word	0x0800a167
 800a154:	0800a185 	.word	0x0800a185
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a158:	4b67      	ldr	r3, [pc, #412]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15c:	4a66      	ldr	r2, [pc, #408]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a15e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a164:	e00f      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16a:	3308      	adds	r3, #8
 800a16c:	2102      	movs	r1, #2
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 f902 	bl	800b378 <RCCEx_PLL2_Config>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a17a:	e004      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a182:	e000      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a18e:	4b5a      	ldr	r3, [pc, #360]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a192:	f023 0103 	bic.w	r1, r3, #3
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a19c:	4a56      	ldr	r2, [pc, #344]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1a2:	e003      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a1b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a1c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	f000 809f 	beq.w	800a30c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1ce:	4b4b      	ldr	r3, [pc, #300]	@ (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a4a      	ldr	r2, [pc, #296]	@ (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a1d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1da:	f7f8 fbeb 	bl	80029b4 <HAL_GetTick>
 800a1de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1e2:	e00b      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1e4:	f7f8 fbe6 	bl	80029b4 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	2b64      	cmp	r3, #100	@ 0x64
 800a1f2:	d903      	bls.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1fa:	e005      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1fc:	4b3f      	ldr	r3, [pc, #252]	@ (800a2fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a204:	2b00      	cmp	r3, #0
 800a206:	d0ed      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d179      	bne.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a210:	4b39      	ldr	r3, [pc, #228]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a212:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a21c:	4053      	eors	r3, r2
 800a21e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a222:	2b00      	cmp	r3, #0
 800a224:	d015      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a226:	4b34      	ldr	r3, [pc, #208]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a22a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a22e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a232:	4b31      	ldr	r3, [pc, #196]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a236:	4a30      	ldr	r2, [pc, #192]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a23c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a23e:	4b2e      	ldr	r3, [pc, #184]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a242:	4a2d      	ldr	r2, [pc, #180]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a248:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a24a:	4a2b      	ldr	r2, [pc, #172]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a24c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a250:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a25e:	d118      	bne.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a260:	f7f8 fba8 	bl	80029b4 <HAL_GetTick>
 800a264:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a268:	e00d      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a26a:	f7f8 fba3 	bl	80029b4 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a274:	1ad2      	subs	r2, r2, r3
 800a276:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d903      	bls.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a284:	e005      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a286:	4b1c      	ldr	r3, [pc, #112]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0eb      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a296:	2b00      	cmp	r3, #0
 800a298:	d129      	bne.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2aa:	d10e      	bne.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a2ac:	4b12      	ldr	r3, [pc, #72]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2bc:	091a      	lsrs	r2, r3, #4
 800a2be:	4b10      	ldr	r3, [pc, #64]	@ (800a300 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6113      	str	r3, [r2, #16]
 800a2c8:	e005      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a2d4:	6113      	str	r3, [r2, #16]
 800a2d6:	4b08      	ldr	r3, [pc, #32]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2e6:	4a04      	ldr	r2, [pc, #16]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2e8:	430b      	orrs	r3, r1
 800a2ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2ec:	e00e      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a2f6:	e009      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	58024800 	.word	0x58024800
 800a300:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f002 0301 	and.w	r3, r2, #1
 800a318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a31c:	2300      	movs	r3, #0
 800a31e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a322:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	f000 8089 	beq.w	800a440 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a334:	2b28      	cmp	r3, #40	@ 0x28
 800a336:	d86b      	bhi.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a338:	a201      	add	r2, pc, #4	@ (adr r2, 800a340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a419 	.word	0x0800a419
 800a344:	0800a411 	.word	0x0800a411
 800a348:	0800a411 	.word	0x0800a411
 800a34c:	0800a411 	.word	0x0800a411
 800a350:	0800a411 	.word	0x0800a411
 800a354:	0800a411 	.word	0x0800a411
 800a358:	0800a411 	.word	0x0800a411
 800a35c:	0800a411 	.word	0x0800a411
 800a360:	0800a3e5 	.word	0x0800a3e5
 800a364:	0800a411 	.word	0x0800a411
 800a368:	0800a411 	.word	0x0800a411
 800a36c:	0800a411 	.word	0x0800a411
 800a370:	0800a411 	.word	0x0800a411
 800a374:	0800a411 	.word	0x0800a411
 800a378:	0800a411 	.word	0x0800a411
 800a37c:	0800a411 	.word	0x0800a411
 800a380:	0800a3fb 	.word	0x0800a3fb
 800a384:	0800a411 	.word	0x0800a411
 800a388:	0800a411 	.word	0x0800a411
 800a38c:	0800a411 	.word	0x0800a411
 800a390:	0800a411 	.word	0x0800a411
 800a394:	0800a411 	.word	0x0800a411
 800a398:	0800a411 	.word	0x0800a411
 800a39c:	0800a411 	.word	0x0800a411
 800a3a0:	0800a419 	.word	0x0800a419
 800a3a4:	0800a411 	.word	0x0800a411
 800a3a8:	0800a411 	.word	0x0800a411
 800a3ac:	0800a411 	.word	0x0800a411
 800a3b0:	0800a411 	.word	0x0800a411
 800a3b4:	0800a411 	.word	0x0800a411
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a419 	.word	0x0800a419
 800a3c4:	0800a411 	.word	0x0800a411
 800a3c8:	0800a411 	.word	0x0800a411
 800a3cc:	0800a411 	.word	0x0800a411
 800a3d0:	0800a411 	.word	0x0800a411
 800a3d4:	0800a411 	.word	0x0800a411
 800a3d8:	0800a411 	.word	0x0800a411
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a419 	.word	0x0800a419
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 ffc3 	bl	800b378 <RCCEx_PLL2_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a3f8:	e00f      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3fe:	3328      	adds	r3, #40	@ 0x28
 800a400:	2101      	movs	r1, #1
 800a402:	4618      	mov	r0, r3
 800a404:	f001 f86a 	bl	800b4dc <RCCEx_PLL3_Config>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a40e:	e004      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a416:	e000      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10a      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a422:	4bbf      	ldr	r3, [pc, #764]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a426:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a42e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a430:	4abb      	ldr	r2, [pc, #748]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a432:	430b      	orrs	r3, r1
 800a434:	6553      	str	r3, [r2, #84]	@ 0x54
 800a436:	e003      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a43c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f002 0302 	and.w	r3, r2, #2
 800a44c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a450:	2300      	movs	r3, #0
 800a452:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a456:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a45a:	460b      	mov	r3, r1
 800a45c:	4313      	orrs	r3, r2
 800a45e:	d041      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a466:	2b05      	cmp	r3, #5
 800a468:	d824      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a46a:	a201      	add	r2, pc, #4	@ (adr r2, 800a470 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a4bd 	.word	0x0800a4bd
 800a474:	0800a489 	.word	0x0800a489
 800a478:	0800a49f 	.word	0x0800a49f
 800a47c:	0800a4bd 	.word	0x0800a4bd
 800a480:	0800a4bd 	.word	0x0800a4bd
 800a484:	0800a4bd 	.word	0x0800a4bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48c:	3308      	adds	r3, #8
 800a48e:	2101      	movs	r1, #1
 800a490:	4618      	mov	r0, r3
 800a492:	f000 ff71 	bl	800b378 <RCCEx_PLL2_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a49c:	e00f      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a2:	3328      	adds	r3, #40	@ 0x28
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 f818 	bl	800b4dc <RCCEx_PLL3_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4b2:	e004      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4ba:	e000      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a4bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4c6:	4b96      	ldr	r3, [pc, #600]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ca:	f023 0107 	bic.w	r1, r3, #7
 800a4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4d4:	4a92      	ldr	r2, [pc, #584]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a4da:	e003      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 0304 	and.w	r3, r2, #4
 800a4f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	d044      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a50c:	2b05      	cmp	r3, #5
 800a50e:	d825      	bhi.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a510:	a201      	add	r2, pc, #4	@ (adr r2, 800a518 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a565 	.word	0x0800a565
 800a51c:	0800a531 	.word	0x0800a531
 800a520:	0800a547 	.word	0x0800a547
 800a524:	0800a565 	.word	0x0800a565
 800a528:	0800a565 	.word	0x0800a565
 800a52c:	0800a565 	.word	0x0800a565
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a534:	3308      	adds	r3, #8
 800a536:	2101      	movs	r1, #1
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 ff1d 	bl	800b378 <RCCEx_PLL2_Config>
 800a53e:	4603      	mov	r3, r0
 800a540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a544:	e00f      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54a:	3328      	adds	r3, #40	@ 0x28
 800a54c:	2101      	movs	r1, #1
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 ffc4 	bl	800b4dc <RCCEx_PLL3_Config>
 800a554:	4603      	mov	r3, r0
 800a556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a55a:	e004      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a562:	e000      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a564:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10b      	bne.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a56e:	4b6c      	ldr	r3, [pc, #432]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a572:	f023 0107 	bic.w	r1, r3, #7
 800a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a57a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a57e:	4a68      	ldr	r2, [pc, #416]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a580:	430b      	orrs	r3, r1
 800a582:	6593      	str	r3, [r2, #88]	@ 0x58
 800a584:	e003      	b.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a58a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f002 0320 	and.w	r3, r2, #32
 800a59a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	d055      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5ba:	d033      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a5bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5c0:	d82c      	bhi.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5c6:	d02f      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5cc:	d826      	bhi.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a5ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a5d2:	d02b      	beq.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a5d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a5d8:	d820      	bhi.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a5da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5de:	d012      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a5e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e4:	d81a      	bhi.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d022      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a5ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5ee:	d115      	bne.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 febd 	bl	800b378 <RCCEx_PLL2_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a604:	e015      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60a:	3328      	adds	r3, #40	@ 0x28
 800a60c:	2102      	movs	r1, #2
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 ff64 	bl	800b4dc <RCCEx_PLL3_Config>
 800a614:	4603      	mov	r3, r0
 800a616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a61a:	e00a      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a622:	e006      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a624:	bf00      	nop
 800a626:	e004      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a628:	bf00      	nop
 800a62a:	e002      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a62c:	bf00      	nop
 800a62e:	e000      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a63a:	4b39      	ldr	r3, [pc, #228]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a64a:	4a35      	ldr	r2, [pc, #212]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a64c:	430b      	orrs	r3, r1
 800a64e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a650:	e003      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a66a:	2300      	movs	r3, #0
 800a66c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a670:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a674:	460b      	mov	r3, r1
 800a676:	4313      	orrs	r3, r2
 800a678:	d058      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a682:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a686:	d033      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a688:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a68c:	d82c      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a68e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a692:	d02f      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a698:	d826      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a69a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a69e:	d02b      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a6a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6a4:	d820      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6aa:	d012      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a6ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6b0:	d81a      	bhi.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d022      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a6b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ba:	d115      	bne.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fe57 	bl	800b378 <RCCEx_PLL2_Config>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a6d0:	e015      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6d6:	3328      	adds	r3, #40	@ 0x28
 800a6d8:	2102      	movs	r1, #2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fefe 	bl	800b4dc <RCCEx_PLL3_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a6e6:	e00a      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6ee:	e006      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a6f0:	bf00      	nop
 800a6f2:	e004      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a6f4:	bf00      	nop
 800a6f6:	e002      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a6f8:	bf00      	nop
 800a6fa:	e000      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10e      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a706:	4b06      	ldr	r3, [pc, #24]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a716:	4a02      	ldr	r2, [pc, #8]	@ (800a720 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a718:	430b      	orrs	r3, r1
 800a71a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a71c:	e006      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a71e:	bf00      	nop
 800a720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a73c:	2300      	movs	r3, #0
 800a73e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a742:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a746:	460b      	mov	r3, r1
 800a748:	4313      	orrs	r3, r2
 800a74a:	d055      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a754:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a758:	d033      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a75a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a75e:	d82c      	bhi.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a764:	d02f      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a766:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a76a:	d826      	bhi.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a76c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a770:	d02b      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a772:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a776:	d820      	bhi.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a778:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a77c:	d012      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a77e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a782:	d81a      	bhi.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a784:	2b00      	cmp	r3, #0
 800a786:	d022      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a78c:	d115      	bne.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a792:	3308      	adds	r3, #8
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fdee 	bl	800b378 <RCCEx_PLL2_Config>
 800a79c:	4603      	mov	r3, r0
 800a79e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7a2:	e015      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a8:	3328      	adds	r3, #40	@ 0x28
 800a7aa:	2102      	movs	r1, #2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fe95 	bl	800b4dc <RCCEx_PLL3_Config>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7b8:	e00a      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7c0:	e006      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a7c2:	bf00      	nop
 800a7c4:	e004      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a7c6:	bf00      	nop
 800a7c8:	e002      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a7ca:	bf00      	nop
 800a7cc:	e000      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a7ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10b      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a7d8:	4ba1      	ldr	r3, [pc, #644]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7dc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7e8:	4a9d      	ldr	r2, [pc, #628]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7ea:	430b      	orrs	r3, r1
 800a7ec:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7ee:	e003      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	f002 0308 	and.w	r3, r2, #8
 800a804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a808:	2300      	movs	r3, #0
 800a80a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a80e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a812:	460b      	mov	r3, r1
 800a814:	4313      	orrs	r3, r2
 800a816:	d01e      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a824:	d10c      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a82a:	3328      	adds	r3, #40	@ 0x28
 800a82c:	2102      	movs	r1, #2
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fe54 	bl	800b4dc <RCCEx_PLL3_Config>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a840:	4b87      	ldr	r3, [pc, #540]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a844:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a850:	4a83      	ldr	r2, [pc, #524]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a852:	430b      	orrs	r3, r1
 800a854:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f002 0310 	and.w	r3, r2, #16
 800a862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a86c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a870:	460b      	mov	r3, r1
 800a872:	4313      	orrs	r3, r2
 800a874:	d01e      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a87a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a87e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a882:	d10c      	bne.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a888:	3328      	adds	r3, #40	@ 0x28
 800a88a:	2102      	movs	r1, #2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fe25 	bl	800b4dc <RCCEx_PLL3_Config>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a89e:	4b70      	ldr	r3, [pc, #448]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ae:	4a6c      	ldr	r2, [pc, #432]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a8c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	d03e      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e0:	d022      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a8e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e6:	d81b      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a8ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f0:	d00b      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a8f2:	e015      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fd3b 	bl	800b378 <RCCEx_PLL2_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a908:	e00f      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90e:	3328      	adds	r3, #40	@ 0x28
 800a910:	2102      	movs	r1, #2
 800a912:	4618      	mov	r0, r3
 800a914:	f000 fde2 	bl	800b4dc <RCCEx_PLL3_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a91e:	e004      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a926:	e000      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a92a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a932:	4b4b      	ldr	r3, [pc, #300]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a936:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a942:	4a47      	ldr	r2, [pc, #284]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a944:	430b      	orrs	r3, r1
 800a946:	6593      	str	r3, [r2, #88]	@ 0x58
 800a948:	e003      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a94e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a95e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a960:	2300      	movs	r3, #0
 800a962:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a964:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a968:	460b      	mov	r3, r1
 800a96a:	4313      	orrs	r3, r2
 800a96c:	d03b      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a976:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a97a:	d01f      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a97c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a980:	d818      	bhi.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a986:	d003      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a988:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a98c:	d007      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a98e:	e011      	b.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a990:	4b33      	ldr	r3, [pc, #204]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a994:	4a32      	ldr	r2, [pc, #200]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a99a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a99c:	e00f      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a2:	3328      	adds	r3, #40	@ 0x28
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 fd98 	bl	800b4dc <RCCEx_PLL3_Config>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9b2:	e004      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9ba:	e000      	b.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10b      	bne.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9c6:	4b26      	ldr	r3, [pc, #152]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9d6:	4a22      	ldr	r2, [pc, #136]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9dc:	e003      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a9f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a9f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	d034      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aa0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa10:	d007      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aa12:	e011      	b.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa14:	4b12      	ldr	r3, [pc, #72]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa18:	4a11      	ldr	r2, [pc, #68]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa20:	e00e      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	3308      	adds	r3, #8
 800aa28:	2102      	movs	r1, #2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fca4 	bl	800b378 <RCCEx_PLL2_Config>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa36:	e003      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10d      	bne.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa48:	4b05      	ldr	r3, [pc, #20]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa56:	4a02      	ldr	r2, [pc, #8]	@ (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa5c:	e006      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aa5e:	bf00      	nop
 800aa60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800aa78:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa7e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800aa82:	460b      	mov	r3, r1
 800aa84:	4313      	orrs	r3, r2
 800aa86:	d00c      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa8c:	3328      	adds	r3, #40	@ 0x28
 800aa8e:	2102      	movs	r1, #2
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fd23 	bl	800b4dc <RCCEx_PLL3_Config>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aaae:	663b      	str	r3, [r7, #96]	@ 0x60
 800aab0:	2300      	movs	r3, #0
 800aab2:	667b      	str	r3, [r7, #100]	@ 0x64
 800aab4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800aab8:	460b      	mov	r3, r1
 800aaba:	4313      	orrs	r3, r2
 800aabc:	d038      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaca:	d018      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800aacc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aad0:	d811      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aad6:	d014      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aadc:	d80b      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d011      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800aae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aae6:	d106      	bne.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae8:	4bc3      	ldr	r3, [pc, #780]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	4ac2      	ldr	r2, [pc, #776]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aaf4:	e008      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aafc:	e004      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aafe:	bf00      	nop
 800ab00:	e002      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab02:	bf00      	nop
 800ab04:	e000      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10b      	bne.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab10:	4bb9      	ldr	r3, [pc, #740]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab20:	4ab5      	ldr	r2, [pc, #724]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab22:	430b      	orrs	r3, r1
 800ab24:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab26:	e003      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ab3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab3e:	2300      	movs	r3, #0
 800ab40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab42:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ab46:	460b      	mov	r3, r1
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	d009      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab4c:	4baa      	ldr	r3, [pc, #680]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab5a:	4aa7      	ldr	r2, [pc, #668]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ab6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab6e:	2300      	movs	r3, #0
 800ab70:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ab76:	460b      	mov	r3, r1
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	d00a      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ab7c:	4b9e      	ldr	r3, [pc, #632]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ab84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ab8c:	4a9a      	ldr	r2, [pc, #616]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab8e:	430b      	orrs	r3, r1
 800ab90:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ab9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba0:	2300      	movs	r3, #0
 800aba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aba4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aba8:	460b      	mov	r3, r1
 800abaa:	4313      	orrs	r3, r2
 800abac:	d009      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800abae:	4b92      	ldr	r3, [pc, #584]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abb2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abbc:	4a8e      	ldr	r2, [pc, #568]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abbe:	430b      	orrs	r3, r1
 800abc0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800abce:	643b      	str	r3, [r7, #64]	@ 0x40
 800abd0:	2300      	movs	r3, #0
 800abd2:	647b      	str	r3, [r7, #68]	@ 0x44
 800abd4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800abd8:	460b      	mov	r3, r1
 800abda:	4313      	orrs	r3, r2
 800abdc:	d00e      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800abde:	4b86      	ldr	r3, [pc, #536]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	4a85      	ldr	r2, [pc, #532]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abe4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800abe8:	6113      	str	r3, [r2, #16]
 800abea:	4b83      	ldr	r3, [pc, #524]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abec:	6919      	ldr	r1, [r3, #16]
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800abf6:	4a80      	ldr	r2, [pc, #512]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abf8:	430b      	orrs	r3, r1
 800abfa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800abfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ac08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac0e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ac12:	460b      	mov	r3, r1
 800ac14:	4313      	orrs	r3, r2
 800ac16:	d009      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac18:	4b77      	ldr	r3, [pc, #476]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac1c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ac20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac26:	4a74      	ldr	r2, [pc, #464]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ac38:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac3e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ac42:	460b      	mov	r3, r1
 800ac44:	4313      	orrs	r3, r2
 800ac46:	d00a      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac48:	4b6b      	ldr	r3, [pc, #428]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ac50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac58:	4a67      	ldr	r2, [pc, #412]	@ (800adf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac5a:	430b      	orrs	r3, r1
 800ac5c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ac5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	2100      	movs	r1, #0
 800ac68:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac70:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ac74:	460b      	mov	r3, r1
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d011      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac7e:	3308      	adds	r3, #8
 800ac80:	2100      	movs	r1, #0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fb78 	bl	800b378 <RCCEx_PLL2_Config>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ac8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	2100      	movs	r1, #0
 800aca8:	6239      	str	r1, [r7, #32]
 800acaa:	f003 0302 	and.w	r3, r3, #2
 800acae:	627b      	str	r3, [r7, #36]	@ 0x24
 800acb0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800acb4:	460b      	mov	r3, r1
 800acb6:	4313      	orrs	r3, r2
 800acb8:	d011      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acbe:	3308      	adds	r3, #8
 800acc0:	2101      	movs	r1, #1
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fb58 	bl	800b378 <RCCEx_PLL2_Config>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800acce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800acde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	2100      	movs	r1, #0
 800ace8:	61b9      	str	r1, [r7, #24]
 800acea:	f003 0304 	and.w	r3, r3, #4
 800acee:	61fb      	str	r3, [r7, #28]
 800acf0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800acf4:	460b      	mov	r3, r1
 800acf6:	4313      	orrs	r3, r2
 800acf8:	d011      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfe:	3308      	adds	r3, #8
 800ad00:	2102      	movs	r1, #2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fb38 	bl	800b378 <RCCEx_PLL2_Config>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ad1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	2100      	movs	r1, #0
 800ad28:	6139      	str	r1, [r7, #16]
 800ad2a:	f003 0308 	and.w	r3, r3, #8
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ad34:	460b      	mov	r3, r1
 800ad36:	4313      	orrs	r3, r2
 800ad38:	d011      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad3e:	3328      	adds	r3, #40	@ 0x28
 800ad40:	2100      	movs	r1, #0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 fbca 	bl	800b4dc <RCCEx_PLL3_Config>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ad4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ad5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	2100      	movs	r1, #0
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	f003 0310 	and.w	r3, r3, #16
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ad74:	460b      	mov	r3, r1
 800ad76:	4313      	orrs	r3, r2
 800ad78:	d011      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad7e:	3328      	adds	r3, #40	@ 0x28
 800ad80:	2101      	movs	r1, #1
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fbaa 	bl	800b4dc <RCCEx_PLL3_Config>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ad9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	2100      	movs	r1, #0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	f003 0320 	and.w	r3, r3, #32
 800adae:	607b      	str	r3, [r7, #4]
 800adb0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800adb4:	460b      	mov	r3, r1
 800adb6:	4313      	orrs	r3, r2
 800adb8:	d011      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adbe:	3328      	adds	r3, #40	@ 0x28
 800adc0:	2102      	movs	r1, #2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fb8a 	bl	800b4dc <RCCEx_PLL3_Config>
 800adc8:	4603      	mov	r3, r0
 800adca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800adce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800adde:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d101      	bne.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	e000      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
}
 800adec:	4618      	mov	r0, r3
 800adee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800adf2:	46bd      	mov	sp, r7
 800adf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adf8:	58024400 	.word	0x58024400

0800adfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ae00:	f7fe fd54 	bl	80098ac <HAL_RCC_GetHCLKFreq>
 800ae04:	4602      	mov	r2, r0
 800ae06:	4b06      	ldr	r3, [pc, #24]	@ (800ae20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	091b      	lsrs	r3, r3, #4
 800ae0c:	f003 0307 	and.w	r3, r3, #7
 800ae10:	4904      	ldr	r1, [pc, #16]	@ (800ae24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ae12:	5ccb      	ldrb	r3, [r1, r3]
 800ae14:	f003 031f 	and.w	r3, r3, #31
 800ae18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	58024400 	.word	0x58024400
 800ae24:	0801a8cc 	.word	0x0801a8cc

0800ae28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b089      	sub	sp, #36	@ 0x24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae30:	4ba1      	ldr	r3, [pc, #644]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ae3a:	4b9f      	ldr	r3, [pc, #636]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3e:	0b1b      	lsrs	r3, r3, #12
 800ae40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae46:	4b9c      	ldr	r3, [pc, #624]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4a:	091b      	lsrs	r3, r3, #4
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae52:	4b99      	ldr	r3, [pc, #612]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae56:	08db      	lsrs	r3, r3, #3
 800ae58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 8111 	beq.w	800b098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	f000 8083 	beq.w	800af84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	f200 80a1 	bhi.w	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d056      	beq.n	800af40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae92:	e099      	b.n	800afc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae94:	4b88      	ldr	r3, [pc, #544]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 0320 	and.w	r3, r3, #32
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d02d      	beq.n	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aea0:	4b85      	ldr	r3, [pc, #532]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	08db      	lsrs	r3, r3, #3
 800aea6:	f003 0303 	and.w	r3, r3, #3
 800aeaa:	4a84      	ldr	r2, [pc, #528]	@ (800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aeac:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	4b7b      	ldr	r3, [pc, #492]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeda:	ed97 6a03 	vldr	s12, [r7, #12]
 800aede:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aefa:	e087      	b.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800af0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0e:	4b6a      	ldr	r3, [pc, #424]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af3e:	e065      	b.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af52:	4b59      	ldr	r3, [pc, #356]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	ed97 6a03 	vldr	s12, [r7, #12]
 800af66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af82:	e043      	b.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b0cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af96:	4b48      	ldr	r3, [pc, #288]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afaa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afc6:	e021      	b.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800afd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afda:	4b37      	ldr	r3, [pc, #220]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe2:	ee07 3a90 	vmov	s15, r3
 800afe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afea:	ed97 6a03 	vldr	s12, [r7, #12]
 800afee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800affe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b002:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b00a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b00c:	4b2a      	ldr	r3, [pc, #168]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b010:	0a5b      	lsrs	r3, r3, #9
 800b012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b022:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b026:	edd7 6a07 	vldr	s13, [r7, #28]
 800b02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b02e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b032:	ee17 2a90 	vmov	r2, s15
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b03a:	4b1f      	ldr	r3, [pc, #124]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b050:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b054:	edd7 6a07 	vldr	s13, [r7, #28]
 800b058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b05c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b060:	ee17 2a90 	vmov	r2, s15
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b068:	4b13      	ldr	r3, [pc, #76]	@ (800b0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06c:	0e1b      	lsrs	r3, r3, #24
 800b06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b072:	ee07 3a90 	vmov	s15, r3
 800b076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b07a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b07e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b082:	edd7 6a07 	vldr	s13, [r7, #28]
 800b086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b08a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b08e:	ee17 2a90 	vmov	r2, s15
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b096:	e008      	b.n	800b0aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	609a      	str	r2, [r3, #8]
}
 800b0aa:	bf00      	nop
 800b0ac:	3724      	adds	r7, #36	@ 0x24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	03d09000 	.word	0x03d09000
 800b0c0:	46000000 	.word	0x46000000
 800b0c4:	4c742400 	.word	0x4c742400
 800b0c8:	4a742400 	.word	0x4a742400
 800b0cc:	4bbebc20 	.word	0x4bbebc20

0800b0d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b089      	sub	sp, #36	@ 0x24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0d8:	4ba1      	ldr	r3, [pc, #644]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0dc:	f003 0303 	and.w	r3, r3, #3
 800b0e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0e2:	4b9f      	ldr	r3, [pc, #636]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e6:	0d1b      	lsrs	r3, r3, #20
 800b0e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0ee:	4b9c      	ldr	r3, [pc, #624]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f2:	0a1b      	lsrs	r3, r3, #8
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0fa:	4b99      	ldr	r3, [pc, #612]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0fe:	08db      	lsrs	r3, r3, #3
 800b100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	fb02 f303 	mul.w	r3, r2, r3
 800b10a:	ee07 3a90 	vmov	s15, r3
 800b10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8111 	beq.w	800b340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b02      	cmp	r3, #2
 800b122:	f000 8083 	beq.w	800b22c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	f200 80a1 	bhi.w	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d056      	beq.n	800b1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b13a:	e099      	b.n	800b270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b13c:	4b88      	ldr	r3, [pc, #544]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0320 	and.w	r3, r3, #32
 800b144:	2b00      	cmp	r3, #0
 800b146:	d02d      	beq.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b148:	4b85      	ldr	r3, [pc, #532]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	08db      	lsrs	r3, r3, #3
 800b14e:	f003 0303 	and.w	r3, r3, #3
 800b152:	4a84      	ldr	r2, [pc, #528]	@ (800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b154:	fa22 f303 	lsr.w	r3, r2, r3
 800b158:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	ee07 3a90 	vmov	s15, r3
 800b160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b172:	4b7b      	ldr	r3, [pc, #492]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b182:	ed97 6a03 	vldr	s12, [r7, #12]
 800b186:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1a2:	e087      	b.n	800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	ee07 3a90 	vmov	s15, r3
 800b1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b36c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b1b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b6:	4b6a      	ldr	r3, [pc, #424]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1e6:	e065      	b.n	800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	ee07 3a90 	vmov	s15, r3
 800b1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1fa:	4b59      	ldr	r3, [pc, #356]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b202:	ee07 3a90 	vmov	s15, r3
 800b206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b20a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b20e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b21a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b22a:	e043      	b.n	800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	ee07 3a90 	vmov	s15, r3
 800b232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b236:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b23e:	4b48      	ldr	r3, [pc, #288]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b252:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b25e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b26e:	e021      	b.n	800b2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	ee07 3a90 	vmov	s15, r3
 800b276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b282:	4b37      	ldr	r3, [pc, #220]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b292:	ed97 6a03 	vldr	s12, [r7, #12]
 800b296:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b2b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b8:	0a5b      	lsrs	r3, r3, #9
 800b2ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2da:	ee17 2a90 	vmov	r2, s15
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2e2:	4b1f      	ldr	r3, [pc, #124]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e6:	0c1b      	lsrs	r3, r3, #16
 800b2e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b308:	ee17 2a90 	vmov	r2, s15
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b310:	4b13      	ldr	r3, [pc, #76]	@ (800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b314:	0e1b      	lsrs	r3, r3, #24
 800b316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b32a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b32e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b336:	ee17 2a90 	vmov	r2, s15
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b33e:	e008      	b.n	800b352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	609a      	str	r2, [r3, #8]
}
 800b352:	bf00      	nop
 800b354:	3724      	adds	r7, #36	@ 0x24
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	58024400 	.word	0x58024400
 800b364:	03d09000 	.word	0x03d09000
 800b368:	46000000 	.word	0x46000000
 800b36c:	4c742400 	.word	0x4c742400
 800b370:	4a742400 	.word	0x4a742400
 800b374:	4bbebc20 	.word	0x4bbebc20

0800b378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b386:	4b53      	ldr	r3, [pc, #332]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d101      	bne.n	800b396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e099      	b.n	800b4ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b396:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a4e      	ldr	r2, [pc, #312]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b39c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3a2:	f7f7 fb07 	bl	80029b4 <HAL_GetTick>
 800b3a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3a8:	e008      	b.n	800b3bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b3aa:	f7f7 fb03 	bl	80029b4 <HAL_GetTick>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d901      	bls.n	800b3bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3b8:	2303      	movs	r3, #3
 800b3ba:	e086      	b.n	800b4ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3bc:	4b45      	ldr	r3, [pc, #276]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1f0      	bne.n	800b3aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3c8:	4b42      	ldr	r3, [pc, #264]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	031b      	lsls	r3, r3, #12
 800b3d6:	493f      	ldr	r1, [pc, #252]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	025b      	lsls	r3, r3, #9
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	041b      	lsls	r3, r3, #16
 800b3fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b3fe:	431a      	orrs	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	3b01      	subs	r3, #1
 800b406:	061b      	lsls	r3, r3, #24
 800b408:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b40c:	4931      	ldr	r1, [pc, #196]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b412:	4b30      	ldr	r3, [pc, #192]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b416:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	492d      	ldr	r1, [pc, #180]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b420:	4313      	orrs	r3, r2
 800b422:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b424:	4b2b      	ldr	r3, [pc, #172]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b428:	f023 0220 	bic.w	r2, r3, #32
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	4928      	ldr	r1, [pc, #160]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b432:	4313      	orrs	r3, r2
 800b434:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b436:	4b27      	ldr	r3, [pc, #156]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	4a26      	ldr	r2, [pc, #152]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b43c:	f023 0310 	bic.w	r3, r3, #16
 800b440:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b442:	4b24      	ldr	r3, [pc, #144]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b446:	4b24      	ldr	r3, [pc, #144]	@ (800b4d8 <RCCEx_PLL2_Config+0x160>)
 800b448:	4013      	ands	r3, r2
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	69d2      	ldr	r2, [r2, #28]
 800b44e:	00d2      	lsls	r2, r2, #3
 800b450:	4920      	ldr	r1, [pc, #128]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b452:	4313      	orrs	r3, r2
 800b454:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b456:	4b1f      	ldr	r3, [pc, #124]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	f043 0310 	orr.w	r3, r3, #16
 800b460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d106      	bne.n	800b476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b468:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46c:	4a19      	ldr	r2, [pc, #100]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b46e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b474:	e00f      	b.n	800b496 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d106      	bne.n	800b48a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b47c:	4b15      	ldr	r3, [pc, #84]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b480:	4a14      	ldr	r2, [pc, #80]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b482:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b486:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b488:	e005      	b.n	800b496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b48a:	4b12      	ldr	r3, [pc, #72]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48e:	4a11      	ldr	r2, [pc, #68]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b494:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b496:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a0e      	ldr	r2, [pc, #56]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b49c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b4a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4a2:	f7f7 fa87 	bl	80029b4 <HAL_GetTick>
 800b4a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4a8:	e008      	b.n	800b4bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4aa:	f7f7 fa83 	bl	80029b4 <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d901      	bls.n	800b4bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e006      	b.n	800b4ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4bc:	4b05      	ldr	r3, [pc, #20]	@ (800b4d4 <RCCEx_PLL2_Config+0x15c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0f0      	beq.n	800b4aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	58024400 	.word	0x58024400
 800b4d8:	ffff0007 	.word	0xffff0007

0800b4dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ea:	4b53      	ldr	r3, [pc, #332]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d101      	bne.n	800b4fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e099      	b.n	800b62e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a4e      	ldr	r2, [pc, #312]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b500:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b506:	f7f7 fa55 	bl	80029b4 <HAL_GetTick>
 800b50a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b50c:	e008      	b.n	800b520 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b50e:	f7f7 fa51 	bl	80029b4 <HAL_GetTick>
 800b512:	4602      	mov	r2, r0
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d901      	bls.n	800b520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e086      	b.n	800b62e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b520:	4b45      	ldr	r3, [pc, #276]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1f0      	bne.n	800b50e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b52c:	4b42      	ldr	r3, [pc, #264]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b530:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	051b      	lsls	r3, r3, #20
 800b53a:	493f      	ldr	r1, [pc, #252]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	3b01      	subs	r3, #1
 800b546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	3b01      	subs	r3, #1
 800b550:	025b      	lsls	r3, r3, #9
 800b552:	b29b      	uxth	r3, r3
 800b554:	431a      	orrs	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	041b      	lsls	r3, r3, #16
 800b55e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	3b01      	subs	r3, #1
 800b56a:	061b      	lsls	r3, r3, #24
 800b56c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b570:	4931      	ldr	r1, [pc, #196]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b572:	4313      	orrs	r3, r2
 800b574:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b576:	4b30      	ldr	r3, [pc, #192]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	492d      	ldr	r1, [pc, #180]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b584:	4313      	orrs	r3, r2
 800b586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b588:	4b2b      	ldr	r3, [pc, #172]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	4928      	ldr	r1, [pc, #160]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b596:	4313      	orrs	r3, r2
 800b598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b59a:	4b27      	ldr	r3, [pc, #156]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b59e:	4a26      	ldr	r2, [pc, #152]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5a6:	4b24      	ldr	r3, [pc, #144]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5aa:	4b24      	ldr	r3, [pc, #144]	@ (800b63c <RCCEx_PLL3_Config+0x160>)
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	69d2      	ldr	r2, [r2, #28]
 800b5b2:	00d2      	lsls	r2, r2, #3
 800b5b4:	4920      	ldr	r1, [pc, #128]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5be:	4a1e      	ldr	r2, [pc, #120]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d0:	4a19      	ldr	r2, [pc, #100]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b5d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5d8:	e00f      	b.n	800b5fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d106      	bne.n	800b5ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5e0:	4b15      	ldr	r3, [pc, #84]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	4a14      	ldr	r2, [pc, #80]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b5ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5ec:	e005      	b.n	800b5fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5ee:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	4a11      	ldr	r2, [pc, #68]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b606:	f7f7 f9d5 	bl	80029b4 <HAL_GetTick>
 800b60a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b60c:	e008      	b.n	800b620 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b60e:	f7f7 f9d1 	bl	80029b4 <HAL_GetTick>
 800b612:	4602      	mov	r2, r0
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d901      	bls.n	800b620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e006      	b.n	800b62e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b620:	4b05      	ldr	r3, [pc, #20]	@ (800b638 <RCCEx_PLL3_Config+0x15c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0f0      	beq.n	800b60e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	58024400 	.word	0x58024400
 800b63c:	ffff0007 	.word	0xffff0007

0800b640 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e10f      	b.n	800b872 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a87      	ldr	r2, [pc, #540]	@ (800b87c <HAL_SPI_Init+0x23c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00f      	beq.n	800b682 <HAL_SPI_Init+0x42>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a86      	ldr	r2, [pc, #536]	@ (800b880 <HAL_SPI_Init+0x240>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00a      	beq.n	800b682 <HAL_SPI_Init+0x42>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a84      	ldr	r2, [pc, #528]	@ (800b884 <HAL_SPI_Init+0x244>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d005      	beq.n	800b682 <HAL_SPI_Init+0x42>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	2b0f      	cmp	r3, #15
 800b67c:	d901      	bls.n	800b682 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e0f7      	b.n	800b872 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fbbc 	bl	800be00 <SPI_GetPacketSize>
 800b688:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a7b      	ldr	r2, [pc, #492]	@ (800b87c <HAL_SPI_Init+0x23c>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00c      	beq.n	800b6ae <HAL_SPI_Init+0x6e>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a79      	ldr	r2, [pc, #484]	@ (800b880 <HAL_SPI_Init+0x240>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d007      	beq.n	800b6ae <HAL_SPI_Init+0x6e>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a78      	ldr	r2, [pc, #480]	@ (800b884 <HAL_SPI_Init+0x244>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d002      	beq.n	800b6ae <HAL_SPI_Init+0x6e>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b08      	cmp	r3, #8
 800b6ac:	d811      	bhi.n	800b6d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6b2:	4a72      	ldr	r2, [pc, #456]	@ (800b87c <HAL_SPI_Init+0x23c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d009      	beq.n	800b6cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a70      	ldr	r2, [pc, #448]	@ (800b880 <HAL_SPI_Init+0x240>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d004      	beq.n	800b6cc <HAL_SPI_Init+0x8c>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a6f      	ldr	r2, [pc, #444]	@ (800b884 <HAL_SPI_Init+0x244>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d104      	bne.n	800b6d6 <HAL_SPI_Init+0x96>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b10      	cmp	r3, #16
 800b6d0:	d901      	bls.n	800b6d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e0cd      	b.n	800b872 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7f6 fd5e 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 0201 	bic.w	r2, r2, #1
 800b706:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b712:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b71c:	d119      	bne.n	800b752 <HAL_SPI_Init+0x112>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b726:	d103      	bne.n	800b730 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d008      	beq.n	800b742 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10c      	bne.n	800b752 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b73c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b740:	d107      	bne.n	800b752 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00f      	beq.n	800b77e <HAL_SPI_Init+0x13e>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	2b06      	cmp	r3, #6
 800b764:	d90b      	bls.n	800b77e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e007      	b.n	800b78e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b78c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69da      	ldr	r2, [r3, #28]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b796:	431a      	orrs	r2, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a0:	ea42 0103 	orr.w	r1, r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7ee:	ea42 0103 	orr.w	r1, r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d113      	bne.n	800b82e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b818:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b82c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 0201 	bic.w	r2, r2, #1
 800b83c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	430a      	orrs	r2, r1
 800b85e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40013000 	.word	0x40013000
 800b880:	40003800 	.word	0x40003800
 800b884:	40003c00 	.word	0x40003c00

0800b888 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	4613      	mov	r3, r2
 800b896:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3320      	adds	r3, #32
 800b89e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8a0:	f7f7 f888 	bl	80029b4 <HAL_GetTick>
 800b8a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d001      	beq.n	800b8b6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	e1d1      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <HAL_SPI_Transmit+0x3a>
 800b8bc:	88fb      	ldrh	r3, [r7, #6]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e1c9      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d101      	bne.n	800b8d4 <HAL_SPI_Transmit+0x4c>
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	e1c2      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2203      	movs	r2, #3
 800b8e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	88fa      	ldrh	r2, [r7, #6]
 800b8f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	88fa      	ldrh	r2, [r7, #6]
 800b8fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b92c:	d108      	bne.n	800b940 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	e009      	b.n	800b954 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b952:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	4b96      	ldr	r3, [pc, #600]	@ (800bbb4 <HAL_SPI_Transmit+0x32c>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	88f9      	ldrh	r1, [r7, #6]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	6812      	ldr	r2, [r2, #0]
 800b964:	430b      	orrs	r3, r1
 800b966:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0201 	orr.w	r2, r2, #1
 800b976:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b980:	d107      	bne.n	800b992 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b990:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	2b0f      	cmp	r3, #15
 800b998:	d947      	bls.n	800ba2a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b99a:	e03f      	b.n	800ba1c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d114      	bne.n	800b9d4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6812      	ldr	r2, [r2, #0]
 800b9b4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ba:	1d1a      	adds	r2, r3, #4
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b9d2:	e023      	b.n	800ba1c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9d4:	f7f6 ffee 	bl	80029b4 <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d803      	bhi.n	800b9ec <HAL_SPI_Transmit+0x164>
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d102      	bne.n	800b9f2 <HAL_SPI_Transmit+0x16a>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d114      	bne.n	800ba1c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 f936 	bl	800bc64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e11e      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1b9      	bne.n	800b99c <HAL_SPI_Transmit+0x114>
 800ba28:	e0f1      	b.n	800bc0e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	2b07      	cmp	r3, #7
 800ba30:	f240 80e6 	bls.w	800bc00 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ba34:	e05d      	b.n	800baf2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d132      	bne.n	800baaa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d918      	bls.n	800ba82 <HAL_SPI_Transmit+0x1fa>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d014      	beq.n	800ba82 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba68:	1d1a      	adds	r2, r3, #4
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	3b02      	subs	r3, #2
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba80:	e037      	b.n	800baf2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba86:	881a      	ldrh	r2, [r3, #0]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba90:	1c9a      	adds	r2, r3, #2
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800baa8:	e023      	b.n	800baf2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baaa:	f7f6 ff83 	bl	80029b4 <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d803      	bhi.n	800bac2 <HAL_SPI_Transmit+0x23a>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac0:	d102      	bne.n	800bac8 <HAL_SPI_Transmit+0x240>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d114      	bne.n	800baf2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f8cb 	bl	800bc64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bad4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e0b3      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d19b      	bne.n	800ba36 <HAL_SPI_Transmit+0x1ae>
 800bafe:	e086      	b.n	800bc0e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d154      	bne.n	800bbb8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d918      	bls.n	800bb4c <HAL_SPI_Transmit+0x2c4>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb1e:	2b40      	cmp	r3, #64	@ 0x40
 800bb20:	d914      	bls.n	800bb4c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6812      	ldr	r2, [r2, #0]
 800bb2c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb32:	1d1a      	adds	r2, r3, #4
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	3b04      	subs	r3, #4
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb4a:	e059      	b.n	800bc00 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d917      	bls.n	800bb88 <HAL_SPI_Transmit+0x300>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d013      	beq.n	800bb88 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb64:	881a      	ldrh	r2, [r3, #0]
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb6e:	1c9a      	adds	r2, r3, #2
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b02      	subs	r3, #2
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb86:	e03b      	b.n	800bc00 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3320      	adds	r3, #32
 800bb92:	7812      	ldrb	r2, [r2, #0]
 800bb94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbb2:	e025      	b.n	800bc00 <HAL_SPI_Transmit+0x378>
 800bbb4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbb8:	f7f6 fefc 	bl	80029b4 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d803      	bhi.n	800bbd0 <HAL_SPI_Transmit+0x348>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbce:	d102      	bne.n	800bbd6 <HAL_SPI_Transmit+0x34e>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d114      	bne.n	800bc00 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 f844 	bl	800bc64 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbe2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e02c      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f47f af79 	bne.w	800bb00 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2200      	movs	r2, #0
 800bc16:	2108      	movs	r1, #8
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f8c3 	bl	800bda4 <SPI_WaitOnFlagUntilTimeout>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d007      	beq.n	800bc34 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc2a:	f043 0220 	orr.w	r2, r3, #32
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 f815 	bl	800bc64 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e000      	b.n	800bc5a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bc58:	2300      	movs	r3, #0
  }
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop

0800bc64 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	699a      	ldr	r2, [r3, #24]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f042 0208 	orr.w	r2, r2, #8
 800bc82:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	699a      	ldr	r2, [r3, #24]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0210 	orr.w	r2, r2, #16
 800bc92:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 0201 	bic.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6919      	ldr	r1, [r3, #16]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b3c      	ldr	r3, [pc, #240]	@ (800bda0 <SPI_CloseTransfer+0x13c>)
 800bcb0:	400b      	ands	r3, r1
 800bcb2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	689a      	ldr	r2, [r3, #8]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bcc2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d014      	beq.n	800bcfa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f003 0320 	and.w	r3, r3, #32
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00f      	beq.n	800bcfa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bce0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	699a      	ldr	r2, [r3, #24]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f042 0220 	orr.w	r2, r2, #32
 800bcf8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d014      	beq.n	800bd30 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00f      	beq.n	800bd30 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd16:	f043 0204 	orr.w	r2, r3, #4
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd2e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00f      	beq.n	800bd5a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd40:	f043 0201 	orr.w	r2, r3, #1
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	699a      	ldr	r2, [r3, #24]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd58:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00f      	beq.n	800bd84 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd6a:	f043 0208 	orr.w	r2, r3, #8
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	699a      	ldr	r2, [r3, #24]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bd82:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	fffffc90 	.word	0xfffffc90

0800bda4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bdb4:	e010      	b.n	800bdd8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdb6:	f7f6 fdfd 	bl	80029b4 <HAL_GetTick>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d803      	bhi.n	800bdce <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdcc:	d102      	bne.n	800bdd4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e00f      	b.n	800bdf8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	695a      	ldr	r2, [r3, #20]
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	4013      	ands	r3, r2
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	bf0c      	ite	eq
 800bde8:	2301      	moveq	r3, #1
 800bdea:	2300      	movne	r3, #0
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d0df      	beq.n	800bdb6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be0c:	095b      	lsrs	r3, r3, #5
 800be0e:	3301      	adds	r3, #1
 800be10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	3307      	adds	r3, #7
 800be1e:	08db      	lsrs	r3, r3, #3
 800be20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	fb02 f303 	mul.w	r3, r2, r3
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e049      	b.n	800bedc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7f6 fa33 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2202      	movs	r2, #2
 800be66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3304      	adds	r3, #4
 800be72:	4619      	mov	r1, r3
 800be74:	4610      	mov	r0, r2
 800be76:	f000 fd87 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d001      	beq.n	800befc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e054      	b.n	800bfa6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0201 	orr.w	r2, r2, #1
 800bf12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a26      	ldr	r2, [pc, #152]	@ (800bfb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d022      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf26:	d01d      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a22      	ldr	r2, [pc, #136]	@ (800bfb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d018      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a21      	ldr	r2, [pc, #132]	@ (800bfbc <HAL_TIM_Base_Start_IT+0xd8>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d013      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a1f      	ldr	r2, [pc, #124]	@ (800bfc0 <HAL_TIM_Base_Start_IT+0xdc>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d00e      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a1e      	ldr	r2, [pc, #120]	@ (800bfc4 <HAL_TIM_Base_Start_IT+0xe0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d009      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a1c      	ldr	r2, [pc, #112]	@ (800bfc8 <HAL_TIM_Base_Start_IT+0xe4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d004      	beq.n	800bf64 <HAL_TIM_Base_Start_IT+0x80>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a1b      	ldr	r2, [pc, #108]	@ (800bfcc <HAL_TIM_Base_Start_IT+0xe8>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d115      	bne.n	800bf90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	689a      	ldr	r2, [r3, #8]
 800bf6a:	4b19      	ldr	r3, [pc, #100]	@ (800bfd0 <HAL_TIM_Base_Start_IT+0xec>)
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b06      	cmp	r3, #6
 800bf74:	d015      	beq.n	800bfa2 <HAL_TIM_Base_Start_IT+0xbe>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf7c:	d011      	beq.n	800bfa2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f042 0201 	orr.w	r2, r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf8e:	e008      	b.n	800bfa2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f042 0201 	orr.w	r2, r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]
 800bfa0:	e000      	b.n	800bfa4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	40010000 	.word	0x40010000
 800bfb8:	40000400 	.word	0x40000400
 800bfbc:	40000800 	.word	0x40000800
 800bfc0:	40000c00 	.word	0x40000c00
 800bfc4:	40010400 	.word	0x40010400
 800bfc8:	40001800 	.word	0x40001800
 800bfcc:	40014000 	.word	0x40014000
 800bfd0:	00010007 	.word	0x00010007

0800bfd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f022 0201 	bic.w	r2, r2, #1
 800bfea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6a1a      	ldr	r2, [r3, #32]
 800bff2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bff6:	4013      	ands	r3, r2
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d10f      	bne.n	800c01c <HAL_TIM_Base_Stop_IT+0x48>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6a1a      	ldr	r2, [r3, #32]
 800c002:	f240 4344 	movw	r3, #1092	@ 0x444
 800c006:	4013      	ands	r3, r2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d107      	bne.n	800c01c <HAL_TIM_Base_Stop_IT+0x48>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f022 0201 	bic.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e049      	b.n	800c0d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d106      	bne.n	800c05e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f841 	bl	800c0e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2202      	movs	r2, #2
 800c062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3304      	adds	r3, #4
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f000 fc89 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d109      	bne.n	800c118 <HAL_TIM_PWM_Start+0x24>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	bf14      	ite	ne
 800c110:	2301      	movne	r3, #1
 800c112:	2300      	moveq	r3, #0
 800c114:	b2db      	uxtb	r3, r3
 800c116:	e03c      	b.n	800c192 <HAL_TIM_PWM_Start+0x9e>
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	d109      	bne.n	800c132 <HAL_TIM_PWM_Start+0x3e>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b01      	cmp	r3, #1
 800c128:	bf14      	ite	ne
 800c12a:	2301      	movne	r3, #1
 800c12c:	2300      	moveq	r3, #0
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	e02f      	b.n	800c192 <HAL_TIM_PWM_Start+0x9e>
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b08      	cmp	r3, #8
 800c136:	d109      	bne.n	800c14c <HAL_TIM_PWM_Start+0x58>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b01      	cmp	r3, #1
 800c142:	bf14      	ite	ne
 800c144:	2301      	movne	r3, #1
 800c146:	2300      	moveq	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	e022      	b.n	800c192 <HAL_TIM_PWM_Start+0x9e>
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b0c      	cmp	r3, #12
 800c150:	d109      	bne.n	800c166 <HAL_TIM_PWM_Start+0x72>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	bf14      	ite	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	2300      	moveq	r3, #0
 800c162:	b2db      	uxtb	r3, r3
 800c164:	e015      	b.n	800c192 <HAL_TIM_PWM_Start+0x9e>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2b10      	cmp	r3, #16
 800c16a:	d109      	bne.n	800c180 <HAL_TIM_PWM_Start+0x8c>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b01      	cmp	r3, #1
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	e008      	b.n	800c192 <HAL_TIM_PWM_Start+0x9e>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	bf14      	ite	ne
 800c18c:	2301      	movne	r3, #1
 800c18e:	2300      	moveq	r3, #0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e0a1      	b.n	800c2de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d104      	bne.n	800c1aa <HAL_TIM_PWM_Start+0xb6>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1a8:	e023      	b.n	800c1f2 <HAL_TIM_PWM_Start+0xfe>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d104      	bne.n	800c1ba <HAL_TIM_PWM_Start+0xc6>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1b8:	e01b      	b.n	800c1f2 <HAL_TIM_PWM_Start+0xfe>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d104      	bne.n	800c1ca <HAL_TIM_PWM_Start+0xd6>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1c8:	e013      	b.n	800c1f2 <HAL_TIM_PWM_Start+0xfe>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b0c      	cmp	r3, #12
 800c1ce:	d104      	bne.n	800c1da <HAL_TIM_PWM_Start+0xe6>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c1d8:	e00b      	b.n	800c1f2 <HAL_TIM_PWM_Start+0xfe>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b10      	cmp	r3, #16
 800c1de:	d104      	bne.n	800c1ea <HAL_TIM_PWM_Start+0xf6>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1e8:	e003      	b.n	800c1f2 <HAL_TIM_PWM_Start+0xfe>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 ffde 	bl	800d1bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a38      	ldr	r2, [pc, #224]	@ (800c2e8 <HAL_TIM_PWM_Start+0x1f4>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d013      	beq.n	800c232 <HAL_TIM_PWM_Start+0x13e>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a37      	ldr	r2, [pc, #220]	@ (800c2ec <HAL_TIM_PWM_Start+0x1f8>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d00e      	beq.n	800c232 <HAL_TIM_PWM_Start+0x13e>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a35      	ldr	r2, [pc, #212]	@ (800c2f0 <HAL_TIM_PWM_Start+0x1fc>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d009      	beq.n	800c232 <HAL_TIM_PWM_Start+0x13e>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a34      	ldr	r2, [pc, #208]	@ (800c2f4 <HAL_TIM_PWM_Start+0x200>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d004      	beq.n	800c232 <HAL_TIM_PWM_Start+0x13e>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a32      	ldr	r2, [pc, #200]	@ (800c2f8 <HAL_TIM_PWM_Start+0x204>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d101      	bne.n	800c236 <HAL_TIM_PWM_Start+0x142>
 800c232:	2301      	movs	r3, #1
 800c234:	e000      	b.n	800c238 <HAL_TIM_PWM_Start+0x144>
 800c236:	2300      	movs	r3, #0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d007      	beq.n	800c24c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c24a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a25      	ldr	r2, [pc, #148]	@ (800c2e8 <HAL_TIM_PWM_Start+0x1f4>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d022      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c25e:	d01d      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a25      	ldr	r2, [pc, #148]	@ (800c2fc <HAL_TIM_PWM_Start+0x208>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d018      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a24      	ldr	r2, [pc, #144]	@ (800c300 <HAL_TIM_PWM_Start+0x20c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d013      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a22      	ldr	r2, [pc, #136]	@ (800c304 <HAL_TIM_PWM_Start+0x210>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d00e      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a1a      	ldr	r2, [pc, #104]	@ (800c2ec <HAL_TIM_PWM_Start+0x1f8>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d009      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a1e      	ldr	r2, [pc, #120]	@ (800c308 <HAL_TIM_PWM_Start+0x214>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d004      	beq.n	800c29c <HAL_TIM_PWM_Start+0x1a8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a16      	ldr	r2, [pc, #88]	@ (800c2f0 <HAL_TIM_PWM_Start+0x1fc>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d115      	bne.n	800c2c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	689a      	ldr	r2, [r3, #8]
 800c2a2:	4b1a      	ldr	r3, [pc, #104]	@ (800c30c <HAL_TIM_PWM_Start+0x218>)
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b06      	cmp	r3, #6
 800c2ac:	d015      	beq.n	800c2da <HAL_TIM_PWM_Start+0x1e6>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2b4:	d011      	beq.n	800c2da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f042 0201 	orr.w	r2, r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2c6:	e008      	b.n	800c2da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f042 0201 	orr.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]
 800c2d8:	e000      	b.n	800c2dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	40010000 	.word	0x40010000
 800c2ec:	40010400 	.word	0x40010400
 800c2f0:	40014000 	.word	0x40014000
 800c2f4:	40014400 	.word	0x40014400
 800c2f8:	40014800 	.word	0x40014800
 800c2fc:	40000400 	.word	0x40000400
 800c300:	40000800 	.word	0x40000800
 800c304:	40000c00 	.word	0x40000c00
 800c308:	40001800 	.word	0x40001800
 800c30c:	00010007 	.word	0x00010007

0800c310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d020      	beq.n	800c374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f003 0302 	and.w	r3, r3, #2
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d01b      	beq.n	800c374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f06f 0202 	mvn.w	r2, #2
 800c344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	699b      	ldr	r3, [r3, #24]
 800c352:	f003 0303 	and.w	r3, r3, #3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 faf6 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c360:	e005      	b.n	800c36e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fae8 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 faf9 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f003 0304 	and.w	r3, r3, #4
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d020      	beq.n	800c3c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b00      	cmp	r3, #0
 800c386:	d01b      	beq.n	800c3c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f06f 0204 	mvn.w	r2, #4
 800c390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2202      	movs	r2, #2
 800c396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fad0 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c3ac:	e005      	b.n	800c3ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fac2 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fad3 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	f003 0308 	and.w	r3, r3, #8
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d020      	beq.n	800c40c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f003 0308 	and.w	r3, r3, #8
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01b      	beq.n	800c40c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f06f 0208 	mvn.w	r2, #8
 800c3dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	f003 0303 	and.w	r3, r3, #3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d003      	beq.n	800c3fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 faaa 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c3f8:	e005      	b.n	800c406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa9c 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 faad 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f003 0310 	and.w	r3, r3, #16
 800c412:	2b00      	cmp	r3, #0
 800c414:	d020      	beq.n	800c458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f003 0310 	and.w	r3, r3, #16
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d01b      	beq.n	800c458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f06f 0210 	mvn.w	r2, #16
 800c428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2208      	movs	r2, #8
 800c42e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	69db      	ldr	r3, [r3, #28]
 800c436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa84 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c444:	e005      	b.n	800c452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa76 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fa87 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00c      	beq.n	800c47c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d007      	beq.n	800c47c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f06f 0201 	mvn.w	r2, #1
 800c474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7f5 faaa 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c482:	2b00      	cmp	r3, #0
 800c484:	d104      	bne.n	800c490 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00c      	beq.n	800c4aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c496:	2b00      	cmp	r3, #0
 800c498:	d007      	beq.n	800c4aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c4a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 ffc5 	bl	800d434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00c      	beq.n	800c4ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 ffbd 	bl	800d448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00c      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d007      	beq.n	800c4f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c4ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 fa41 	bl	800c974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	f003 0320 	and.w	r3, r3, #32
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00c      	beq.n	800c516 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f003 0320 	and.w	r3, r3, #32
 800c502:	2b00      	cmp	r3, #0
 800c504:	d007      	beq.n	800c516 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f06f 0220 	mvn.w	r2, #32
 800c50e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 ff85 	bl	800d420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c536:	2b01      	cmp	r3, #1
 800c538:	d101      	bne.n	800c53e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c53a:	2302      	movs	r3, #2
 800c53c:	e0ff      	b.n	800c73e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b14      	cmp	r3, #20
 800c54a:	f200 80f0 	bhi.w	800c72e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c54e:	a201      	add	r2, pc, #4	@ (adr r2, 800c554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c554:	0800c5a9 	.word	0x0800c5a9
 800c558:	0800c72f 	.word	0x0800c72f
 800c55c:	0800c72f 	.word	0x0800c72f
 800c560:	0800c72f 	.word	0x0800c72f
 800c564:	0800c5e9 	.word	0x0800c5e9
 800c568:	0800c72f 	.word	0x0800c72f
 800c56c:	0800c72f 	.word	0x0800c72f
 800c570:	0800c72f 	.word	0x0800c72f
 800c574:	0800c62b 	.word	0x0800c62b
 800c578:	0800c72f 	.word	0x0800c72f
 800c57c:	0800c72f 	.word	0x0800c72f
 800c580:	0800c72f 	.word	0x0800c72f
 800c584:	0800c66b 	.word	0x0800c66b
 800c588:	0800c72f 	.word	0x0800c72f
 800c58c:	0800c72f 	.word	0x0800c72f
 800c590:	0800c72f 	.word	0x0800c72f
 800c594:	0800c6ad 	.word	0x0800c6ad
 800c598:	0800c72f 	.word	0x0800c72f
 800c59c:	0800c72f 	.word	0x0800c72f
 800c5a0:	0800c72f 	.word	0x0800c72f
 800c5a4:	0800c6ed 	.word	0x0800c6ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fa90 	bl	800cad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	699a      	ldr	r2, [r3, #24]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f042 0208 	orr.w	r2, r2, #8
 800c5c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	699a      	ldr	r2, [r3, #24]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0204 	bic.w	r2, r2, #4
 800c5d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6999      	ldr	r1, [r3, #24]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	691a      	ldr	r2, [r3, #16]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	619a      	str	r2, [r3, #24]
      break;
 800c5e6:	e0a5      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68b9      	ldr	r1, [r7, #8]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 fb00 	bl	800cbf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	699a      	ldr	r2, [r3, #24]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	699a      	ldr	r2, [r3, #24]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6999      	ldr	r1, [r3, #24]
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	021a      	lsls	r2, r3, #8
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	619a      	str	r2, [r3, #24]
      break;
 800c628:	e084      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68b9      	ldr	r1, [r7, #8]
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fb69 	bl	800cd08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69da      	ldr	r2, [r3, #28]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0208 	orr.w	r2, r2, #8
 800c644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	69da      	ldr	r2, [r3, #28]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f022 0204 	bic.w	r2, r2, #4
 800c654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69d9      	ldr	r1, [r3, #28]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	691a      	ldr	r2, [r3, #16]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	430a      	orrs	r2, r1
 800c666:	61da      	str	r2, [r3, #28]
      break;
 800c668:	e064      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68b9      	ldr	r1, [r7, #8]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 fbd1 	bl	800ce18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	69da      	ldr	r2, [r3, #28]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69da      	ldr	r2, [r3, #28]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	69d9      	ldr	r1, [r3, #28]
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	021a      	lsls	r2, r3, #8
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	61da      	str	r2, [r3, #28]
      break;
 800c6aa:	e043      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 fc1a 	bl	800ceec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f042 0208 	orr.w	r2, r2, #8
 800c6c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f022 0204 	bic.w	r2, r2, #4
 800c6d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	691a      	ldr	r2, [r3, #16]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	430a      	orrs	r2, r1
 800c6e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6ea:	e023      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fc5e 	bl	800cfb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c706:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c716:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	021a      	lsls	r2, r3, #8
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c72c:	e002      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	75fb      	strb	r3, [r7, #23]
      break;
 800c732:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop

0800c748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_TIM_ConfigClockSource+0x1c>
 800c760:	2302      	movs	r3, #2
 800c762:	e0dc      	b.n	800c91e <HAL_TIM_ConfigClockSource+0x1d6>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	4b6a      	ldr	r3, [pc, #424]	@ (800c928 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c780:	4013      	ands	r3, r2
 800c782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c78a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a64      	ldr	r2, [pc, #400]	@ (800c92c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	f000 80a9 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7a0:	4a62      	ldr	r2, [pc, #392]	@ (800c92c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	f200 80ae 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7a8:	4a61      	ldr	r2, [pc, #388]	@ (800c930 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	f000 80a1 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7b0:	4a5f      	ldr	r2, [pc, #380]	@ (800c930 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	f200 80a6 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b8:	4a5e      	ldr	r2, [pc, #376]	@ (800c934 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	f000 8099 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7c0:	4a5c      	ldr	r2, [pc, #368]	@ (800c934 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	f200 809e 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7cc:	f000 8091 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7d4:	f200 8096 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7dc:	f000 8089 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7e4:	f200 808e 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7ec:	d03e      	beq.n	800c86c <HAL_TIM_ConfigClockSource+0x124>
 800c7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7f2:	f200 8087 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7fa:	f000 8086 	beq.w	800c90a <HAL_TIM_ConfigClockSource+0x1c2>
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c802:	d87f      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c804:	2b70      	cmp	r3, #112	@ 0x70
 800c806:	d01a      	beq.n	800c83e <HAL_TIM_ConfigClockSource+0xf6>
 800c808:	2b70      	cmp	r3, #112	@ 0x70
 800c80a:	d87b      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c80c:	2b60      	cmp	r3, #96	@ 0x60
 800c80e:	d050      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x16a>
 800c810:	2b60      	cmp	r3, #96	@ 0x60
 800c812:	d877      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c814:	2b50      	cmp	r3, #80	@ 0x50
 800c816:	d03c      	beq.n	800c892 <HAL_TIM_ConfigClockSource+0x14a>
 800c818:	2b50      	cmp	r3, #80	@ 0x50
 800c81a:	d873      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c81c:	2b40      	cmp	r3, #64	@ 0x40
 800c81e:	d058      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x18a>
 800c820:	2b40      	cmp	r3, #64	@ 0x40
 800c822:	d86f      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c824:	2b30      	cmp	r3, #48	@ 0x30
 800c826:	d064      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c828:	2b30      	cmp	r3, #48	@ 0x30
 800c82a:	d86b      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c82c:	2b20      	cmp	r3, #32
 800c82e:	d060      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c830:	2b20      	cmp	r3, #32
 800c832:	d867      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c834:	2b00      	cmp	r3, #0
 800c836:	d05c      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c838:	2b10      	cmp	r3, #16
 800c83a:	d05a      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c83c:	e062      	b.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c84e:	f000 fc95 	bl	800d17c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	609a      	str	r2, [r3, #8]
      break;
 800c86a:	e04f      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c87c:	f000 fc7e 	bl	800d17c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689a      	ldr	r2, [r3, #8]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c88e:	609a      	str	r2, [r3, #8]
      break;
 800c890:	e03c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f000 fbee 	bl	800d080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2150      	movs	r1, #80	@ 0x50
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 fc48 	bl	800d140 <TIM_ITRx_SetConfig>
      break;
 800c8b0:	e02c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f000 fc0d 	bl	800d0de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2160      	movs	r1, #96	@ 0x60
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 fc38 	bl	800d140 <TIM_ITRx_SetConfig>
      break;
 800c8d0:	e01c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f000 fbce 	bl	800d080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2140      	movs	r1, #64	@ 0x40
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 fc28 	bl	800d140 <TIM_ITRx_SetConfig>
      break;
 800c8f0:	e00c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f000 fc1f 	bl	800d140 <TIM_ITRx_SetConfig>
      break;
 800c902:	e003      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	73fb      	strb	r3, [r7, #15]
      break;
 800c908:	e000      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c90a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	ffceff88 	.word	0xffceff88
 800c92c:	00100040 	.word	0x00100040
 800c930:	00100030 	.word	0x00100030
 800c934:	00100020 	.word	0x00100020

0800c938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a46      	ldr	r2, [pc, #280]	@ (800cab4 <TIM_Base_SetConfig+0x12c>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d013      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9a6:	d00f      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a43      	ldr	r2, [pc, #268]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d00b      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a42      	ldr	r2, [pc, #264]	@ (800cabc <TIM_Base_SetConfig+0x134>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d007      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a41      	ldr	r2, [pc, #260]	@ (800cac0 <TIM_Base_SetConfig+0x138>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d003      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a40      	ldr	r2, [pc, #256]	@ (800cac4 <TIM_Base_SetConfig+0x13c>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d108      	bne.n	800c9da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a35      	ldr	r2, [pc, #212]	@ (800cab4 <TIM_Base_SetConfig+0x12c>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d01f      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9e8:	d01b      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a32      	ldr	r2, [pc, #200]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d017      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a31      	ldr	r2, [pc, #196]	@ (800cabc <TIM_Base_SetConfig+0x134>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d013      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a30      	ldr	r2, [pc, #192]	@ (800cac0 <TIM_Base_SetConfig+0x138>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d00f      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a2f      	ldr	r2, [pc, #188]	@ (800cac4 <TIM_Base_SetConfig+0x13c>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d00b      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a2e      	ldr	r2, [pc, #184]	@ (800cac8 <TIM_Base_SetConfig+0x140>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d007      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a2d      	ldr	r2, [pc, #180]	@ (800cacc <TIM_Base_SetConfig+0x144>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d003      	beq.n	800ca22 <TIM_Base_SetConfig+0x9a>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a2c      	ldr	r2, [pc, #176]	@ (800cad0 <TIM_Base_SetConfig+0x148>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d108      	bne.n	800ca34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	689a      	ldr	r2, [r3, #8]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a16      	ldr	r2, [pc, #88]	@ (800cab4 <TIM_Base_SetConfig+0x12c>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d00f      	beq.n	800ca80 <TIM_Base_SetConfig+0xf8>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a18      	ldr	r2, [pc, #96]	@ (800cac4 <TIM_Base_SetConfig+0x13c>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d00b      	beq.n	800ca80 <TIM_Base_SetConfig+0xf8>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a17      	ldr	r2, [pc, #92]	@ (800cac8 <TIM_Base_SetConfig+0x140>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d007      	beq.n	800ca80 <TIM_Base_SetConfig+0xf8>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a16      	ldr	r2, [pc, #88]	@ (800cacc <TIM_Base_SetConfig+0x144>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d003      	beq.n	800ca80 <TIM_Base_SetConfig+0xf8>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a15      	ldr	r2, [pc, #84]	@ (800cad0 <TIM_Base_SetConfig+0x148>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d103      	bne.n	800ca88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	691a      	ldr	r2, [r3, #16]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	691b      	ldr	r3, [r3, #16]
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d105      	bne.n	800caa6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	f023 0201 	bic.w	r2, r3, #1
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	611a      	str	r2, [r3, #16]
  }
}
 800caa6:	bf00      	nop
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	40010000 	.word	0x40010000
 800cab8:	40000400 	.word	0x40000400
 800cabc:	40000800 	.word	0x40000800
 800cac0:	40000c00 	.word	0x40000c00
 800cac4:	40010400 	.word	0x40010400
 800cac8:	40014000 	.word	0x40014000
 800cacc:	40014400 	.word	0x40014400
 800cad0:	40014800 	.word	0x40014800

0800cad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b087      	sub	sp, #28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a1b      	ldr	r3, [r3, #32]
 800cae8:	f023 0201 	bic.w	r2, r3, #1
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	4b37      	ldr	r3, [pc, #220]	@ (800cbdc <TIM_OC1_SetConfig+0x108>)
 800cb00:	4013      	ands	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f023 0303 	bic.w	r3, r3, #3
 800cb0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f023 0302 	bic.w	r3, r3, #2
 800cb1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a2d      	ldr	r2, [pc, #180]	@ (800cbe0 <TIM_OC1_SetConfig+0x10c>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d00f      	beq.n	800cb50 <TIM_OC1_SetConfig+0x7c>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a2c      	ldr	r2, [pc, #176]	@ (800cbe4 <TIM_OC1_SetConfig+0x110>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d00b      	beq.n	800cb50 <TIM_OC1_SetConfig+0x7c>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a2b      	ldr	r2, [pc, #172]	@ (800cbe8 <TIM_OC1_SetConfig+0x114>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d007      	beq.n	800cb50 <TIM_OC1_SetConfig+0x7c>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4a2a      	ldr	r2, [pc, #168]	@ (800cbec <TIM_OC1_SetConfig+0x118>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d003      	beq.n	800cb50 <TIM_OC1_SetConfig+0x7c>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a29      	ldr	r2, [pc, #164]	@ (800cbf0 <TIM_OC1_SetConfig+0x11c>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10c      	bne.n	800cb6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f023 0308 	bic.w	r3, r3, #8
 800cb56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f023 0304 	bic.w	r3, r3, #4
 800cb68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a1c      	ldr	r2, [pc, #112]	@ (800cbe0 <TIM_OC1_SetConfig+0x10c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d00f      	beq.n	800cb92 <TIM_OC1_SetConfig+0xbe>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a1b      	ldr	r2, [pc, #108]	@ (800cbe4 <TIM_OC1_SetConfig+0x110>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d00b      	beq.n	800cb92 <TIM_OC1_SetConfig+0xbe>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1a      	ldr	r2, [pc, #104]	@ (800cbe8 <TIM_OC1_SetConfig+0x114>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d007      	beq.n	800cb92 <TIM_OC1_SetConfig+0xbe>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a19      	ldr	r2, [pc, #100]	@ (800cbec <TIM_OC1_SetConfig+0x118>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d003      	beq.n	800cb92 <TIM_OC1_SetConfig+0xbe>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a18      	ldr	r2, [pc, #96]	@ (800cbf0 <TIM_OC1_SetConfig+0x11c>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d111      	bne.n	800cbb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	693a      	ldr	r2, [r7, #16]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	699b      	ldr	r3, [r3, #24]
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	697a      	ldr	r2, [r7, #20]
 800cbce:	621a      	str	r2, [r3, #32]
}
 800cbd0:	bf00      	nop
 800cbd2:	371c      	adds	r7, #28
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	fffeff8f 	.word	0xfffeff8f
 800cbe0:	40010000 	.word	0x40010000
 800cbe4:	40010400 	.word	0x40010400
 800cbe8:	40014000 	.word	0x40014000
 800cbec:	40014400 	.word	0x40014400
 800cbf0:	40014800 	.word	0x40014800

0800cbf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6a1b      	ldr	r3, [r3, #32]
 800cc08:	f023 0210 	bic.w	r2, r3, #16
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	4b34      	ldr	r3, [pc, #208]	@ (800ccf0 <TIM_OC2_SetConfig+0xfc>)
 800cc20:	4013      	ands	r3, r2
 800cc22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	021b      	lsls	r3, r3, #8
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f023 0320 	bic.w	r3, r3, #32
 800cc3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	011b      	lsls	r3, r3, #4
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a29      	ldr	r2, [pc, #164]	@ (800ccf4 <TIM_OC2_SetConfig+0x100>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d003      	beq.n	800cc5c <TIM_OC2_SetConfig+0x68>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a28      	ldr	r2, [pc, #160]	@ (800ccf8 <TIM_OC2_SetConfig+0x104>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d10d      	bne.n	800cc78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	011b      	lsls	r3, r3, #4
 800cc6a:	697a      	ldr	r2, [r7, #20]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a1e      	ldr	r2, [pc, #120]	@ (800ccf4 <TIM_OC2_SetConfig+0x100>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d00f      	beq.n	800cca0 <TIM_OC2_SetConfig+0xac>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a1d      	ldr	r2, [pc, #116]	@ (800ccf8 <TIM_OC2_SetConfig+0x104>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00b      	beq.n	800cca0 <TIM_OC2_SetConfig+0xac>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a1c      	ldr	r2, [pc, #112]	@ (800ccfc <TIM_OC2_SetConfig+0x108>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d007      	beq.n	800cca0 <TIM_OC2_SetConfig+0xac>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a1b      	ldr	r2, [pc, #108]	@ (800cd00 <TIM_OC2_SetConfig+0x10c>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d003      	beq.n	800cca0 <TIM_OC2_SetConfig+0xac>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a1a      	ldr	r2, [pc, #104]	@ (800cd04 <TIM_OC2_SetConfig+0x110>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d113      	bne.n	800ccc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ccae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	699b      	ldr	r3, [r3, #24]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	693a      	ldr	r2, [r7, #16]
 800cccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	621a      	str	r2, [r3, #32]
}
 800cce2:	bf00      	nop
 800cce4:	371c      	adds	r7, #28
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	feff8fff 	.word	0xfeff8fff
 800ccf4:	40010000 	.word	0x40010000
 800ccf8:	40010400 	.word	0x40010400
 800ccfc:	40014000 	.word	0x40014000
 800cd00:	40014400 	.word	0x40014400
 800cd04:	40014800 	.word	0x40014800

0800cd08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a1b      	ldr	r3, [r3, #32]
 800cd1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	69db      	ldr	r3, [r3, #28]
 800cd2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	4b33      	ldr	r3, [pc, #204]	@ (800ce00 <TIM_OC3_SetConfig+0xf8>)
 800cd34:	4013      	ands	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f023 0303 	bic.w	r3, r3, #3
 800cd3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	4313      	orrs	r3, r2
 800cd48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	021b      	lsls	r3, r3, #8
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a28      	ldr	r2, [pc, #160]	@ (800ce04 <TIM_OC3_SetConfig+0xfc>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d003      	beq.n	800cd6e <TIM_OC3_SetConfig+0x66>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a27      	ldr	r2, [pc, #156]	@ (800ce08 <TIM_OC3_SetConfig+0x100>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d10d      	bne.n	800cd8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	697a      	ldr	r2, [r7, #20]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ce04 <TIM_OC3_SetConfig+0xfc>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d00f      	beq.n	800cdb2 <TIM_OC3_SetConfig+0xaa>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a1c      	ldr	r2, [pc, #112]	@ (800ce08 <TIM_OC3_SetConfig+0x100>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d00b      	beq.n	800cdb2 <TIM_OC3_SetConfig+0xaa>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a1b      	ldr	r2, [pc, #108]	@ (800ce0c <TIM_OC3_SetConfig+0x104>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d007      	beq.n	800cdb2 <TIM_OC3_SetConfig+0xaa>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a1a      	ldr	r2, [pc, #104]	@ (800ce10 <TIM_OC3_SetConfig+0x108>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d003      	beq.n	800cdb2 <TIM_OC3_SetConfig+0xaa>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a19      	ldr	r2, [pc, #100]	@ (800ce14 <TIM_OC3_SetConfig+0x10c>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d113      	bne.n	800cdda <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cdc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	011b      	lsls	r3, r3, #4
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	011b      	lsls	r3, r3, #4
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	693a      	ldr	r2, [r7, #16]
 800cdde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	697a      	ldr	r2, [r7, #20]
 800cdf2:	621a      	str	r2, [r3, #32]
}
 800cdf4:	bf00      	nop
 800cdf6:	371c      	adds	r7, #28
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	fffeff8f 	.word	0xfffeff8f
 800ce04:	40010000 	.word	0x40010000
 800ce08:	40010400 	.word	0x40010400
 800ce0c:	40014000 	.word	0x40014000
 800ce10:	40014400 	.word	0x40014400
 800ce14:	40014800 	.word	0x40014800

0800ce18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a1b      	ldr	r3, [r3, #32]
 800ce2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	4b24      	ldr	r3, [pc, #144]	@ (800ced4 <TIM_OC4_SetConfig+0xbc>)
 800ce44:	4013      	ands	r3, r2
 800ce46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	031b      	lsls	r3, r3, #12
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4a19      	ldr	r2, [pc, #100]	@ (800ced8 <TIM_OC4_SetConfig+0xc0>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d00f      	beq.n	800ce98 <TIM_OC4_SetConfig+0x80>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a18      	ldr	r2, [pc, #96]	@ (800cedc <TIM_OC4_SetConfig+0xc4>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d00b      	beq.n	800ce98 <TIM_OC4_SetConfig+0x80>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a17      	ldr	r2, [pc, #92]	@ (800cee0 <TIM_OC4_SetConfig+0xc8>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d007      	beq.n	800ce98 <TIM_OC4_SetConfig+0x80>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a16      	ldr	r2, [pc, #88]	@ (800cee4 <TIM_OC4_SetConfig+0xcc>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d003      	beq.n	800ce98 <TIM_OC4_SetConfig+0x80>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a15      	ldr	r2, [pc, #84]	@ (800cee8 <TIM_OC4_SetConfig+0xd0>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d109      	bne.n	800ceac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	695b      	ldr	r3, [r3, #20]
 800cea4:	019b      	lsls	r3, r3, #6
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	621a      	str	r2, [r3, #32]
}
 800cec6:	bf00      	nop
 800cec8:	371c      	adds	r7, #28
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	feff8fff 	.word	0xfeff8fff
 800ced8:	40010000 	.word	0x40010000
 800cedc:	40010400 	.word	0x40010400
 800cee0:	40014000 	.word	0x40014000
 800cee4:	40014400 	.word	0x40014400
 800cee8:	40014800 	.word	0x40014800

0800ceec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b087      	sub	sp, #28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	4b21      	ldr	r3, [pc, #132]	@ (800cf9c <TIM_OC5_SetConfig+0xb0>)
 800cf18:	4013      	ands	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cf2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	041b      	lsls	r3, r3, #16
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4a18      	ldr	r2, [pc, #96]	@ (800cfa0 <TIM_OC5_SetConfig+0xb4>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d00f      	beq.n	800cf62 <TIM_OC5_SetConfig+0x76>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a17      	ldr	r2, [pc, #92]	@ (800cfa4 <TIM_OC5_SetConfig+0xb8>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d00b      	beq.n	800cf62 <TIM_OC5_SetConfig+0x76>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a16      	ldr	r2, [pc, #88]	@ (800cfa8 <TIM_OC5_SetConfig+0xbc>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d007      	beq.n	800cf62 <TIM_OC5_SetConfig+0x76>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a15      	ldr	r2, [pc, #84]	@ (800cfac <TIM_OC5_SetConfig+0xc0>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d003      	beq.n	800cf62 <TIM_OC5_SetConfig+0x76>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a14      	ldr	r2, [pc, #80]	@ (800cfb0 <TIM_OC5_SetConfig+0xc4>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d109      	bne.n	800cf76 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	021b      	lsls	r3, r3, #8
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	685a      	ldr	r2, [r3, #4]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	693a      	ldr	r2, [r7, #16]
 800cf8e:	621a      	str	r2, [r3, #32]
}
 800cf90:	bf00      	nop
 800cf92:	371c      	adds	r7, #28
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	fffeff8f 	.word	0xfffeff8f
 800cfa0:	40010000 	.word	0x40010000
 800cfa4:	40010400 	.word	0x40010400
 800cfa8:	40014000 	.word	0x40014000
 800cfac:	40014400 	.word	0x40014400
 800cfb0:	40014800 	.word	0x40014800

0800cfb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a1b      	ldr	r3, [r3, #32]
 800cfc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	4b22      	ldr	r3, [pc, #136]	@ (800d068 <TIM_OC6_SetConfig+0xb4>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	021b      	lsls	r3, r3, #8
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	051b      	lsls	r3, r3, #20
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	4313      	orrs	r3, r2
 800d002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4a19      	ldr	r2, [pc, #100]	@ (800d06c <TIM_OC6_SetConfig+0xb8>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d00f      	beq.n	800d02c <TIM_OC6_SetConfig+0x78>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a18      	ldr	r2, [pc, #96]	@ (800d070 <TIM_OC6_SetConfig+0xbc>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d00b      	beq.n	800d02c <TIM_OC6_SetConfig+0x78>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4a17      	ldr	r2, [pc, #92]	@ (800d074 <TIM_OC6_SetConfig+0xc0>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d007      	beq.n	800d02c <TIM_OC6_SetConfig+0x78>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a16      	ldr	r2, [pc, #88]	@ (800d078 <TIM_OC6_SetConfig+0xc4>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d003      	beq.n	800d02c <TIM_OC6_SetConfig+0x78>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a15      	ldr	r2, [pc, #84]	@ (800d07c <TIM_OC6_SetConfig+0xc8>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d109      	bne.n	800d040 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	029b      	lsls	r3, r3, #10
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	621a      	str	r2, [r3, #32]
}
 800d05a:	bf00      	nop
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	feff8fff 	.word	0xfeff8fff
 800d06c:	40010000 	.word	0x40010000
 800d070:	40010400 	.word	0x40010400
 800d074:	40014000 	.word	0x40014000
 800d078:	40014400 	.word	0x40014400
 800d07c:	40014800 	.word	0x40014800

0800d080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d080:	b480      	push	{r7}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6a1b      	ldr	r3, [r3, #32]
 800d090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	f023 0201 	bic.w	r2, r3, #1
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d0aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	693a      	ldr	r2, [r7, #16]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f023 030a 	bic.w	r3, r3, #10
 800d0bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	693a      	ldr	r2, [r7, #16]
 800d0ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	697a      	ldr	r2, [r7, #20]
 800d0d0:	621a      	str	r2, [r3, #32]
}
 800d0d2:	bf00      	nop
 800d0d4:	371c      	adds	r7, #28
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b087      	sub	sp, #28
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	f023 0210 	bic.w	r2, r3, #16
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	031b      	lsls	r3, r3, #12
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	4313      	orrs	r3, r2
 800d112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d11a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	011b      	lsls	r3, r3, #4
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	4313      	orrs	r3, r2
 800d124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	621a      	str	r2, [r3, #32]
}
 800d132:	bf00      	nop
 800d134:	371c      	adds	r7, #28
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
	...

0800d140 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <TIM_ITRx_SetConfig+0x38>)
 800d154:	4013      	ands	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	f043 0307 	orr.w	r3, r3, #7
 800d162:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	609a      	str	r2, [r3, #8]
}
 800d16a:	bf00      	nop
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	ffcfff8f 	.word	0xffcfff8f

0800d17c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	021a      	lsls	r2, r3, #8
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	431a      	orrs	r2, r3
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	609a      	str	r2, [r3, #8]
}
 800d1b0:	bf00      	nop
 800d1b2:	371c      	adds	r7, #28
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f003 031f 	and.w	r3, r3, #31
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6a1a      	ldr	r2, [r3, #32]
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	43db      	mvns	r3, r3
 800d1de:	401a      	ands	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6a1a      	ldr	r2, [r3, #32]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	f003 031f 	and.w	r3, r3, #31
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1f4:	431a      	orrs	r2, r3
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	621a      	str	r2, [r3, #32]
}
 800d1fa:	bf00      	nop
 800d1fc:	371c      	adds	r7, #28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
	...

0800d208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d101      	bne.n	800d220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d21c:	2302      	movs	r3, #2
 800d21e:	e06d      	b.n	800d2fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a30      	ldr	r2, [pc, #192]	@ (800d308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d004      	beq.n	800d254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a2f      	ldr	r2, [pc, #188]	@ (800d30c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d108      	bne.n	800d266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d25a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	4313      	orrs	r3, r2
 800d264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d26c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	4313      	orrs	r3, r2
 800d276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a20      	ldr	r2, [pc, #128]	@ (800d308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d022      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d292:	d01d      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a1d      	ldr	r2, [pc, #116]	@ (800d310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d018      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a1c      	ldr	r2, [pc, #112]	@ (800d314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d013      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a1a      	ldr	r2, [pc, #104]	@ (800d318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d00e      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4a15      	ldr	r2, [pc, #84]	@ (800d30c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d009      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a16      	ldr	r2, [pc, #88]	@ (800d31c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d004      	beq.n	800d2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a15      	ldr	r2, [pc, #84]	@ (800d320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d10c      	bne.n	800d2ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	40010000 	.word	0x40010000
 800d30c:	40010400 	.word	0x40010400
 800d310:	40000400 	.word	0x40000400
 800d314:	40000800 	.word	0x40000800
 800d318:	40000c00 	.word	0x40000c00
 800d31c:	40001800 	.word	0x40001800
 800d320:	40014000 	.word	0x40014000

0800d324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d101      	bne.n	800d340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d33c:	2302      	movs	r3, #2
 800d33e:	e065      	b.n	800d40c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	4313      	orrs	r3, r2
 800d362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	4313      	orrs	r3, r2
 800d370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	4313      	orrs	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	699b      	ldr	r3, [r3, #24]
 800d3b4:	041b      	lsls	r3, r3, #16
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a16      	ldr	r2, [pc, #88]	@ (800d418 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d004      	beq.n	800d3ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a14      	ldr	r2, [pc, #80]	@ (800d41c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d115      	bne.n	800d3fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d8:	051b      	lsls	r3, r3, #20
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	40010000 	.word	0x40010000
 800d41c:	40010400 	.word	0x40010400

0800d420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e042      	b.n	800d4f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7f4 ff9d 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2224      	movs	r2, #36	@ 0x24
 800d48a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f022 0201 	bic.w	r2, r2, #1
 800d49c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 f9b6 	bl	800e818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fc4b 	bl	800dd48 <UART_SetConfig>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d101      	bne.n	800d4bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e01b      	b.n	800d4f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d4ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	689a      	ldr	r2, [r3, #8]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d4da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f042 0201 	orr.w	r2, r2, #1
 800d4ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 fa35 	bl	800e95c <UART_CheckIdleState>
 800d4f2:	4603      	mov	r3, r0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08a      	sub	sp, #40	@ 0x28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d510:	2b20      	cmp	r3, #32
 800d512:	d137      	bne.n	800d584 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d002      	beq.n	800d520 <HAL_UART_Receive_IT+0x24>
 800d51a:	88fb      	ldrh	r3, [r7, #6]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e030      	b.n	800d586 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a18      	ldr	r2, [pc, #96]	@ (800d590 <HAL_UART_Receive_IT+0x94>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d01f      	beq.n	800d574 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d018      	beq.n	800d574 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	e853 3f00 	ldrex	r3, [r3]
 800d54e:	613b      	str	r3, [r7, #16]
   return(result);
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d556:	627b      	str	r3, [r7, #36]	@ 0x24
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	461a      	mov	r2, r3
 800d55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d560:	623b      	str	r3, [r7, #32]
 800d562:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d564:	69f9      	ldr	r1, [r7, #28]
 800d566:	6a3a      	ldr	r2, [r7, #32]
 800d568:	e841 2300 	strex	r3, r2, [r1]
 800d56c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1e6      	bne.n	800d542 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d574:	88fb      	ldrh	r3, [r7, #6]
 800d576:	461a      	mov	r2, r3
 800d578:	68b9      	ldr	r1, [r7, #8]
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f001 fb06 	bl	800eb8c <UART_Start_Receive_IT>
 800d580:	4603      	mov	r3, r0
 800d582:	e000      	b.n	800d586 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d584:	2302      	movs	r3, #2
  }
}
 800d586:	4618      	mov	r0, r3
 800d588:	3728      	adds	r7, #40	@ 0x28
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	58000c00 	.word	0x58000c00

0800d594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b0ba      	sub	sp, #232	@ 0xe8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	69db      	ldr	r3, [r3, #28]
 800d5a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d5ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d5be:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d5c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d11b      	bne.n	800d608 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5d4:	f003 0320 	and.w	r3, r3, #32
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d015      	beq.n	800d608 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5e0:	f003 0320 	and.w	r3, r3, #32
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d105      	bne.n	800d5f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d5e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d5ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d009      	beq.n	800d608 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 8377 	beq.w	800dcec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	4798      	blx	r3
      }
      return;
 800d606:	e371      	b.n	800dcec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 8123 	beq.w	800d858 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d612:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d616:	4b8d      	ldr	r3, [pc, #564]	@ (800d84c <HAL_UART_IRQHandler+0x2b8>)
 800d618:	4013      	ands	r3, r2
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d61e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d622:	4b8b      	ldr	r3, [pc, #556]	@ (800d850 <HAL_UART_IRQHandler+0x2bc>)
 800d624:	4013      	ands	r3, r2
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 8116 	beq.w	800d858 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	2b00      	cmp	r3, #0
 800d636:	d011      	beq.n	800d65c <HAL_UART_IRQHandler+0xc8>
 800d638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d63c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00b      	beq.n	800d65c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2201      	movs	r2, #1
 800d64a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d652:	f043 0201 	orr.w	r2, r3, #1
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d660:	f003 0302 	and.w	r3, r3, #2
 800d664:	2b00      	cmp	r3, #0
 800d666:	d011      	beq.n	800d68c <HAL_UART_IRQHandler+0xf8>
 800d668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00b      	beq.n	800d68c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2202      	movs	r2, #2
 800d67a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d682:	f043 0204 	orr.w	r2, r3, #4
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	d011      	beq.n	800d6bc <HAL_UART_IRQHandler+0x128>
 800d698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d69c:	f003 0301 	and.w	r3, r3, #1
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2204      	movs	r2, #4
 800d6aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6b2:	f043 0202 	orr.w	r2, r3, #2
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c0:	f003 0308 	and.w	r3, r3, #8
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d017      	beq.n	800d6f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6cc:	f003 0320 	and.w	r3, r3, #32
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d105      	bne.n	800d6e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d6d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d6d8:	4b5c      	ldr	r3, [pc, #368]	@ (800d84c <HAL_UART_IRQHandler+0x2b8>)
 800d6da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00b      	beq.n	800d6f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2208      	movs	r2, #8
 800d6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6ee:	f043 0208 	orr.w	r2, r3, #8
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d700:	2b00      	cmp	r3, #0
 800d702:	d012      	beq.n	800d72a <HAL_UART_IRQHandler+0x196>
 800d704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d708:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00c      	beq.n	800d72a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d720:	f043 0220 	orr.w	r2, r3, #32
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d730:	2b00      	cmp	r3, #0
 800d732:	f000 82dd 	beq.w	800dcf0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d73a:	f003 0320 	and.w	r3, r3, #32
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d013      	beq.n	800d76a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d746:	f003 0320 	and.w	r3, r3, #32
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d105      	bne.n	800d75a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d007      	beq.n	800d76a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d003      	beq.n	800d76a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d77e:	2b40      	cmp	r3, #64	@ 0x40
 800d780:	d005      	beq.n	800d78e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d786:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d054      	beq.n	800d838 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f001 fb1e 	bl	800edd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d79e:	2b40      	cmp	r3, #64	@ 0x40
 800d7a0:	d146      	bne.n	800d830 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	3308      	adds	r3, #8
 800d7a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d7b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d7bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d7ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d7d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d7da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d7de:	e841 2300 	strex	r3, r2, [r1]
 800d7e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d7e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1d9      	bne.n	800d7a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d017      	beq.n	800d828 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7fe:	4a15      	ldr	r2, [pc, #84]	@ (800d854 <HAL_UART_IRQHandler+0x2c0>)
 800d800:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f6 f8e1 	bl	80039d0 <HAL_DMA_Abort_IT>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d019      	beq.n	800d848 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d81a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d822:	4610      	mov	r0, r2
 800d824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d826:	e00f      	b.n	800d848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fa77 	bl	800dd1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d82e:	e00b      	b.n	800d848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fa73 	bl	800dd1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d836:	e007      	b.n	800d848 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fa6f 	bl	800dd1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d846:	e253      	b.n	800dcf0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d848:	bf00      	nop
    return;
 800d84a:	e251      	b.n	800dcf0 <HAL_UART_IRQHandler+0x75c>
 800d84c:	10000001 	.word	0x10000001
 800d850:	04000120 	.word	0x04000120
 800d854:	0800ee9d 	.word	0x0800ee9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	f040 81e7 	bne.w	800dc30 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d866:	f003 0310 	and.w	r3, r3, #16
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 81e0 	beq.w	800dc30 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d874:	f003 0310 	and.w	r3, r3, #16
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 81d9 	beq.w	800dc30 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2210      	movs	r2, #16
 800d884:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d890:	2b40      	cmp	r3, #64	@ 0x40
 800d892:	f040 8151 	bne.w	800db38 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a96      	ldr	r2, [pc, #600]	@ (800daf8 <HAL_UART_IRQHandler+0x564>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d068      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a93      	ldr	r2, [pc, #588]	@ (800dafc <HAL_UART_IRQHandler+0x568>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d061      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a91      	ldr	r2, [pc, #580]	@ (800db00 <HAL_UART_IRQHandler+0x56c>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d05a      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a8e      	ldr	r2, [pc, #568]	@ (800db04 <HAL_UART_IRQHandler+0x570>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d053      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a8c      	ldr	r2, [pc, #560]	@ (800db08 <HAL_UART_IRQHandler+0x574>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d04c      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a89      	ldr	r2, [pc, #548]	@ (800db0c <HAL_UART_IRQHandler+0x578>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d045      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a87      	ldr	r2, [pc, #540]	@ (800db10 <HAL_UART_IRQHandler+0x57c>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d03e      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a84      	ldr	r2, [pc, #528]	@ (800db14 <HAL_UART_IRQHandler+0x580>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d037      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a82      	ldr	r2, [pc, #520]	@ (800db18 <HAL_UART_IRQHandler+0x584>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d030      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a7f      	ldr	r2, [pc, #508]	@ (800db1c <HAL_UART_IRQHandler+0x588>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d029      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a7d      	ldr	r2, [pc, #500]	@ (800db20 <HAL_UART_IRQHandler+0x58c>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d022      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a7a      	ldr	r2, [pc, #488]	@ (800db24 <HAL_UART_IRQHandler+0x590>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d01b      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a78      	ldr	r2, [pc, #480]	@ (800db28 <HAL_UART_IRQHandler+0x594>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d014      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a75      	ldr	r2, [pc, #468]	@ (800db2c <HAL_UART_IRQHandler+0x598>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d00d      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a73      	ldr	r2, [pc, #460]	@ (800db30 <HAL_UART_IRQHandler+0x59c>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d006      	beq.n	800d976 <HAL_UART_IRQHandler+0x3e2>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a70      	ldr	r2, [pc, #448]	@ (800db34 <HAL_UART_IRQHandler+0x5a0>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d106      	bne.n	800d984 <HAL_UART_IRQHandler+0x3f0>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	b29b      	uxth	r3, r3
 800d982:	e005      	b.n	800d990 <HAL_UART_IRQHandler+0x3fc>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 81ab 	beq.w	800dcf4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	f080 81a3 	bcs.w	800dcf4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9be:	69db      	ldr	r3, [r3, #28]
 800d9c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9c4:	f000 8087 	beq.w	800dad6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d9d4:	e853 3f00 	ldrex	r3, [r3]
 800d9d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d9dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d9e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d9e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d9f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d9f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d9fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800da02:	e841 2300 	strex	r3, r2, [r1]
 800da06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800da0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1da      	bne.n	800d9c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800da22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da24:	f023 0301 	bic.w	r3, r3, #1
 800da28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3308      	adds	r3, #8
 800da32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800da36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800da3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800da3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800da42:	e841 2300 	strex	r3, r2, [r1]
 800da46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800da48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1e1      	bne.n	800da12 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	3308      	adds	r3, #8
 800da54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da58:	e853 3f00 	ldrex	r3, [r3]
 800da5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800da5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3308      	adds	r3, #8
 800da6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800da72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800da74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800da78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800da80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e3      	bne.n	800da4e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2220      	movs	r2, #32
 800da8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800daa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daa4:	f023 0310 	bic.w	r3, r3, #16
 800daa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	461a      	mov	r2, r3
 800dab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dab6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dab8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dabc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dabe:	e841 2300 	strex	r3, r2, [r1]
 800dac2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1e4      	bne.n	800da94 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7f5 fc5f 	bl	8003394 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2202      	movs	r2, #2
 800dada:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dae8:	b29b      	uxth	r3, r3
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29b      	uxth	r3, r3
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 f91d 	bl	800dd30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800daf6:	e0fd      	b.n	800dcf4 <HAL_UART_IRQHandler+0x760>
 800daf8:	40020010 	.word	0x40020010
 800dafc:	40020028 	.word	0x40020028
 800db00:	40020040 	.word	0x40020040
 800db04:	40020058 	.word	0x40020058
 800db08:	40020070 	.word	0x40020070
 800db0c:	40020088 	.word	0x40020088
 800db10:	400200a0 	.word	0x400200a0
 800db14:	400200b8 	.word	0x400200b8
 800db18:	40020410 	.word	0x40020410
 800db1c:	40020428 	.word	0x40020428
 800db20:	40020440 	.word	0x40020440
 800db24:	40020458 	.word	0x40020458
 800db28:	40020470 	.word	0x40020470
 800db2c:	40020488 	.word	0x40020488
 800db30:	400204a0 	.word	0x400204a0
 800db34:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db44:	b29b      	uxth	r3, r3
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db52:	b29b      	uxth	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	f000 80cf 	beq.w	800dcf8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800db5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f000 80ca 	beq.w	800dcf8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6c:	e853 3f00 	ldrex	r3, [r3]
 800db70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	461a      	mov	r2, r3
 800db82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800db86:	647b      	str	r3, [r7, #68]	@ 0x44
 800db88:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db8e:	e841 2300 	strex	r3, r2, [r1]
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1e4      	bne.n	800db64 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3308      	adds	r3, #8
 800dba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba4:	e853 3f00 	ldrex	r3, [r3]
 800dba8:	623b      	str	r3, [r7, #32]
   return(result);
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	4b55      	ldr	r3, [pc, #340]	@ (800dd04 <HAL_UART_IRQHandler+0x770>)
 800dbae:	4013      	ands	r3, r2
 800dbb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3308      	adds	r3, #8
 800dbba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dbbe:	633a      	str	r2, [r7, #48]	@ 0x30
 800dbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dbc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e3      	bne.n	800db9a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2220      	movs	r2, #32
 800dbd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	e853 3f00 	ldrex	r3, [r3]
 800dbf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f023 0310 	bic.w	r3, r3, #16
 800dbfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	461a      	mov	r2, r3
 800dc04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dc08:	61fb      	str	r3, [r7, #28]
 800dc0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0c:	69b9      	ldr	r1, [r7, #24]
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	e841 2300 	strex	r3, r2, [r1]
 800dc14:	617b      	str	r3, [r7, #20]
   return(result);
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e4      	bne.n	800dbe6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2202      	movs	r2, #2
 800dc20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 f881 	bl	800dd30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc2e:	e063      	b.n	800dcf8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00e      	beq.n	800dc5a <HAL_UART_IRQHandler+0x6c6>
 800dc3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d008      	beq.n	800dc5a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800dc50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f001 fe80 	bl	800f958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc58:	e051      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d014      	beq.n	800dc90 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dc66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d105      	bne.n	800dc7e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dc72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d008      	beq.n	800dc90 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d03a      	beq.n	800dcfc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	4798      	blx	r3
    }
    return;
 800dc8e:	e035      	b.n	800dcfc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <HAL_UART_IRQHandler+0x71c>
 800dc9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d003      	beq.n	800dcb0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f001 f90d 	bl	800eec8 <UART_EndTransmit_IT>
    return;
 800dcae:	e026      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dcb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <HAL_UART_IRQHandler+0x73c>
 800dcbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d003      	beq.n	800dcd0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f001 fe59 	bl	800f980 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcce:	e016      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dcd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dcd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d010      	beq.n	800dcfe <HAL_UART_IRQHandler+0x76a>
 800dcdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	da0c      	bge.n	800dcfe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f001 fe41 	bl	800f96c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcea:	e008      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
      return;
 800dcec:	bf00      	nop
 800dcee:	e006      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
    return;
 800dcf0:	bf00      	nop
 800dcf2:	e004      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
      return;
 800dcf4:	bf00      	nop
 800dcf6:	e002      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
      return;
 800dcf8:	bf00      	nop
 800dcfa:	e000      	b.n	800dcfe <HAL_UART_IRQHandler+0x76a>
    return;
 800dcfc:	bf00      	nop
  }
}
 800dcfe:	37e8      	adds	r7, #232	@ 0xe8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	effffffe 	.word	0xeffffffe

0800dd08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd3c:	bf00      	nop
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd4c:	b092      	sub	sp, #72	@ 0x48
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	689a      	ldr	r2, [r3, #8]
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	691b      	ldr	r3, [r3, #16]
 800dd60:	431a      	orrs	r2, r3
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	695b      	ldr	r3, [r3, #20]
 800dd66:	431a      	orrs	r2, r3
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	69db      	ldr	r3, [r3, #28]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	4bbe      	ldr	r3, [pc, #760]	@ (800e070 <UART_SetConfig+0x328>)
 800dd78:	4013      	ands	r3, r2
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	6812      	ldr	r2, [r2, #0]
 800dd7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dd80:	430b      	orrs	r3, r1
 800dd82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	68da      	ldr	r2, [r3, #12]
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4ab3      	ldr	r2, [pc, #716]	@ (800e074 <UART_SetConfig+0x32c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d004      	beq.n	800ddb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	4baf      	ldr	r3, [pc, #700]	@ (800e078 <UART_SetConfig+0x330>)
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	6812      	ldr	r2, [r2, #0]
 800ddc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ddc4:	430b      	orrs	r3, r1
 800ddc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddce:	f023 010f 	bic.w	r1, r3, #15
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	430a      	orrs	r2, r1
 800dddc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4aa6      	ldr	r2, [pc, #664]	@ (800e07c <UART_SetConfig+0x334>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d177      	bne.n	800ded8 <UART_SetConfig+0x190>
 800dde8:	4ba5      	ldr	r3, [pc, #660]	@ (800e080 <UART_SetConfig+0x338>)
 800ddea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddf0:	2b28      	cmp	r3, #40	@ 0x28
 800ddf2:	d86d      	bhi.n	800ded0 <UART_SetConfig+0x188>
 800ddf4:	a201      	add	r2, pc, #4	@ (adr r2, 800ddfc <UART_SetConfig+0xb4>)
 800ddf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfa:	bf00      	nop
 800ddfc:	0800dea1 	.word	0x0800dea1
 800de00:	0800ded1 	.word	0x0800ded1
 800de04:	0800ded1 	.word	0x0800ded1
 800de08:	0800ded1 	.word	0x0800ded1
 800de0c:	0800ded1 	.word	0x0800ded1
 800de10:	0800ded1 	.word	0x0800ded1
 800de14:	0800ded1 	.word	0x0800ded1
 800de18:	0800ded1 	.word	0x0800ded1
 800de1c:	0800dea9 	.word	0x0800dea9
 800de20:	0800ded1 	.word	0x0800ded1
 800de24:	0800ded1 	.word	0x0800ded1
 800de28:	0800ded1 	.word	0x0800ded1
 800de2c:	0800ded1 	.word	0x0800ded1
 800de30:	0800ded1 	.word	0x0800ded1
 800de34:	0800ded1 	.word	0x0800ded1
 800de38:	0800ded1 	.word	0x0800ded1
 800de3c:	0800deb1 	.word	0x0800deb1
 800de40:	0800ded1 	.word	0x0800ded1
 800de44:	0800ded1 	.word	0x0800ded1
 800de48:	0800ded1 	.word	0x0800ded1
 800de4c:	0800ded1 	.word	0x0800ded1
 800de50:	0800ded1 	.word	0x0800ded1
 800de54:	0800ded1 	.word	0x0800ded1
 800de58:	0800ded1 	.word	0x0800ded1
 800de5c:	0800deb9 	.word	0x0800deb9
 800de60:	0800ded1 	.word	0x0800ded1
 800de64:	0800ded1 	.word	0x0800ded1
 800de68:	0800ded1 	.word	0x0800ded1
 800de6c:	0800ded1 	.word	0x0800ded1
 800de70:	0800ded1 	.word	0x0800ded1
 800de74:	0800ded1 	.word	0x0800ded1
 800de78:	0800ded1 	.word	0x0800ded1
 800de7c:	0800dec1 	.word	0x0800dec1
 800de80:	0800ded1 	.word	0x0800ded1
 800de84:	0800ded1 	.word	0x0800ded1
 800de88:	0800ded1 	.word	0x0800ded1
 800de8c:	0800ded1 	.word	0x0800ded1
 800de90:	0800ded1 	.word	0x0800ded1
 800de94:	0800ded1 	.word	0x0800ded1
 800de98:	0800ded1 	.word	0x0800ded1
 800de9c:	0800dec9 	.word	0x0800dec9
 800dea0:	2301      	movs	r3, #1
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea6:	e222      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dea8:	2304      	movs	r3, #4
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deae:	e21e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800deb0:	2308      	movs	r3, #8
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb6:	e21a      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800deb8:	2310      	movs	r3, #16
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800debe:	e216      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dec0:	2320      	movs	r3, #32
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dec6:	e212      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dec8:	2340      	movs	r3, #64	@ 0x40
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dece:	e20e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800ded0:	2380      	movs	r3, #128	@ 0x80
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ded6:	e20a      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a69      	ldr	r2, [pc, #420]	@ (800e084 <UART_SetConfig+0x33c>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d130      	bne.n	800df44 <UART_SetConfig+0x1fc>
 800dee2:	4b67      	ldr	r3, [pc, #412]	@ (800e080 <UART_SetConfig+0x338>)
 800dee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dee6:	f003 0307 	and.w	r3, r3, #7
 800deea:	2b05      	cmp	r3, #5
 800deec:	d826      	bhi.n	800df3c <UART_SetConfig+0x1f4>
 800deee:	a201      	add	r2, pc, #4	@ (adr r2, 800def4 <UART_SetConfig+0x1ac>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800df0d 	.word	0x0800df0d
 800def8:	0800df15 	.word	0x0800df15
 800defc:	0800df1d 	.word	0x0800df1d
 800df00:	0800df25 	.word	0x0800df25
 800df04:	0800df2d 	.word	0x0800df2d
 800df08:	0800df35 	.word	0x0800df35
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df12:	e1ec      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df14:	2304      	movs	r3, #4
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1a:	e1e8      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df1c:	2308      	movs	r3, #8
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df22:	e1e4      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df24:	2310      	movs	r3, #16
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2a:	e1e0      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df2c:	2320      	movs	r3, #32
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df32:	e1dc      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df34:	2340      	movs	r3, #64	@ 0x40
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3a:	e1d8      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df3c:	2380      	movs	r3, #128	@ 0x80
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df42:	e1d4      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a4f      	ldr	r2, [pc, #316]	@ (800e088 <UART_SetConfig+0x340>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d130      	bne.n	800dfb0 <UART_SetConfig+0x268>
 800df4e:	4b4c      	ldr	r3, [pc, #304]	@ (800e080 <UART_SetConfig+0x338>)
 800df50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	2b05      	cmp	r3, #5
 800df58:	d826      	bhi.n	800dfa8 <UART_SetConfig+0x260>
 800df5a:	a201      	add	r2, pc, #4	@ (adr r2, 800df60 <UART_SetConfig+0x218>)
 800df5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df60:	0800df79 	.word	0x0800df79
 800df64:	0800df81 	.word	0x0800df81
 800df68:	0800df89 	.word	0x0800df89
 800df6c:	0800df91 	.word	0x0800df91
 800df70:	0800df99 	.word	0x0800df99
 800df74:	0800dfa1 	.word	0x0800dfa1
 800df78:	2300      	movs	r3, #0
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7e:	e1b6      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df80:	2304      	movs	r3, #4
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df86:	e1b2      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df88:	2308      	movs	r3, #8
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8e:	e1ae      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df90:	2310      	movs	r3, #16
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df96:	e1aa      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800df98:	2320      	movs	r3, #32
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9e:	e1a6      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dfa0:	2340      	movs	r3, #64	@ 0x40
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa6:	e1a2      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dfa8:	2380      	movs	r3, #128	@ 0x80
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfae:	e19e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a35      	ldr	r2, [pc, #212]	@ (800e08c <UART_SetConfig+0x344>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d130      	bne.n	800e01c <UART_SetConfig+0x2d4>
 800dfba:	4b31      	ldr	r3, [pc, #196]	@ (800e080 <UART_SetConfig+0x338>)
 800dfbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfbe:	f003 0307 	and.w	r3, r3, #7
 800dfc2:	2b05      	cmp	r3, #5
 800dfc4:	d826      	bhi.n	800e014 <UART_SetConfig+0x2cc>
 800dfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800dfcc <UART_SetConfig+0x284>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800dfe5 	.word	0x0800dfe5
 800dfd0:	0800dfed 	.word	0x0800dfed
 800dfd4:	0800dff5 	.word	0x0800dff5
 800dfd8:	0800dffd 	.word	0x0800dffd
 800dfdc:	0800e005 	.word	0x0800e005
 800dfe0:	0800e00d 	.word	0x0800e00d
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfea:	e180      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dfec:	2304      	movs	r3, #4
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff2:	e17c      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dff4:	2308      	movs	r3, #8
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffa:	e178      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800dffc:	2310      	movs	r3, #16
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e002:	e174      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e004:	2320      	movs	r3, #32
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00a:	e170      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e00c:	2340      	movs	r3, #64	@ 0x40
 800e00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e012:	e16c      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e014:	2380      	movs	r3, #128	@ 0x80
 800e016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e01a:	e168      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a1b      	ldr	r2, [pc, #108]	@ (800e090 <UART_SetConfig+0x348>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d142      	bne.n	800e0ac <UART_SetConfig+0x364>
 800e026:	4b16      	ldr	r3, [pc, #88]	@ (800e080 <UART_SetConfig+0x338>)
 800e028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d838      	bhi.n	800e0a4 <UART_SetConfig+0x35c>
 800e032:	a201      	add	r2, pc, #4	@ (adr r2, 800e038 <UART_SetConfig+0x2f0>)
 800e034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e038:	0800e051 	.word	0x0800e051
 800e03c:	0800e059 	.word	0x0800e059
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e069 	.word	0x0800e069
 800e048:	0800e095 	.word	0x0800e095
 800e04c:	0800e09d 	.word	0x0800e09d
 800e050:	2300      	movs	r3, #0
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e056:	e14a      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e058:	2304      	movs	r3, #4
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e05e:	e146      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e060:	2308      	movs	r3, #8
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e066:	e142      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e068:	2310      	movs	r3, #16
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e06e:	e13e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e070:	cfff69f3 	.word	0xcfff69f3
 800e074:	58000c00 	.word	0x58000c00
 800e078:	11fff4ff 	.word	0x11fff4ff
 800e07c:	40011000 	.word	0x40011000
 800e080:	58024400 	.word	0x58024400
 800e084:	40004400 	.word	0x40004400
 800e088:	40004800 	.word	0x40004800
 800e08c:	40004c00 	.word	0x40004c00
 800e090:	40005000 	.word	0x40005000
 800e094:	2320      	movs	r3, #32
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e09a:	e128      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e09c:	2340      	movs	r3, #64	@ 0x40
 800e09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0a2:	e124      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e0a4:	2380      	movs	r3, #128	@ 0x80
 800e0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0aa:	e120      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4acb      	ldr	r2, [pc, #812]	@ (800e3e0 <UART_SetConfig+0x698>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d176      	bne.n	800e1a4 <UART_SetConfig+0x45c>
 800e0b6:	4bcb      	ldr	r3, [pc, #812]	@ (800e3e4 <UART_SetConfig+0x69c>)
 800e0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0be:	2b28      	cmp	r3, #40	@ 0x28
 800e0c0:	d86c      	bhi.n	800e19c <UART_SetConfig+0x454>
 800e0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0c8 <UART_SetConfig+0x380>)
 800e0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c8:	0800e16d 	.word	0x0800e16d
 800e0cc:	0800e19d 	.word	0x0800e19d
 800e0d0:	0800e19d 	.word	0x0800e19d
 800e0d4:	0800e19d 	.word	0x0800e19d
 800e0d8:	0800e19d 	.word	0x0800e19d
 800e0dc:	0800e19d 	.word	0x0800e19d
 800e0e0:	0800e19d 	.word	0x0800e19d
 800e0e4:	0800e19d 	.word	0x0800e19d
 800e0e8:	0800e175 	.word	0x0800e175
 800e0ec:	0800e19d 	.word	0x0800e19d
 800e0f0:	0800e19d 	.word	0x0800e19d
 800e0f4:	0800e19d 	.word	0x0800e19d
 800e0f8:	0800e19d 	.word	0x0800e19d
 800e0fc:	0800e19d 	.word	0x0800e19d
 800e100:	0800e19d 	.word	0x0800e19d
 800e104:	0800e19d 	.word	0x0800e19d
 800e108:	0800e17d 	.word	0x0800e17d
 800e10c:	0800e19d 	.word	0x0800e19d
 800e110:	0800e19d 	.word	0x0800e19d
 800e114:	0800e19d 	.word	0x0800e19d
 800e118:	0800e19d 	.word	0x0800e19d
 800e11c:	0800e19d 	.word	0x0800e19d
 800e120:	0800e19d 	.word	0x0800e19d
 800e124:	0800e19d 	.word	0x0800e19d
 800e128:	0800e185 	.word	0x0800e185
 800e12c:	0800e19d 	.word	0x0800e19d
 800e130:	0800e19d 	.word	0x0800e19d
 800e134:	0800e19d 	.word	0x0800e19d
 800e138:	0800e19d 	.word	0x0800e19d
 800e13c:	0800e19d 	.word	0x0800e19d
 800e140:	0800e19d 	.word	0x0800e19d
 800e144:	0800e19d 	.word	0x0800e19d
 800e148:	0800e18d 	.word	0x0800e18d
 800e14c:	0800e19d 	.word	0x0800e19d
 800e150:	0800e19d 	.word	0x0800e19d
 800e154:	0800e19d 	.word	0x0800e19d
 800e158:	0800e19d 	.word	0x0800e19d
 800e15c:	0800e19d 	.word	0x0800e19d
 800e160:	0800e19d 	.word	0x0800e19d
 800e164:	0800e19d 	.word	0x0800e19d
 800e168:	0800e195 	.word	0x0800e195
 800e16c:	2301      	movs	r3, #1
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e172:	e0bc      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e174:	2304      	movs	r3, #4
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e17a:	e0b8      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e17c:	2308      	movs	r3, #8
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e182:	e0b4      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e184:	2310      	movs	r3, #16
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e18a:	e0b0      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e18c:	2320      	movs	r3, #32
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e192:	e0ac      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e194:	2340      	movs	r3, #64	@ 0x40
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e19a:	e0a8      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e19c:	2380      	movs	r3, #128	@ 0x80
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1a2:	e0a4      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a8f      	ldr	r2, [pc, #572]	@ (800e3e8 <UART_SetConfig+0x6a0>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d130      	bne.n	800e210 <UART_SetConfig+0x4c8>
 800e1ae:	4b8d      	ldr	r3, [pc, #564]	@ (800e3e4 <UART_SetConfig+0x69c>)
 800e1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	2b05      	cmp	r3, #5
 800e1b8:	d826      	bhi.n	800e208 <UART_SetConfig+0x4c0>
 800e1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c0 <UART_SetConfig+0x478>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1d9 	.word	0x0800e1d9
 800e1c4:	0800e1e1 	.word	0x0800e1e1
 800e1c8:	0800e1e9 	.word	0x0800e1e9
 800e1cc:	0800e1f1 	.word	0x0800e1f1
 800e1d0:	0800e1f9 	.word	0x0800e1f9
 800e1d4:	0800e201 	.word	0x0800e201
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1de:	e086      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1e6:	e082      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e1e8:	2308      	movs	r3, #8
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1ee:	e07e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1f6:	e07a      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e1f8:	2320      	movs	r3, #32
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1fe:	e076      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e200:	2340      	movs	r3, #64	@ 0x40
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e206:	e072      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e208:	2380      	movs	r3, #128	@ 0x80
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e20e:	e06e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a75      	ldr	r2, [pc, #468]	@ (800e3ec <UART_SetConfig+0x6a4>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d130      	bne.n	800e27c <UART_SetConfig+0x534>
 800e21a:	4b72      	ldr	r3, [pc, #456]	@ (800e3e4 <UART_SetConfig+0x69c>)
 800e21c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e21e:	f003 0307 	and.w	r3, r3, #7
 800e222:	2b05      	cmp	r3, #5
 800e224:	d826      	bhi.n	800e274 <UART_SetConfig+0x52c>
 800e226:	a201      	add	r2, pc, #4	@ (adr r2, 800e22c <UART_SetConfig+0x4e4>)
 800e228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e24d 	.word	0x0800e24d
 800e234:	0800e255 	.word	0x0800e255
 800e238:	0800e25d 	.word	0x0800e25d
 800e23c:	0800e265 	.word	0x0800e265
 800e240:	0800e26d 	.word	0x0800e26d
 800e244:	2300      	movs	r3, #0
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e24a:	e050      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e24c:	2304      	movs	r3, #4
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e252:	e04c      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e254:	2308      	movs	r3, #8
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e25a:	e048      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e25c:	2310      	movs	r3, #16
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e262:	e044      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e264:	2320      	movs	r3, #32
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e26a:	e040      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e26c:	2340      	movs	r3, #64	@ 0x40
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e272:	e03c      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e274:	2380      	movs	r3, #128	@ 0x80
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e27a:	e038      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a5b      	ldr	r2, [pc, #364]	@ (800e3f0 <UART_SetConfig+0x6a8>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d130      	bne.n	800e2e8 <UART_SetConfig+0x5a0>
 800e286:	4b57      	ldr	r3, [pc, #348]	@ (800e3e4 <UART_SetConfig+0x69c>)
 800e288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e28a:	f003 0307 	and.w	r3, r3, #7
 800e28e:	2b05      	cmp	r3, #5
 800e290:	d826      	bhi.n	800e2e0 <UART_SetConfig+0x598>
 800e292:	a201      	add	r2, pc, #4	@ (adr r2, 800e298 <UART_SetConfig+0x550>)
 800e294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e298:	0800e2b1 	.word	0x0800e2b1
 800e29c:	0800e2b9 	.word	0x0800e2b9
 800e2a0:	0800e2c1 	.word	0x0800e2c1
 800e2a4:	0800e2c9 	.word	0x0800e2c9
 800e2a8:	0800e2d1 	.word	0x0800e2d1
 800e2ac:	0800e2d9 	.word	0x0800e2d9
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2b6:	e01a      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2b8:	2304      	movs	r3, #4
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2be:	e016      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2c0:	2308      	movs	r3, #8
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2c6:	e012      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2c8:	2310      	movs	r3, #16
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2ce:	e00e      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2d0:	2320      	movs	r3, #32
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2d6:	e00a      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2d8:	2340      	movs	r3, #64	@ 0x40
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2de:	e006      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2e0:	2380      	movs	r3, #128	@ 0x80
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2e6:	e002      	b.n	800e2ee <UART_SetConfig+0x5a6>
 800e2e8:	2380      	movs	r3, #128	@ 0x80
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a3f      	ldr	r2, [pc, #252]	@ (800e3f0 <UART_SetConfig+0x6a8>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	f040 80f8 	bne.w	800e4ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e2fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e2fe:	2b20      	cmp	r3, #32
 800e300:	dc46      	bgt.n	800e390 <UART_SetConfig+0x648>
 800e302:	2b02      	cmp	r3, #2
 800e304:	f2c0 8082 	blt.w	800e40c <UART_SetConfig+0x6c4>
 800e308:	3b02      	subs	r3, #2
 800e30a:	2b1e      	cmp	r3, #30
 800e30c:	d87e      	bhi.n	800e40c <UART_SetConfig+0x6c4>
 800e30e:	a201      	add	r2, pc, #4	@ (adr r2, 800e314 <UART_SetConfig+0x5cc>)
 800e310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e314:	0800e397 	.word	0x0800e397
 800e318:	0800e40d 	.word	0x0800e40d
 800e31c:	0800e39f 	.word	0x0800e39f
 800e320:	0800e40d 	.word	0x0800e40d
 800e324:	0800e40d 	.word	0x0800e40d
 800e328:	0800e40d 	.word	0x0800e40d
 800e32c:	0800e3af 	.word	0x0800e3af
 800e330:	0800e40d 	.word	0x0800e40d
 800e334:	0800e40d 	.word	0x0800e40d
 800e338:	0800e40d 	.word	0x0800e40d
 800e33c:	0800e40d 	.word	0x0800e40d
 800e340:	0800e40d 	.word	0x0800e40d
 800e344:	0800e40d 	.word	0x0800e40d
 800e348:	0800e40d 	.word	0x0800e40d
 800e34c:	0800e3bf 	.word	0x0800e3bf
 800e350:	0800e40d 	.word	0x0800e40d
 800e354:	0800e40d 	.word	0x0800e40d
 800e358:	0800e40d 	.word	0x0800e40d
 800e35c:	0800e40d 	.word	0x0800e40d
 800e360:	0800e40d 	.word	0x0800e40d
 800e364:	0800e40d 	.word	0x0800e40d
 800e368:	0800e40d 	.word	0x0800e40d
 800e36c:	0800e40d 	.word	0x0800e40d
 800e370:	0800e40d 	.word	0x0800e40d
 800e374:	0800e40d 	.word	0x0800e40d
 800e378:	0800e40d 	.word	0x0800e40d
 800e37c:	0800e40d 	.word	0x0800e40d
 800e380:	0800e40d 	.word	0x0800e40d
 800e384:	0800e40d 	.word	0x0800e40d
 800e388:	0800e40d 	.word	0x0800e40d
 800e38c:	0800e3ff 	.word	0x0800e3ff
 800e390:	2b40      	cmp	r3, #64	@ 0x40
 800e392:	d037      	beq.n	800e404 <UART_SetConfig+0x6bc>
 800e394:	e03a      	b.n	800e40c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e396:	f7fc fd31 	bl	800adfc <HAL_RCCEx_GetD3PCLK1Freq>
 800e39a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e39c:	e03c      	b.n	800e418 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e39e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fc fd40 	bl	800ae28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3ac:	e034      	b.n	800e418 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ae:	f107 0318 	add.w	r3, r7, #24
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fc fe8c 	bl	800b0d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3bc:	e02c      	b.n	800e418 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3be:	4b09      	ldr	r3, [pc, #36]	@ (800e3e4 <UART_SetConfig+0x69c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d016      	beq.n	800e3f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3ca:	4b06      	ldr	r3, [pc, #24]	@ (800e3e4 <UART_SetConfig+0x69c>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	08db      	lsrs	r3, r3, #3
 800e3d0:	f003 0303 	and.w	r3, r3, #3
 800e3d4:	4a07      	ldr	r2, [pc, #28]	@ (800e3f4 <UART_SetConfig+0x6ac>)
 800e3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3dc:	e01c      	b.n	800e418 <UART_SetConfig+0x6d0>
 800e3de:	bf00      	nop
 800e3e0:	40011400 	.word	0x40011400
 800e3e4:	58024400 	.word	0x58024400
 800e3e8:	40007800 	.word	0x40007800
 800e3ec:	40007c00 	.word	0x40007c00
 800e3f0:	58000c00 	.word	0x58000c00
 800e3f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e3f8:	4b9d      	ldr	r3, [pc, #628]	@ (800e670 <UART_SetConfig+0x928>)
 800e3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3fc:	e00c      	b.n	800e418 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3fe:	4b9d      	ldr	r3, [pc, #628]	@ (800e674 <UART_SetConfig+0x92c>)
 800e400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e402:	e009      	b.n	800e418 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e40a:	e005      	b.n	800e418 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e40c:	2300      	movs	r3, #0
 800e40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e410:	2301      	movs	r3, #1
 800e412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e416:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 81de 	beq.w	800e7dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e424:	4a94      	ldr	r2, [pc, #592]	@ (800e678 <UART_SetConfig+0x930>)
 800e426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e42a:	461a      	mov	r2, r3
 800e42c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e42e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e432:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	4613      	mov	r3, r2
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	4413      	add	r3, r2
 800e43e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e440:	429a      	cmp	r2, r3
 800e442:	d305      	bcc.n	800e450 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d903      	bls.n	800e458 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e456:	e1c1      	b.n	800e7dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e45a:	2200      	movs	r2, #0
 800e45c:	60bb      	str	r3, [r7, #8]
 800e45e:	60fa      	str	r2, [r7, #12]
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e464:	4a84      	ldr	r2, [pc, #528]	@ (800e678 <UART_SetConfig+0x930>)
 800e466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	2200      	movs	r2, #0
 800e46e:	603b      	str	r3, [r7, #0]
 800e470:	607a      	str	r2, [r7, #4]
 800e472:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e476:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e47a:	f7f2 f945 	bl	8000708 <__aeabi_uldivmod>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	4610      	mov	r0, r2
 800e484:	4619      	mov	r1, r3
 800e486:	f04f 0200 	mov.w	r2, #0
 800e48a:	f04f 0300 	mov.w	r3, #0
 800e48e:	020b      	lsls	r3, r1, #8
 800e490:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e494:	0202      	lsls	r2, r0, #8
 800e496:	6979      	ldr	r1, [r7, #20]
 800e498:	6849      	ldr	r1, [r1, #4]
 800e49a:	0849      	lsrs	r1, r1, #1
 800e49c:	2000      	movs	r0, #0
 800e49e:	460c      	mov	r4, r1
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	eb12 0804 	adds.w	r8, r2, r4
 800e4a6:	eb43 0905 	adc.w	r9, r3, r5
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	469a      	mov	sl, r3
 800e4b2:	4693      	mov	fp, r2
 800e4b4:	4652      	mov	r2, sl
 800e4b6:	465b      	mov	r3, fp
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	4649      	mov	r1, r9
 800e4bc:	f7f2 f924 	bl	8000708 <__aeabi_uldivmod>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e4ce:	d308      	bcc.n	800e4e2 <UART_SetConfig+0x79a>
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e4d6:	d204      	bcs.n	800e4e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4de:	60da      	str	r2, [r3, #12]
 800e4e0:	e17c      	b.n	800e7dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e4e8:	e178      	b.n	800e7dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4f2:	f040 80c5 	bne.w	800e680 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e4f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e4fa:	2b20      	cmp	r3, #32
 800e4fc:	dc48      	bgt.n	800e590 <UART_SetConfig+0x848>
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	db7b      	blt.n	800e5fa <UART_SetConfig+0x8b2>
 800e502:	2b20      	cmp	r3, #32
 800e504:	d879      	bhi.n	800e5fa <UART_SetConfig+0x8b2>
 800e506:	a201      	add	r2, pc, #4	@ (adr r2, 800e50c <UART_SetConfig+0x7c4>)
 800e508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50c:	0800e597 	.word	0x0800e597
 800e510:	0800e59f 	.word	0x0800e59f
 800e514:	0800e5fb 	.word	0x0800e5fb
 800e518:	0800e5fb 	.word	0x0800e5fb
 800e51c:	0800e5a7 	.word	0x0800e5a7
 800e520:	0800e5fb 	.word	0x0800e5fb
 800e524:	0800e5fb 	.word	0x0800e5fb
 800e528:	0800e5fb 	.word	0x0800e5fb
 800e52c:	0800e5b7 	.word	0x0800e5b7
 800e530:	0800e5fb 	.word	0x0800e5fb
 800e534:	0800e5fb 	.word	0x0800e5fb
 800e538:	0800e5fb 	.word	0x0800e5fb
 800e53c:	0800e5fb 	.word	0x0800e5fb
 800e540:	0800e5fb 	.word	0x0800e5fb
 800e544:	0800e5fb 	.word	0x0800e5fb
 800e548:	0800e5fb 	.word	0x0800e5fb
 800e54c:	0800e5c7 	.word	0x0800e5c7
 800e550:	0800e5fb 	.word	0x0800e5fb
 800e554:	0800e5fb 	.word	0x0800e5fb
 800e558:	0800e5fb 	.word	0x0800e5fb
 800e55c:	0800e5fb 	.word	0x0800e5fb
 800e560:	0800e5fb 	.word	0x0800e5fb
 800e564:	0800e5fb 	.word	0x0800e5fb
 800e568:	0800e5fb 	.word	0x0800e5fb
 800e56c:	0800e5fb 	.word	0x0800e5fb
 800e570:	0800e5fb 	.word	0x0800e5fb
 800e574:	0800e5fb 	.word	0x0800e5fb
 800e578:	0800e5fb 	.word	0x0800e5fb
 800e57c:	0800e5fb 	.word	0x0800e5fb
 800e580:	0800e5fb 	.word	0x0800e5fb
 800e584:	0800e5fb 	.word	0x0800e5fb
 800e588:	0800e5fb 	.word	0x0800e5fb
 800e58c:	0800e5ed 	.word	0x0800e5ed
 800e590:	2b40      	cmp	r3, #64	@ 0x40
 800e592:	d02e      	beq.n	800e5f2 <UART_SetConfig+0x8aa>
 800e594:	e031      	b.n	800e5fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e596:	f7fb f9b9 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 800e59a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e59c:	e033      	b.n	800e606 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e59e:	f7fb f9cb 	bl	8009938 <HAL_RCC_GetPCLK2Freq>
 800e5a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e5a4:	e02f      	b.n	800e606 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fc fc3c 	bl	800ae28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5b4:	e027      	b.n	800e606 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5b6:	f107 0318 	add.w	r3, r7, #24
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fc fd88 	bl	800b0d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5c4:	e01f      	b.n	800e606 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5c6:	4b2d      	ldr	r3, [pc, #180]	@ (800e67c <UART_SetConfig+0x934>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f003 0320 	and.w	r3, r3, #32
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d009      	beq.n	800e5e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5d2:	4b2a      	ldr	r3, [pc, #168]	@ (800e67c <UART_SetConfig+0x934>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	08db      	lsrs	r3, r3, #3
 800e5d8:	f003 0303 	and.w	r3, r3, #3
 800e5dc:	4a24      	ldr	r2, [pc, #144]	@ (800e670 <UART_SetConfig+0x928>)
 800e5de:	fa22 f303 	lsr.w	r3, r2, r3
 800e5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5e4:	e00f      	b.n	800e606 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e5e6:	4b22      	ldr	r3, [pc, #136]	@ (800e670 <UART_SetConfig+0x928>)
 800e5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5ea:	e00c      	b.n	800e606 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5ec:	4b21      	ldr	r3, [pc, #132]	@ (800e674 <UART_SetConfig+0x92c>)
 800e5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5f0:	e009      	b.n	800e606 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5f8:	e005      	b.n	800e606 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e5fe:	2301      	movs	r3, #1
 800e600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 80e7 	beq.w	800e7dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e612:	4a19      	ldr	r2, [pc, #100]	@ (800e678 <UART_SetConfig+0x930>)
 800e614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e618:	461a      	mov	r2, r3
 800e61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e61c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e620:	005a      	lsls	r2, r3, #1
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	085b      	lsrs	r3, r3, #1
 800e628:	441a      	add	r2, r3
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e632:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	2b0f      	cmp	r3, #15
 800e638:	d916      	bls.n	800e668 <UART_SetConfig+0x920>
 800e63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e640:	d212      	bcs.n	800e668 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e644:	b29b      	uxth	r3, r3
 800e646:	f023 030f 	bic.w	r3, r3, #15
 800e64a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64e:	085b      	lsrs	r3, r3, #1
 800e650:	b29b      	uxth	r3, r3
 800e652:	f003 0307 	and.w	r3, r3, #7
 800e656:	b29a      	uxth	r2, r3
 800e658:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e65a:	4313      	orrs	r3, r2
 800e65c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e664:	60da      	str	r2, [r3, #12]
 800e666:	e0b9      	b.n	800e7dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e668:	2301      	movs	r3, #1
 800e66a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e66e:	e0b5      	b.n	800e7dc <UART_SetConfig+0xa94>
 800e670:	03d09000 	.word	0x03d09000
 800e674:	003d0900 	.word	0x003d0900
 800e678:	0801a8e4 	.word	0x0801a8e4
 800e67c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e680:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e684:	2b20      	cmp	r3, #32
 800e686:	dc49      	bgt.n	800e71c <UART_SetConfig+0x9d4>
 800e688:	2b00      	cmp	r3, #0
 800e68a:	db7c      	blt.n	800e786 <UART_SetConfig+0xa3e>
 800e68c:	2b20      	cmp	r3, #32
 800e68e:	d87a      	bhi.n	800e786 <UART_SetConfig+0xa3e>
 800e690:	a201      	add	r2, pc, #4	@ (adr r2, 800e698 <UART_SetConfig+0x950>)
 800e692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e696:	bf00      	nop
 800e698:	0800e723 	.word	0x0800e723
 800e69c:	0800e72b 	.word	0x0800e72b
 800e6a0:	0800e787 	.word	0x0800e787
 800e6a4:	0800e787 	.word	0x0800e787
 800e6a8:	0800e733 	.word	0x0800e733
 800e6ac:	0800e787 	.word	0x0800e787
 800e6b0:	0800e787 	.word	0x0800e787
 800e6b4:	0800e787 	.word	0x0800e787
 800e6b8:	0800e743 	.word	0x0800e743
 800e6bc:	0800e787 	.word	0x0800e787
 800e6c0:	0800e787 	.word	0x0800e787
 800e6c4:	0800e787 	.word	0x0800e787
 800e6c8:	0800e787 	.word	0x0800e787
 800e6cc:	0800e787 	.word	0x0800e787
 800e6d0:	0800e787 	.word	0x0800e787
 800e6d4:	0800e787 	.word	0x0800e787
 800e6d8:	0800e753 	.word	0x0800e753
 800e6dc:	0800e787 	.word	0x0800e787
 800e6e0:	0800e787 	.word	0x0800e787
 800e6e4:	0800e787 	.word	0x0800e787
 800e6e8:	0800e787 	.word	0x0800e787
 800e6ec:	0800e787 	.word	0x0800e787
 800e6f0:	0800e787 	.word	0x0800e787
 800e6f4:	0800e787 	.word	0x0800e787
 800e6f8:	0800e787 	.word	0x0800e787
 800e6fc:	0800e787 	.word	0x0800e787
 800e700:	0800e787 	.word	0x0800e787
 800e704:	0800e787 	.word	0x0800e787
 800e708:	0800e787 	.word	0x0800e787
 800e70c:	0800e787 	.word	0x0800e787
 800e710:	0800e787 	.word	0x0800e787
 800e714:	0800e787 	.word	0x0800e787
 800e718:	0800e779 	.word	0x0800e779
 800e71c:	2b40      	cmp	r3, #64	@ 0x40
 800e71e:	d02e      	beq.n	800e77e <UART_SetConfig+0xa36>
 800e720:	e031      	b.n	800e786 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e722:	f7fb f8f3 	bl	800990c <HAL_RCC_GetPCLK1Freq>
 800e726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e728:	e033      	b.n	800e792 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e72a:	f7fb f905 	bl	8009938 <HAL_RCC_GetPCLK2Freq>
 800e72e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e730:	e02f      	b.n	800e792 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e736:	4618      	mov	r0, r3
 800e738:	f7fc fb76 	bl	800ae28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e740:	e027      	b.n	800e792 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e742:	f107 0318 	add.w	r3, r7, #24
 800e746:	4618      	mov	r0, r3
 800e748:	f7fc fcc2 	bl	800b0d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e750:	e01f      	b.n	800e792 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e752:	4b2d      	ldr	r3, [pc, #180]	@ (800e808 <UART_SetConfig+0xac0>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 0320 	and.w	r3, r3, #32
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e75e:	4b2a      	ldr	r3, [pc, #168]	@ (800e808 <UART_SetConfig+0xac0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	08db      	lsrs	r3, r3, #3
 800e764:	f003 0303 	and.w	r3, r3, #3
 800e768:	4a28      	ldr	r2, [pc, #160]	@ (800e80c <UART_SetConfig+0xac4>)
 800e76a:	fa22 f303 	lsr.w	r3, r2, r3
 800e76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e770:	e00f      	b.n	800e792 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e772:	4b26      	ldr	r3, [pc, #152]	@ (800e80c <UART_SetConfig+0xac4>)
 800e774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e776:	e00c      	b.n	800e792 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e778:	4b25      	ldr	r3, [pc, #148]	@ (800e810 <UART_SetConfig+0xac8>)
 800e77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e77c:	e009      	b.n	800e792 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e77e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e784:	e005      	b.n	800e792 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e786:	2300      	movs	r3, #0
 800e788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e78a:	2301      	movs	r3, #1
 800e78c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e790:	bf00      	nop
    }

    if (pclk != 0U)
 800e792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e794:	2b00      	cmp	r3, #0
 800e796:	d021      	beq.n	800e7dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e79c:	4a1d      	ldr	r2, [pc, #116]	@ (800e814 <UART_SetConfig+0xacc>)
 800e79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	085b      	lsrs	r3, r3, #1
 800e7b0:	441a      	add	r2, r3
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7be:	2b0f      	cmp	r3, #15
 800e7c0:	d909      	bls.n	800e7d6 <UART_SetConfig+0xa8e>
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7c8:	d205      	bcs.n	800e7d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60da      	str	r2, [r3, #12]
 800e7d4:	e002      	b.n	800e7dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e7f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3748      	adds	r7, #72	@ 0x48
 800e800:	46bd      	mov	sp, r7
 800e802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e806:	bf00      	nop
 800e808:	58024400 	.word	0x58024400
 800e80c:	03d09000 	.word	0x03d09000
 800e810:	003d0900 	.word	0x003d0900
 800e814:	0801a8e4 	.word	0x0801a8e4

0800e818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e824:	f003 0308 	and.w	r3, r3, #8
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00a      	beq.n	800e842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	430a      	orrs	r2, r1
 800e840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e846:	f003 0301 	and.w	r3, r3, #1
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00a      	beq.n	800e864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	430a      	orrs	r2, r1
 800e862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e868:	f003 0302 	and.w	r3, r3, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00a      	beq.n	800e886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	430a      	orrs	r2, r1
 800e884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e88a:	f003 0304 	and.w	r3, r3, #4
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00a      	beq.n	800e8a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	430a      	orrs	r2, r1
 800e8a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ac:	f003 0310 	and.w	r3, r3, #16
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00a      	beq.n	800e8ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	430a      	orrs	r2, r1
 800e8c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ce:	f003 0320 	and.w	r3, r3, #32
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01a      	beq.n	800e92e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	430a      	orrs	r2, r1
 800e90c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e916:	d10a      	bne.n	800e92e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	430a      	orrs	r2, r1
 800e92c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00a      	beq.n	800e950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	430a      	orrs	r2, r1
 800e94e:	605a      	str	r2, [r3, #4]
  }
}
 800e950:	bf00      	nop
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b098      	sub	sp, #96	@ 0x60
 800e960:	af02      	add	r7, sp, #8
 800e962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e96c:	f7f4 f822 	bl	80029b4 <HAL_GetTick>
 800e970:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 0308 	and.w	r3, r3, #8
 800e97c:	2b08      	cmp	r3, #8
 800e97e:	d12f      	bne.n	800e9e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e988:	2200      	movs	r2, #0
 800e98a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f88e 	bl	800eab0 <UART_WaitOnFlagUntilTimeout>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d022      	beq.n	800e9e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a2:	e853 3f00 	ldrex	r3, [r3]
 800e9a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e9be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9c0:	e841 2300 	strex	r3, r2, [r1]
 800e9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e6      	bne.n	800e99a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2220      	movs	r2, #32
 800e9d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	e063      	b.n	800eaa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0304 	and.w	r3, r3, #4
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	d149      	bne.n	800ea82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 f857 	bl	800eab0 <UART_WaitOnFlagUntilTimeout>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d03c      	beq.n	800ea82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea10:	e853 3f00 	ldrex	r3, [r3]
 800ea14:	623b      	str	r3, [r7, #32]
   return(result);
 800ea16:	6a3b      	ldr	r3, [r7, #32]
 800ea18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	461a      	mov	r2, r3
 800ea24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea2e:	e841 2300 	strex	r3, r2, [r1]
 800ea32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ea34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e6      	bne.n	800ea08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3308      	adds	r3, #8
 800ea40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	e853 3f00 	ldrex	r3, [r3]
 800ea48:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f023 0301 	bic.w	r3, r3, #1
 800ea50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	3308      	adds	r3, #8
 800ea58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea5a:	61fa      	str	r2, [r7, #28]
 800ea5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5e:	69b9      	ldr	r1, [r7, #24]
 800ea60:	69fa      	ldr	r2, [r7, #28]
 800ea62:	e841 2300 	strex	r3, r2, [r1]
 800ea66:	617b      	str	r3, [r7, #20]
   return(result);
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1e5      	bne.n	800ea3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2220      	movs	r2, #32
 800ea72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea7e:	2303      	movs	r3, #3
 800ea80:	e012      	b.n	800eaa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2220      	movs	r2, #32
 800ea86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2220      	movs	r2, #32
 800ea8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3758      	adds	r7, #88	@ 0x58
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	603b      	str	r3, [r7, #0]
 800eabc:	4613      	mov	r3, r2
 800eabe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eac0:	e04f      	b.n	800eb62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac8:	d04b      	beq.n	800eb62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eaca:	f7f3 ff73 	bl	80029b4 <HAL_GetTick>
 800eace:	4602      	mov	r2, r0
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	69ba      	ldr	r2, [r7, #24]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d302      	bcc.n	800eae0 <UART_WaitOnFlagUntilTimeout+0x30>
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800eae0:	2303      	movs	r3, #3
 800eae2:	e04e      	b.n	800eb82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f003 0304 	and.w	r3, r3, #4
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d037      	beq.n	800eb62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2b80      	cmp	r3, #128	@ 0x80
 800eaf6:	d034      	beq.n	800eb62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b40      	cmp	r3, #64	@ 0x40
 800eafc:	d031      	beq.n	800eb62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	69db      	ldr	r3, [r3, #28]
 800eb04:	f003 0308 	and.w	r3, r3, #8
 800eb08:	2b08      	cmp	r3, #8
 800eb0a:	d110      	bne.n	800eb2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2208      	movs	r2, #8
 800eb12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f000 f95b 	bl	800edd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2208      	movs	r2, #8
 800eb1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e029      	b.n	800eb82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	69db      	ldr	r3, [r3, #28]
 800eb34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb3c:	d111      	bne.n	800eb62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f000 f941 	bl	800edd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2220      	movs	r2, #32
 800eb52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	e00f      	b.n	800eb82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	69da      	ldr	r2, [r3, #28]
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	4013      	ands	r3, r2
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	bf0c      	ite	eq
 800eb72:	2301      	moveq	r3, #1
 800eb74:	2300      	movne	r3, #0
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	461a      	mov	r2, r3
 800eb7a:	79fb      	ldrb	r3, [r7, #7]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d0a0      	beq.n	800eac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
	...

0800eb8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b0a3      	sub	sp, #140	@ 0x8c
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	4613      	mov	r3, r2
 800eb98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	88fa      	ldrh	r2, [r7, #6]
 800eba4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	88fa      	ldrh	r2, [r7, #6]
 800ebac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebbe:	d10e      	bne.n	800ebde <UART_Start_Receive_IT+0x52>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d105      	bne.n	800ebd4 <UART_Start_Receive_IT+0x48>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ebce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ebd2:	e02d      	b.n	800ec30 <UART_Start_Receive_IT+0xa4>
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	22ff      	movs	r2, #255	@ 0xff
 800ebd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ebdc:	e028      	b.n	800ec30 <UART_Start_Receive_IT+0xa4>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10d      	bne.n	800ec02 <UART_Start_Receive_IT+0x76>
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	691b      	ldr	r3, [r3, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d104      	bne.n	800ebf8 <UART_Start_Receive_IT+0x6c>
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	22ff      	movs	r2, #255	@ 0xff
 800ebf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ebf6:	e01b      	b.n	800ec30 <UART_Start_Receive_IT+0xa4>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	227f      	movs	r2, #127	@ 0x7f
 800ebfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ec00:	e016      	b.n	800ec30 <UART_Start_Receive_IT+0xa4>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec0a:	d10d      	bne.n	800ec28 <UART_Start_Receive_IT+0x9c>
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d104      	bne.n	800ec1e <UART_Start_Receive_IT+0x92>
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	227f      	movs	r2, #127	@ 0x7f
 800ec18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ec1c:	e008      	b.n	800ec30 <UART_Start_Receive_IT+0xa4>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	223f      	movs	r2, #63	@ 0x3f
 800ec22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ec26:	e003      	b.n	800ec30 <UART_Start_Receive_IT+0xa4>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2222      	movs	r2, #34	@ 0x22
 800ec3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3308      	adds	r3, #8
 800ec46:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec4a:	e853 3f00 	ldrex	r3, [r3]
 800ec4e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ec50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec52:	f043 0301 	orr.w	r3, r3, #1
 800ec56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	3308      	adds	r3, #8
 800ec60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ec64:	673a      	str	r2, [r7, #112]	@ 0x70
 800ec66:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec68:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ec6a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ec6c:	e841 2300 	strex	r3, r2, [r1]
 800ec70:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ec72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e3      	bne.n	800ec40 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec80:	d14f      	bne.n	800ed22 <UART_Start_Receive_IT+0x196>
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ec88:	88fa      	ldrh	r2, [r7, #6]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d349      	bcc.n	800ed22 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec96:	d107      	bne.n	800eca8 <UART_Start_Receive_IT+0x11c>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d103      	bne.n	800eca8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a47      	ldr	r2, [pc, #284]	@ (800edc0 <UART_Start_Receive_IT+0x234>)
 800eca4:	675a      	str	r2, [r3, #116]	@ 0x74
 800eca6:	e002      	b.n	800ecae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	4a46      	ldr	r2, [pc, #280]	@ (800edc4 <UART_Start_Receive_IT+0x238>)
 800ecac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d01a      	beq.n	800ecec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecbe:	e853 3f00 	ldrex	r3, [r3]
 800ecc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ecc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ecca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ecd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecda:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecdc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ecde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ece0:	e841 2300 	strex	r3, r2, [r1]
 800ece4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ece6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d1e4      	bne.n	800ecb6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3308      	adds	r3, #8
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecf6:	e853 3f00 	ldrex	r3, [r3]
 800ecfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	3308      	adds	r3, #8
 800ed0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ed0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ed0e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed14:	e841 2300 	strex	r3, r2, [r1]
 800ed18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ed1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1e5      	bne.n	800ecec <UART_Start_Receive_IT+0x160>
 800ed20:	e046      	b.n	800edb0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed2a:	d107      	bne.n	800ed3c <UART_Start_Receive_IT+0x1b0>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d103      	bne.n	800ed3c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	4a24      	ldr	r2, [pc, #144]	@ (800edc8 <UART_Start_Receive_IT+0x23c>)
 800ed38:	675a      	str	r2, [r3, #116]	@ 0x74
 800ed3a:	e002      	b.n	800ed42 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	4a23      	ldr	r2, [pc, #140]	@ (800edcc <UART_Start_Receive_IT+0x240>)
 800ed40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d019      	beq.n	800ed7e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed52:	e853 3f00 	ldrex	r3, [r3]
 800ed56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ed5e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	461a      	mov	r2, r3
 800ed66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ed68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed6a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed70:	e841 2300 	strex	r3, r2, [r1]
 800ed74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ed76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1e6      	bne.n	800ed4a <UART_Start_Receive_IT+0x1be>
 800ed7c:	e018      	b.n	800edb0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	e853 3f00 	ldrex	r3, [r3]
 800ed8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	f043 0320 	orr.w	r3, r3, #32
 800ed92:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed9c:	623b      	str	r3, [r7, #32]
 800ed9e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	69f9      	ldr	r1, [r7, #28]
 800eda2:	6a3a      	ldr	r2, [r7, #32]
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	61bb      	str	r3, [r7, #24]
   return(result);
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e6      	bne.n	800ed7e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	378c      	adds	r7, #140	@ 0x8c
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	0800f5f1 	.word	0x0800f5f1
 800edc4:	0800f291 	.word	0x0800f291
 800edc8:	0800f0d9 	.word	0x0800f0d9
 800edcc:	0800ef21 	.word	0x0800ef21

0800edd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b095      	sub	sp, #84	@ 0x54
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ede0:	e853 3f00 	ldrex	r3, [r3]
 800ede4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ede6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800edec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edf6:	643b      	str	r3, [r7, #64]	@ 0x40
 800edf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800edfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edfe:	e841 2300 	strex	r3, r2, [r1]
 800ee02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1e6      	bne.n	800edd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3308      	adds	r3, #8
 800ee10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	e853 3f00 	ldrex	r3, [r3]
 800ee18:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ee98 <UART_EndRxTransfer+0xc8>)
 800ee1e:	4013      	ands	r3, r2
 800ee20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e5      	bne.n	800ee0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d118      	bne.n	800ee78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	e853 3f00 	ldrex	r3, [r3]
 800ee52:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	f023 0310 	bic.w	r3, r3, #16
 800ee5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	461a      	mov	r2, r3
 800ee62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee64:	61bb      	str	r3, [r7, #24]
 800ee66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee68:	6979      	ldr	r1, [r7, #20]
 800ee6a:	69ba      	ldr	r2, [r7, #24]
 800ee6c:	e841 2300 	strex	r3, r2, [r1]
 800ee70:	613b      	str	r3, [r7, #16]
   return(result);
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1e6      	bne.n	800ee46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ee8c:	bf00      	nop
 800ee8e:	3754      	adds	r7, #84	@ 0x54
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	effffffe 	.word	0xeffffffe

0800ee9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eea8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7fe ff2e 	bl	800dd1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eec0:	bf00      	nop
 800eec2:	3710      	adds	r7, #16
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	e853 3f00 	ldrex	r3, [r3]
 800eedc:	60bb      	str	r3, [r7, #8]
   return(result);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eee4:	61fb      	str	r3, [r7, #28]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef2:	6979      	ldr	r1, [r7, #20]
 800eef4:	69ba      	ldr	r2, [r7, #24]
 800eef6:	e841 2300 	strex	r3, r2, [r1]
 800eefa:	613b      	str	r3, [r7, #16]
   return(result);
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1e6      	bne.n	800eed0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2220      	movs	r2, #32
 800ef06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7fe fef9 	bl	800dd08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef16:	bf00      	nop
 800ef18:	3720      	adds	r7, #32
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b09c      	sub	sp, #112	@ 0x70
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef38:	2b22      	cmp	r3, #34	@ 0x22
 800ef3a:	f040 80be 	bne.w	800f0ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ef4c:	b2d9      	uxtb	r1, r3
 800ef4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ef52:	b2da      	uxtb	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef58:	400a      	ands	r2, r1
 800ef5a:	b2d2      	uxtb	r2, r2
 800ef5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef62:	1c5a      	adds	r2, r3, #1
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	3b01      	subs	r3, #1
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f040 80a1 	bne.w	800f0ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef90:	e853 3f00 	ldrex	r3, [r3]
 800ef94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ef96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ef9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	461a      	mov	r2, r3
 800efa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efa8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efaa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efae:	e841 2300 	strex	r3, r2, [r1]
 800efb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800efb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e6      	bne.n	800ef88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3308      	adds	r3, #8
 800efc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efc4:	e853 3f00 	ldrex	r3, [r3]
 800efc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800efca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efcc:	f023 0301 	bic.w	r3, r3, #1
 800efd0:	667b      	str	r3, [r7, #100]	@ 0x64
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3308      	adds	r3, #8
 800efd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800efda:	647a      	str	r2, [r7, #68]	@ 0x44
 800efdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800efe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efe2:	e841 2300 	strex	r3, r2, [r1]
 800efe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800efe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1e5      	bne.n	800efba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2220      	movs	r2, #32
 800eff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a33      	ldr	r2, [pc, #204]	@ (800f0d4 <UART_RxISR_8BIT+0x1b4>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d01f      	beq.n	800f04c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f016:	2b00      	cmp	r3, #0
 800f018:	d018      	beq.n	800f04c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f022:	e853 3f00 	ldrex	r3, [r3]
 800f026:	623b      	str	r3, [r7, #32]
   return(result);
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f02e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	461a      	mov	r2, r3
 800f036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f038:	633b      	str	r3, [r7, #48]	@ 0x30
 800f03a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f03e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f040:	e841 2300 	strex	r3, r2, [r1]
 800f044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1e6      	bne.n	800f01a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f050:	2b01      	cmp	r3, #1
 800f052:	d12e      	bne.n	800f0b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	e853 3f00 	ldrex	r3, [r3]
 800f066:	60fb      	str	r3, [r7, #12]
   return(result);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f023 0310 	bic.w	r3, r3, #16
 800f06e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	461a      	mov	r2, r3
 800f076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f078:	61fb      	str	r3, [r7, #28]
 800f07a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07c:	69b9      	ldr	r1, [r7, #24]
 800f07e:	69fa      	ldr	r2, [r7, #28]
 800f080:	e841 2300 	strex	r3, r2, [r1]
 800f084:	617b      	str	r3, [r7, #20]
   return(result);
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1e6      	bne.n	800f05a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	69db      	ldr	r3, [r3, #28]
 800f092:	f003 0310 	and.w	r3, r3, #16
 800f096:	2b10      	cmp	r3, #16
 800f098:	d103      	bne.n	800f0a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2210      	movs	r2, #16
 800f0a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7fe fe40 	bl	800dd30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0b0:	e00b      	b.n	800f0ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7f2 fbd2 	bl	800185c <HAL_UART_RxCpltCallback>
}
 800f0b8:	e007      	b.n	800f0ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	699a      	ldr	r2, [r3, #24]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f042 0208 	orr.w	r2, r2, #8
 800f0c8:	619a      	str	r2, [r3, #24]
}
 800f0ca:	bf00      	nop
 800f0cc:	3770      	adds	r7, #112	@ 0x70
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	58000c00 	.word	0x58000c00

0800f0d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b09c      	sub	sp, #112	@ 0x70
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f0e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f0f0:	2b22      	cmp	r3, #34	@ 0x22
 800f0f2:	f040 80be 	bne.w	800f272 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f104:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f106:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800f10a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f10e:	4013      	ands	r3, r2
 800f110:	b29a      	uxth	r2, r3
 800f112:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f114:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f11a:	1c9a      	adds	r2, r3, #2
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f126:	b29b      	uxth	r3, r3
 800f128:	3b01      	subs	r3, #1
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f138:	b29b      	uxth	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f040 80a1 	bne.w	800f282 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f148:	e853 3f00 	ldrex	r3, [r3]
 800f14c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f154:	667b      	str	r3, [r7, #100]	@ 0x64
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	461a      	mov	r2, r3
 800f15c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f15e:	657b      	str	r3, [r7, #84]	@ 0x54
 800f160:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f162:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f164:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f166:	e841 2300 	strex	r3, r2, [r1]
 800f16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1e6      	bne.n	800f140 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3308      	adds	r3, #8
 800f178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f17c:	e853 3f00 	ldrex	r3, [r3]
 800f180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f184:	f023 0301 	bic.w	r3, r3, #1
 800f188:	663b      	str	r3, [r7, #96]	@ 0x60
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	3308      	adds	r3, #8
 800f190:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f192:	643a      	str	r2, [r7, #64]	@ 0x40
 800f194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e5      	bne.n	800f172 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2220      	movs	r2, #32
 800f1aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a33      	ldr	r2, [pc, #204]	@ (800f28c <UART_RxISR_16BIT+0x1b4>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d01f      	beq.n	800f204 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d018      	beq.n	800f204 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d8:	6a3b      	ldr	r3, [r7, #32]
 800f1da:	e853 3f00 	ldrex	r3, [r3]
 800f1de:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f1e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f1f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1f8:	e841 2300 	strex	r3, r2, [r1]
 800f1fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1e6      	bne.n	800f1d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d12e      	bne.n	800f26a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	e853 3f00 	ldrex	r3, [r3]
 800f21e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f023 0310 	bic.w	r3, r3, #16
 800f226:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	461a      	mov	r2, r3
 800f22e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f230:	61bb      	str	r3, [r7, #24]
 800f232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f234:	6979      	ldr	r1, [r7, #20]
 800f236:	69ba      	ldr	r2, [r7, #24]
 800f238:	e841 2300 	strex	r3, r2, [r1]
 800f23c:	613b      	str	r3, [r7, #16]
   return(result);
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1e6      	bne.n	800f212 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	69db      	ldr	r3, [r3, #28]
 800f24a:	f003 0310 	and.w	r3, r3, #16
 800f24e:	2b10      	cmp	r3, #16
 800f250:	d103      	bne.n	800f25a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2210      	movs	r2, #16
 800f258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f260:	4619      	mov	r1, r3
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7fe fd64 	bl	800dd30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f268:	e00b      	b.n	800f282 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7f2 faf6 	bl	800185c <HAL_UART_RxCpltCallback>
}
 800f270:	e007      	b.n	800f282 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	699a      	ldr	r2, [r3, #24]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f042 0208 	orr.w	r2, r2, #8
 800f280:	619a      	str	r2, [r3, #24]
}
 800f282:	bf00      	nop
 800f284:	3770      	adds	r7, #112	@ 0x70
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	58000c00 	.word	0x58000c00

0800f290 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b0ac      	sub	sp, #176	@ 0xb0
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f29e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	69db      	ldr	r3, [r3, #28]
 800f2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2c6:	2b22      	cmp	r3, #34	@ 0x22
 800f2c8:	f040 8180 	bne.w	800f5cc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f2d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f2d6:	e123      	b.n	800f520 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f2e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f2e6:	b2d9      	uxtb	r1, r3
 800f2e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f2ec:	b2da      	uxtb	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2f2:	400a      	ands	r2, r1
 800f2f4:	b2d2      	uxtb	r2, r2
 800f2f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f308:	b29b      	uxth	r3, r3
 800f30a:	3b01      	subs	r3, #1
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f31e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f322:	f003 0307 	and.w	r3, r3, #7
 800f326:	2b00      	cmp	r3, #0
 800f328:	d053      	beq.n	800f3d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f32a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f32e:	f003 0301 	and.w	r3, r3, #1
 800f332:	2b00      	cmp	r3, #0
 800f334:	d011      	beq.n	800f35a <UART_RxISR_8BIT_FIFOEN+0xca>
 800f336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f33a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00b      	beq.n	800f35a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2201      	movs	r2, #1
 800f348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f350:	f043 0201 	orr.w	r2, r3, #1
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f35e:	f003 0302 	and.w	r3, r3, #2
 800f362:	2b00      	cmp	r3, #0
 800f364:	d011      	beq.n	800f38a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00b      	beq.n	800f38a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2202      	movs	r2, #2
 800f378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f380:	f043 0204 	orr.w	r2, r3, #4
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f38e:	f003 0304 	and.w	r3, r3, #4
 800f392:	2b00      	cmp	r3, #0
 800f394:	d011      	beq.n	800f3ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2204      	movs	r2, #4
 800f3a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3b0:	f043 0202 	orr.w	r2, r3, #2
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d006      	beq.n	800f3d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7fe fca9 	bl	800dd1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f040 80a0 	bne.w	800f520 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f3e8:	e853 3f00 	ldrex	r3, [r3]
 800f3ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f3ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f3f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f402:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f404:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f406:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f408:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f40a:	e841 2300 	strex	r3, r2, [r1]
 800f40e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1e4      	bne.n	800f3e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3308      	adds	r3, #8
 800f41c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f420:	e853 3f00 	ldrex	r3, [r3]
 800f424:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f426:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f428:	4b6e      	ldr	r3, [pc, #440]	@ (800f5e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f42a:	4013      	ands	r3, r2
 800f42c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	3308      	adds	r3, #8
 800f436:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f43a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f43c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f440:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f442:	e841 2300 	strex	r3, r2, [r1]
 800f446:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f448:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1e3      	bne.n	800f416 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2220      	movs	r2, #32
 800f452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4a60      	ldr	r2, [pc, #384]	@ (800f5e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d021      	beq.n	800f4b0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f476:	2b00      	cmp	r3, #0
 800f478:	d01a      	beq.n	800f4b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f482:	e853 3f00 	ldrex	r3, [r3]
 800f486:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f48a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f48e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	461a      	mov	r2, r3
 800f498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f49c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f49e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f4a4:	e841 2300 	strex	r3, r2, [r1]
 800f4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f4aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d1e4      	bne.n	800f47a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d130      	bne.n	800f51a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4c6:	e853 3f00 	ldrex	r3, [r3]
 800f4ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ce:	f023 0310 	bic.w	r3, r3, #16
 800f4d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f4e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4e8:	e841 2300 	strex	r3, r2, [r1]
 800f4ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1e4      	bne.n	800f4be <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	69db      	ldr	r3, [r3, #28]
 800f4fa:	f003 0310 	and.w	r3, r3, #16
 800f4fe:	2b10      	cmp	r3, #16
 800f500:	d103      	bne.n	800f50a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2210      	movs	r2, #16
 800f508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7fe fc0c 	bl	800dd30 <HAL_UARTEx_RxEventCallback>
 800f518:	e002      	b.n	800f520 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7f2 f99e 	bl	800185c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f520:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f524:	2b00      	cmp	r3, #0
 800f526:	d006      	beq.n	800f536 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f52c:	f003 0320 	and.w	r3, r3, #32
 800f530:	2b00      	cmp	r3, #0
 800f532:	f47f aed1 	bne.w	800f2d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f53c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f540:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f544:	2b00      	cmp	r3, #0
 800f546:	d049      	beq.n	800f5dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f54e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f552:	429a      	cmp	r2, r3
 800f554:	d242      	bcs.n	800f5dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	3308      	adds	r3, #8
 800f55c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	6a3b      	ldr	r3, [r7, #32]
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	61fb      	str	r3, [r7, #28]
   return(result);
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f56c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3308      	adds	r3, #8
 800f576:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f57a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f57c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f582:	e841 2300 	strex	r3, r2, [r1]
 800f586:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1e3      	bne.n	800f556 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a16      	ldr	r2, [pc, #88]	@ (800f5ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f592:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	e853 3f00 	ldrex	r3, [r3]
 800f5a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	f043 0320 	orr.w	r3, r3, #32
 800f5a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f5b6:	61bb      	str	r3, [r7, #24]
 800f5b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ba:	6979      	ldr	r1, [r7, #20]
 800f5bc:	69ba      	ldr	r2, [r7, #24]
 800f5be:	e841 2300 	strex	r3, r2, [r1]
 800f5c2:	613b      	str	r3, [r7, #16]
   return(result);
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1e4      	bne.n	800f594 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5ca:	e007      	b.n	800f5dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	699a      	ldr	r2, [r3, #24]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f042 0208 	orr.w	r2, r2, #8
 800f5da:	619a      	str	r2, [r3, #24]
}
 800f5dc:	bf00      	nop
 800f5de:	37b0      	adds	r7, #176	@ 0xb0
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	effffffe 	.word	0xeffffffe
 800f5e8:	58000c00 	.word	0x58000c00
 800f5ec:	0800ef21 	.word	0x0800ef21

0800f5f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b0ae      	sub	sp, #184	@ 0xb8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f5fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f626:	2b22      	cmp	r3, #34	@ 0x22
 800f628:	f040 8184 	bne.w	800f934 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f632:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f636:	e127      	b.n	800f888 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f63e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f64a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f64e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f652:	4013      	ands	r3, r2
 800f654:	b29a      	uxth	r2, r3
 800f656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f65a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f660:	1c9a      	adds	r2, r3, #2
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	3b01      	subs	r3, #1
 800f670:	b29a      	uxth	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	69db      	ldr	r3, [r3, #28]
 800f67e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f686:	f003 0307 	and.w	r3, r3, #7
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d053      	beq.n	800f736 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f68e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f692:	f003 0301 	and.w	r3, r3, #1
 800f696:	2b00      	cmp	r3, #0
 800f698:	d011      	beq.n	800f6be <UART_RxISR_16BIT_FIFOEN+0xce>
 800f69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f69e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00b      	beq.n	800f6be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2201      	movs	r2, #1
 800f6ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6b4:	f043 0201 	orr.w	r2, r3, #1
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f6c2:	f003 0302 	and.w	r3, r3, #2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d011      	beq.n	800f6ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f6ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f6ce:	f003 0301 	and.w	r3, r3, #1
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00b      	beq.n	800f6ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2202      	movs	r2, #2
 800f6dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6e4:	f043 0204 	orr.w	r2, r3, #4
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f6f2:	f003 0304 	and.w	r3, r3, #4
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d011      	beq.n	800f71e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f6fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f6fe:	f003 0301 	and.w	r3, r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00b      	beq.n	800f71e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2204      	movs	r2, #4
 800f70c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f714:	f043 0202 	orr.w	r2, r3, #2
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f724:	2b00      	cmp	r3, #0
 800f726:	d006      	beq.n	800f736 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7fe faf7 	bl	800dd1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2200      	movs	r2, #0
 800f732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	f040 80a2 	bne.w	800f888 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f74a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f74c:	e853 3f00 	ldrex	r3, [r3]
 800f750:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f752:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	461a      	mov	r2, r3
 800f762:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f766:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f76a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f76c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f76e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f772:	e841 2300 	strex	r3, r2, [r1]
 800f776:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d1e2      	bne.n	800f744 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	3308      	adds	r3, #8
 800f784:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f788:	e853 3f00 	ldrex	r3, [r3]
 800f78c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f78e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f790:	4b6e      	ldr	r3, [pc, #440]	@ (800f94c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f792:	4013      	ands	r3, r2
 800f794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3308      	adds	r3, #8
 800f79e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f7a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f7a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f7a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f7aa:	e841 2300 	strex	r3, r2, [r1]
 800f7ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f7b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1e3      	bne.n	800f77e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2220      	movs	r2, #32
 800f7ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a60      	ldr	r2, [pc, #384]	@ (800f950 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d021      	beq.n	800f818 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d01a      	beq.n	800f818 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7ea:	e853 3f00 	ldrex	r3, [r3]
 800f7ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f7f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f7f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	461a      	mov	r2, r3
 800f800:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f804:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f806:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f808:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f80a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f80c:	e841 2300 	strex	r3, r2, [r1]
 800f810:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f814:	2b00      	cmp	r3, #0
 800f816:	d1e4      	bne.n	800f7e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d130      	bne.n	800f882 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82e:	e853 3f00 	ldrex	r3, [r3]
 800f832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f836:	f023 0310 	bic.w	r3, r3, #16
 800f83a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f848:	647b      	str	r3, [r7, #68]	@ 0x44
 800f84a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f84e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f850:	e841 2300 	strex	r3, r2, [r1]
 800f854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1e4      	bne.n	800f826 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	69db      	ldr	r3, [r3, #28]
 800f862:	f003 0310 	and.w	r3, r3, #16
 800f866:	2b10      	cmp	r3, #16
 800f868:	d103      	bne.n	800f872 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2210      	movs	r2, #16
 800f870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fe fa58 	bl	800dd30 <HAL_UARTEx_RxEventCallback>
 800f880:	e002      	b.n	800f888 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7f1 ffea 	bl	800185c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f888:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d006      	beq.n	800f89e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f894:	f003 0320 	and.w	r3, r3, #32
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f47f aecd 	bne.w	800f638 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f8a4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f8a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d049      	beq.n	800f944 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f8b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d242      	bcs.n	800f944 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	3308      	adds	r3, #8
 800f8c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c8:	e853 3f00 	ldrex	r3, [r3]
 800f8cc:	623b      	str	r3, [r7, #32]
   return(result);
 800f8ce:	6a3b      	ldr	r3, [r7, #32]
 800f8d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f8d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	3308      	adds	r3, #8
 800f8de:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f8e2:	633a      	str	r2, [r7, #48]	@ 0x30
 800f8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8ea:	e841 2300 	strex	r3, r2, [r1]
 800f8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1e3      	bne.n	800f8be <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a16      	ldr	r2, [pc, #88]	@ (800f954 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f8fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	e853 3f00 	ldrex	r3, [r3]
 800f908:	60fb      	str	r3, [r7, #12]
   return(result);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f043 0320 	orr.w	r3, r3, #32
 800f910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f91e:	61fb      	str	r3, [r7, #28]
 800f920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	69b9      	ldr	r1, [r7, #24]
 800f924:	69fa      	ldr	r2, [r7, #28]
 800f926:	e841 2300 	strex	r3, r2, [r1]
 800f92a:	617b      	str	r3, [r7, #20]
   return(result);
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e4      	bne.n	800f8fc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f932:	e007      	b.n	800f944 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	699a      	ldr	r2, [r3, #24]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f042 0208 	orr.w	r2, r2, #8
 800f942:	619a      	str	r2, [r3, #24]
}
 800f944:	bf00      	nop
 800f946:	37b8      	adds	r7, #184	@ 0xb8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	effffffe 	.word	0xeffffffe
 800f950:	58000c00 	.word	0x58000c00
 800f954:	0800f0d9 	.word	0x0800f0d9

0800f958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f960:	bf00      	nop
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f974:	bf00      	nop
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f980:	b480      	push	{r7}
 800f982:	b083      	sub	sp, #12
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d101      	bne.n	800f9aa <HAL_UARTEx_DisableFifoMode+0x16>
 800f9a6:	2302      	movs	r3, #2
 800f9a8:	e027      	b.n	800f9fa <HAL_UARTEx_DisableFifoMode+0x66>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2224      	movs	r2, #36	@ 0x24
 800f9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f022 0201 	bic.w	r2, r2, #1
 800f9d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f9d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2220      	movs	r2, #32
 800f9ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3714      	adds	r7, #20
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d101      	bne.n	800fa1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa1a:	2302      	movs	r3, #2
 800fa1c:	e02d      	b.n	800fa7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2201      	movs	r2, #1
 800fa22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2224      	movs	r2, #36	@ 0x24
 800fa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f022 0201 	bic.w	r2, r2, #1
 800fa44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	689b      	ldr	r3, [r3, #8]
 800fa4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	430a      	orrs	r2, r1
 800fa58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 f850 	bl	800fb00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2220      	movs	r2, #32
 800fa6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b084      	sub	sp, #16
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d101      	bne.n	800fa9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa96:	2302      	movs	r3, #2
 800fa98:	e02d      	b.n	800faf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2224      	movs	r2, #36	@ 0x24
 800faa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f022 0201 	bic.w	r2, r2, #1
 800fac0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	683a      	ldr	r2, [r7, #0]
 800fad2:	430a      	orrs	r2, r1
 800fad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f812 	bl	800fb00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2220      	movs	r2, #32
 800fae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
	...

0800fb00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d108      	bne.n	800fb22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2201      	movs	r2, #1
 800fb14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb20:	e031      	b.n	800fb86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb22:	2310      	movs	r3, #16
 800fb24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb26:	2310      	movs	r3, #16
 800fb28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	0e5b      	lsrs	r3, r3, #25
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	f003 0307 	and.w	r3, r3, #7
 800fb38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	0f5b      	lsrs	r3, r3, #29
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	f003 0307 	and.w	r3, r3, #7
 800fb48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb4a:	7bbb      	ldrb	r3, [r7, #14]
 800fb4c:	7b3a      	ldrb	r2, [r7, #12]
 800fb4e:	4911      	ldr	r1, [pc, #68]	@ (800fb94 <UARTEx_SetNbDataToProcess+0x94>)
 800fb50:	5c8a      	ldrb	r2, [r1, r2]
 800fb52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb56:	7b3a      	ldrb	r2, [r7, #12]
 800fb58:	490f      	ldr	r1, [pc, #60]	@ (800fb98 <UARTEx_SetNbDataToProcess+0x98>)
 800fb5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb68:	7bfb      	ldrb	r3, [r7, #15]
 800fb6a:	7b7a      	ldrb	r2, [r7, #13]
 800fb6c:	4909      	ldr	r1, [pc, #36]	@ (800fb94 <UARTEx_SetNbDataToProcess+0x94>)
 800fb6e:	5c8a      	ldrb	r2, [r1, r2]
 800fb70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb74:	7b7a      	ldrb	r2, [r7, #13]
 800fb76:	4908      	ldr	r1, [pc, #32]	@ (800fb98 <UARTEx_SetNbDataToProcess+0x98>)
 800fb78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fb86:	bf00      	nop
 800fb88:	3714      	adds	r7, #20
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	0801a8fc 	.word	0x0801a8fc
 800fb98:	0801a904 	.word	0x0801a904

0800fb9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb9c:	b084      	sub	sp, #16
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b084      	sub	sp, #16
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
 800fba6:	f107 001c 	add.w	r0, r7, #28
 800fbaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fbae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d121      	bne.n	800fbfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	68da      	ldr	r2, [r3, #12]
 800fbc6:	4b2c      	ldr	r3, [pc, #176]	@ (800fc78 <USB_CoreInit+0xdc>)
 800fbc8:	4013      	ands	r3, r2
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fbda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d105      	bne.n	800fbee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f001 faf6 	bl	80111e0 <USB_CoreReset>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	73fb      	strb	r3, [r7, #15]
 800fbf8:	e01b      	b.n	800fc32 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f001 faea 	bl	80111e0 <USB_CoreReset>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fc10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d106      	bne.n	800fc26 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	639a      	str	r2, [r3, #56]	@ 0x38
 800fc24:	e005      	b.n	800fc32 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fc32:	7fbb      	ldrb	r3, [r7, #30]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d116      	bne.n	800fc66 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fc46:	4b0d      	ldr	r3, [pc, #52]	@ (800fc7c <USB_CoreInit+0xe0>)
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f043 0206 	orr.w	r2, r3, #6
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	f043 0220 	orr.w	r2, r3, #32
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc72:	b004      	add	sp, #16
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	ffbdffbf 	.word	0xffbdffbf
 800fc7c:	03ee0000 	.word	0x03ee0000

0800fc80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b087      	sub	sp, #28
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fc8e:	79fb      	ldrb	r3, [r7, #7]
 800fc90:	2b02      	cmp	r3, #2
 800fc92:	d165      	bne.n	800fd60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	4a41      	ldr	r2, [pc, #260]	@ (800fd9c <USB_SetTurnaroundTime+0x11c>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d906      	bls.n	800fcaa <USB_SetTurnaroundTime+0x2a>
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	4a40      	ldr	r2, [pc, #256]	@ (800fda0 <USB_SetTurnaroundTime+0x120>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d202      	bcs.n	800fcaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fca4:	230f      	movs	r3, #15
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	e062      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	4a3c      	ldr	r2, [pc, #240]	@ (800fda0 <USB_SetTurnaroundTime+0x120>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d306      	bcc.n	800fcc0 <USB_SetTurnaroundTime+0x40>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	4a3b      	ldr	r2, [pc, #236]	@ (800fda4 <USB_SetTurnaroundTime+0x124>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d202      	bcs.n	800fcc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fcba:	230e      	movs	r3, #14
 800fcbc:	617b      	str	r3, [r7, #20]
 800fcbe:	e057      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	4a38      	ldr	r2, [pc, #224]	@ (800fda4 <USB_SetTurnaroundTime+0x124>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d306      	bcc.n	800fcd6 <USB_SetTurnaroundTime+0x56>
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	4a37      	ldr	r2, [pc, #220]	@ (800fda8 <USB_SetTurnaroundTime+0x128>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d202      	bcs.n	800fcd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fcd0:	230d      	movs	r3, #13
 800fcd2:	617b      	str	r3, [r7, #20]
 800fcd4:	e04c      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	4a33      	ldr	r2, [pc, #204]	@ (800fda8 <USB_SetTurnaroundTime+0x128>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d306      	bcc.n	800fcec <USB_SetTurnaroundTime+0x6c>
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	4a32      	ldr	r2, [pc, #200]	@ (800fdac <USB_SetTurnaroundTime+0x12c>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d802      	bhi.n	800fcec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fce6:	230c      	movs	r3, #12
 800fce8:	617b      	str	r3, [r7, #20]
 800fcea:	e041      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	4a2f      	ldr	r2, [pc, #188]	@ (800fdac <USB_SetTurnaroundTime+0x12c>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d906      	bls.n	800fd02 <USB_SetTurnaroundTime+0x82>
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	4a2e      	ldr	r2, [pc, #184]	@ (800fdb0 <USB_SetTurnaroundTime+0x130>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d802      	bhi.n	800fd02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fcfc:	230b      	movs	r3, #11
 800fcfe:	617b      	str	r3, [r7, #20]
 800fd00:	e036      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	4a2a      	ldr	r2, [pc, #168]	@ (800fdb0 <USB_SetTurnaroundTime+0x130>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d906      	bls.n	800fd18 <USB_SetTurnaroundTime+0x98>
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	4a29      	ldr	r2, [pc, #164]	@ (800fdb4 <USB_SetTurnaroundTime+0x134>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d802      	bhi.n	800fd18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fd12:	230a      	movs	r3, #10
 800fd14:	617b      	str	r3, [r7, #20]
 800fd16:	e02b      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	4a26      	ldr	r2, [pc, #152]	@ (800fdb4 <USB_SetTurnaroundTime+0x134>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d906      	bls.n	800fd2e <USB_SetTurnaroundTime+0xae>
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	4a25      	ldr	r2, [pc, #148]	@ (800fdb8 <USB_SetTurnaroundTime+0x138>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d202      	bcs.n	800fd2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fd28:	2309      	movs	r3, #9
 800fd2a:	617b      	str	r3, [r7, #20]
 800fd2c:	e020      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	4a21      	ldr	r2, [pc, #132]	@ (800fdb8 <USB_SetTurnaroundTime+0x138>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d306      	bcc.n	800fd44 <USB_SetTurnaroundTime+0xc4>
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	4a20      	ldr	r2, [pc, #128]	@ (800fdbc <USB_SetTurnaroundTime+0x13c>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d802      	bhi.n	800fd44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fd3e:	2308      	movs	r3, #8
 800fd40:	617b      	str	r3, [r7, #20]
 800fd42:	e015      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	4a1d      	ldr	r2, [pc, #116]	@ (800fdbc <USB_SetTurnaroundTime+0x13c>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d906      	bls.n	800fd5a <USB_SetTurnaroundTime+0xda>
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	4a1c      	ldr	r2, [pc, #112]	@ (800fdc0 <USB_SetTurnaroundTime+0x140>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d202      	bcs.n	800fd5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fd54:	2307      	movs	r3, #7
 800fd56:	617b      	str	r3, [r7, #20]
 800fd58:	e00a      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fd5a:	2306      	movs	r3, #6
 800fd5c:	617b      	str	r3, [r7, #20]
 800fd5e:	e007      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fd60:	79fb      	ldrb	r3, [r7, #7]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d102      	bne.n	800fd6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fd66:	2309      	movs	r3, #9
 800fd68:	617b      	str	r3, [r7, #20]
 800fd6a:	e001      	b.n	800fd70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fd6c:	2309      	movs	r3, #9
 800fd6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	68da      	ldr	r2, [r3, #12]
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	029b      	lsls	r3, r3, #10
 800fd84:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800fd88:	431a      	orrs	r2, r3
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fd8e:	2300      	movs	r3, #0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	371c      	adds	r7, #28
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	00d8acbf 	.word	0x00d8acbf
 800fda0:	00e4e1c0 	.word	0x00e4e1c0
 800fda4:	00f42400 	.word	0x00f42400
 800fda8:	01067380 	.word	0x01067380
 800fdac:	011a499f 	.word	0x011a499f
 800fdb0:	01312cff 	.word	0x01312cff
 800fdb4:	014ca43f 	.word	0x014ca43f
 800fdb8:	016e3600 	.word	0x016e3600
 800fdbc:	01a6ab1f 	.word	0x01a6ab1f
 800fdc0:	01e84800 	.word	0x01e84800

0800fdc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	689b      	ldr	r3, [r3, #8]
 800fdd0:	f043 0201 	orr.w	r2, r3, #1
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdd8:	2300      	movs	r3, #0
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr

0800fde6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fde6:	b480      	push	{r7}
 800fde8:	b083      	sub	sp, #12
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	689b      	ldr	r3, [r3, #8]
 800fdf2:	f023 0201 	bic.w	r2, r3, #1
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fe14:	2300      	movs	r3, #0
 800fe16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fe24:	78fb      	ldrb	r3, [r7, #3]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d115      	bne.n	800fe56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fe36:	200a      	movs	r0, #10
 800fe38:	f7f2 fdc8 	bl	80029cc <HAL_Delay>
      ms += 10U;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	330a      	adds	r3, #10
 800fe40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f001 f93b 	bl	80110be <USB_GetMode>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d01e      	beq.n	800fe8c <USB_SetCurrentMode+0x84>
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2bc7      	cmp	r3, #199	@ 0xc7
 800fe52:	d9f0      	bls.n	800fe36 <USB_SetCurrentMode+0x2e>
 800fe54:	e01a      	b.n	800fe8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe56:	78fb      	ldrb	r3, [r7, #3]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d115      	bne.n	800fe88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fe68:	200a      	movs	r0, #10
 800fe6a:	f7f2 fdaf 	bl	80029cc <HAL_Delay>
      ms += 10U;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	330a      	adds	r3, #10
 800fe72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f001 f922 	bl	80110be <USB_GetMode>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d005      	beq.n	800fe8c <USB_SetCurrentMode+0x84>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2bc7      	cmp	r3, #199	@ 0xc7
 800fe84:	d9f0      	bls.n	800fe68 <USB_SetCurrentMode+0x60>
 800fe86:	e001      	b.n	800fe8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	e005      	b.n	800fe98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2bc8      	cmp	r3, #200	@ 0xc8
 800fe90:	d101      	bne.n	800fe96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	e000      	b.n	800fe98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fe96:	2300      	movs	r3, #0
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}

0800fea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fea0:	b084      	sub	sp, #16
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b086      	sub	sp, #24
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
 800feaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800feae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800feb2:	2300      	movs	r3, #0
 800feb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800feba:	2300      	movs	r3, #0
 800febc:	613b      	str	r3, [r7, #16]
 800febe:	e009      	b.n	800fed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	3340      	adds	r3, #64	@ 0x40
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	4413      	add	r3, r2
 800feca:	2200      	movs	r2, #0
 800fecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	3301      	adds	r3, #1
 800fed2:	613b      	str	r3, [r7, #16]
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	2b0e      	cmp	r3, #14
 800fed8:	d9f2      	bls.n	800fec0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800feda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d11c      	bne.n	800ff1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fef0:	f043 0302 	orr.w	r3, r3, #2
 800fef4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fefa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	e005      	b.n	800ff28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ff2e:	461a      	mov	r2, r3
 800ff30:	2300      	movs	r3, #0
 800ff32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d10d      	bne.n	800ff58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d104      	bne.n	800ff4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff44:	2100      	movs	r1, #0
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f968 	bl	801021c <USB_SetDevSpeed>
 800ff4c:	e008      	b.n	800ff60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff4e:	2101      	movs	r1, #1
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f963 	bl	801021c <USB_SetDevSpeed>
 800ff56:	e003      	b.n	800ff60 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff58:	2103      	movs	r1, #3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f95e 	bl	801021c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff60:	2110      	movs	r1, #16
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f8fa 	bl	801015c <USB_FlushTxFifo>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 f924 	bl	80101c0 <USB_FlushRxFifo>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff88:	461a      	mov	r2, r3
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff94:	461a      	mov	r2, r3
 800ff96:	2300      	movs	r3, #0
 800ff98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	613b      	str	r3, [r7, #16]
 800ffaa:	e043      	b.n	8010034 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	015a      	lsls	r2, r3, #5
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ffbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ffc2:	d118      	bne.n	800fff6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d10a      	bne.n	800ffe0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	015a      	lsls	r2, r3, #5
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	e013      	b.n	8010008 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	015a      	lsls	r2, r3, #5
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffec:	461a      	mov	r2, r3
 800ffee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	e008      	b.n	8010008 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010002:	461a      	mov	r2, r3
 8010004:	2300      	movs	r3, #0
 8010006:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	015a      	lsls	r2, r3, #5
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4413      	add	r3, r2
 8010010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010014:	461a      	mov	r2, r3
 8010016:	2300      	movs	r3, #0
 8010018:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	015a      	lsls	r2, r3, #5
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4413      	add	r3, r2
 8010022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010026:	461a      	mov	r2, r3
 8010028:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801002c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	3301      	adds	r3, #1
 8010032:	613b      	str	r3, [r7, #16]
 8010034:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010038:	461a      	mov	r2, r3
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	4293      	cmp	r3, r2
 801003e:	d3b5      	bcc.n	800ffac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010040:	2300      	movs	r3, #0
 8010042:	613b      	str	r3, [r7, #16]
 8010044:	e043      	b.n	80100ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	4413      	add	r3, r2
 801004e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801005c:	d118      	bne.n	8010090 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10a      	bne.n	801007a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	015a      	lsls	r2, r3, #5
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	4413      	add	r3, r2
 801006c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010070:	461a      	mov	r2, r3
 8010072:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010076:	6013      	str	r3, [r2, #0]
 8010078:	e013      	b.n	80100a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	015a      	lsls	r2, r3, #5
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	4413      	add	r3, r2
 8010082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010086:	461a      	mov	r2, r3
 8010088:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801008c:	6013      	str	r3, [r2, #0]
 801008e:	e008      	b.n	80100a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	015a      	lsls	r2, r3, #5
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	4413      	add	r3, r2
 8010098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801009c:	461a      	mov	r2, r3
 801009e:	2300      	movs	r3, #0
 80100a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	015a      	lsls	r2, r3, #5
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4413      	add	r3, r2
 80100aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100ae:	461a      	mov	r2, r3
 80100b0:	2300      	movs	r3, #0
 80100b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	015a      	lsls	r2, r3, #5
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	4413      	add	r3, r2
 80100bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100c0:	461a      	mov	r2, r3
 80100c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80100c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	3301      	adds	r3, #1
 80100cc:	613b      	str	r3, [r7, #16]
 80100ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80100d2:	461a      	mov	r2, r3
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d3b5      	bcc.n	8010046 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100e0:	691b      	ldr	r3, [r3, #16]
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80100e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80100fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010100:	2b00      	cmp	r3, #0
 8010102:	d105      	bne.n	8010110 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	f043 0210 	orr.w	r2, r3, #16
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	699a      	ldr	r2, [r3, #24]
 8010114:	4b0f      	ldr	r3, [pc, #60]	@ (8010154 <USB_DevInit+0x2b4>)
 8010116:	4313      	orrs	r3, r2
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801011c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010120:	2b00      	cmp	r3, #0
 8010122:	d005      	beq.n	8010130 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	699b      	ldr	r3, [r3, #24]
 8010128:	f043 0208 	orr.w	r2, r3, #8
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010130:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010134:	2b01      	cmp	r3, #1
 8010136:	d105      	bne.n	8010144 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	699a      	ldr	r2, [r3, #24]
 801013c:	4b06      	ldr	r3, [pc, #24]	@ (8010158 <USB_DevInit+0x2b8>)
 801013e:	4313      	orrs	r3, r2
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010144:	7dfb      	ldrb	r3, [r7, #23]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3718      	adds	r7, #24
 801014a:	46bd      	mov	sp, r7
 801014c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010150:	b004      	add	sp, #16
 8010152:	4770      	bx	lr
 8010154:	803c3800 	.word	0x803c3800
 8010158:	40000004 	.word	0x40000004

0801015c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010166:	2300      	movs	r3, #0
 8010168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	3301      	adds	r3, #1
 801016e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010176:	d901      	bls.n	801017c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010178:	2303      	movs	r3, #3
 801017a:	e01b      	b.n	80101b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	daf2      	bge.n	801016a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010184:	2300      	movs	r3, #0
 8010186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	019b      	lsls	r3, r3, #6
 801018c:	f043 0220 	orr.w	r2, r3, #32
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	3301      	adds	r3, #1
 8010198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80101a0:	d901      	bls.n	80101a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80101a2:	2303      	movs	r3, #3
 80101a4:	e006      	b.n	80101b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f003 0320 	and.w	r3, r3, #32
 80101ae:	2b20      	cmp	r3, #32
 80101b0:	d0f0      	beq.n	8010194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80101b2:	2300      	movs	r3, #0
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3714      	adds	r7, #20
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr

080101c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101c8:	2300      	movs	r3, #0
 80101ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	3301      	adds	r3, #1
 80101d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80101d8:	d901      	bls.n	80101de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80101da:	2303      	movs	r3, #3
 80101dc:	e018      	b.n	8010210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	daf2      	bge.n	80101cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80101e6:	2300      	movs	r3, #0
 80101e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2210      	movs	r2, #16
 80101ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	3301      	adds	r3, #1
 80101f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80101fc:	d901      	bls.n	8010202 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80101fe:	2303      	movs	r3, #3
 8010200:	e006      	b.n	8010210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	f003 0310 	and.w	r3, r3, #16
 801020a:	2b10      	cmp	r3, #16
 801020c:	d0f0      	beq.n	80101f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801021c:	b480      	push	{r7}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	460b      	mov	r3, r1
 8010226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	78fb      	ldrb	r3, [r7, #3]
 8010236:	68f9      	ldr	r1, [r7, #12]
 8010238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801023c:	4313      	orrs	r3, r2
 801023e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801024e:	b480      	push	{r7}
 8010250:	b087      	sub	sp, #28
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010260:	689b      	ldr	r3, [r3, #8]
 8010262:	f003 0306 	and.w	r3, r3, #6
 8010266:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d102      	bne.n	8010274 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801026e:	2300      	movs	r3, #0
 8010270:	75fb      	strb	r3, [r7, #23]
 8010272:	e00a      	b.n	801028a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b02      	cmp	r3, #2
 8010278:	d002      	beq.n	8010280 <USB_GetDevSpeed+0x32>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2b06      	cmp	r3, #6
 801027e:	d102      	bne.n	8010286 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010280:	2302      	movs	r3, #2
 8010282:	75fb      	strb	r3, [r7, #23]
 8010284:	e001      	b.n	801028a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010286:	230f      	movs	r3, #15
 8010288:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801028a:	7dfb      	ldrb	r3, [r7, #23]
}
 801028c:	4618      	mov	r0, r3
 801028e:	371c      	adds	r7, #28
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010298:	b480      	push	{r7}
 801029a:	b085      	sub	sp, #20
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	785b      	ldrb	r3, [r3, #1]
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d139      	bne.n	8010328 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80102ba:	69da      	ldr	r2, [r3, #28]
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	f003 030f 	and.w	r3, r3, #15
 80102c4:	2101      	movs	r1, #1
 80102c6:	fa01 f303 	lsl.w	r3, r1, r3
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	68f9      	ldr	r1, [r7, #12]
 80102ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80102d2:	4313      	orrs	r3, r2
 80102d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	015a      	lsls	r2, r3, #5
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	4413      	add	r3, r2
 80102de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d153      	bne.n	8010394 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	015a      	lsls	r2, r3, #5
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	4413      	add	r3, r2
 80102f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	791b      	ldrb	r3, [r3, #4]
 8010306:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010308:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	059b      	lsls	r3, r3, #22
 801030e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010310:	431a      	orrs	r2, r3
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	0159      	lsls	r1, r3, #5
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	440b      	add	r3, r1
 801031a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801031e:	4619      	mov	r1, r3
 8010320:	4b20      	ldr	r3, [pc, #128]	@ (80103a4 <USB_ActivateEndpoint+0x10c>)
 8010322:	4313      	orrs	r3, r2
 8010324:	600b      	str	r3, [r1, #0]
 8010326:	e035      	b.n	8010394 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801032e:	69da      	ldr	r2, [r3, #28]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	f003 030f 	and.w	r3, r3, #15
 8010338:	2101      	movs	r1, #1
 801033a:	fa01 f303 	lsl.w	r3, r1, r3
 801033e:	041b      	lsls	r3, r3, #16
 8010340:	68f9      	ldr	r1, [r7, #12]
 8010342:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010346:	4313      	orrs	r3, r2
 8010348:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	015a      	lsls	r2, r3, #5
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	4413      	add	r3, r2
 8010352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801035c:	2b00      	cmp	r3, #0
 801035e:	d119      	bne.n	8010394 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	015a      	lsls	r2, r3, #5
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	4413      	add	r3, r2
 8010368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	791b      	ldrb	r3, [r3, #4]
 801037a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801037c:	430b      	orrs	r3, r1
 801037e:	431a      	orrs	r2, r3
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	0159      	lsls	r1, r3, #5
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	440b      	add	r3, r1
 8010388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801038c:	4619      	mov	r1, r3
 801038e:	4b05      	ldr	r3, [pc, #20]	@ (80103a4 <USB_ActivateEndpoint+0x10c>)
 8010390:	4313      	orrs	r3, r2
 8010392:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	10008000 	.word	0x10008000

080103a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	785b      	ldrb	r3, [r3, #1]
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d161      	bne.n	8010488 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	015a      	lsls	r2, r3, #5
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	4413      	add	r3, r2
 80103cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80103d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80103da:	d11f      	bne.n	801041c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	015a      	lsls	r2, r3, #5
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	4413      	add	r3, r2
 80103e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	0151      	lsls	r1, r2, #5
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	440a      	add	r2, r1
 80103f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80103f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80103fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	015a      	lsls	r2, r3, #5
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	4413      	add	r3, r2
 8010404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	68ba      	ldr	r2, [r7, #8]
 801040c:	0151      	lsls	r1, r2, #5
 801040e:	68fa      	ldr	r2, [r7, #12]
 8010410:	440a      	add	r2, r1
 8010412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010416:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801041a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	f003 030f 	and.w	r3, r3, #15
 801042c:	2101      	movs	r1, #1
 801042e:	fa01 f303 	lsl.w	r3, r1, r3
 8010432:	b29b      	uxth	r3, r3
 8010434:	43db      	mvns	r3, r3
 8010436:	68f9      	ldr	r1, [r7, #12]
 8010438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801043c:	4013      	ands	r3, r2
 801043e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010446:	69da      	ldr	r2, [r3, #28]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	f003 030f 	and.w	r3, r3, #15
 8010450:	2101      	movs	r1, #1
 8010452:	fa01 f303 	lsl.w	r3, r1, r3
 8010456:	b29b      	uxth	r3, r3
 8010458:	43db      	mvns	r3, r3
 801045a:	68f9      	ldr	r1, [r7, #12]
 801045c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010460:	4013      	ands	r3, r2
 8010462:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	015a      	lsls	r2, r3, #5
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	4413      	add	r3, r2
 801046c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	0159      	lsls	r1, r3, #5
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	440b      	add	r3, r1
 801047a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801047e:	4619      	mov	r1, r3
 8010480:	4b35      	ldr	r3, [pc, #212]	@ (8010558 <USB_DeactivateEndpoint+0x1b0>)
 8010482:	4013      	ands	r3, r2
 8010484:	600b      	str	r3, [r1, #0]
 8010486:	e060      	b.n	801054a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	015a      	lsls	r2, r3, #5
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	4413      	add	r3, r2
 8010490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801049a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801049e:	d11f      	bne.n	80104e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	015a      	lsls	r2, r3, #5
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	4413      	add	r3, r2
 80104a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	0151      	lsls	r1, r2, #5
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	440a      	add	r2, r1
 80104b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80104ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80104be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	015a      	lsls	r2, r3, #5
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	4413      	add	r3, r2
 80104c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	0151      	lsls	r1, r2, #5
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	440a      	add	r2, r1
 80104d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80104da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80104de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	f003 030f 	and.w	r3, r3, #15
 80104f0:	2101      	movs	r1, #1
 80104f2:	fa01 f303 	lsl.w	r3, r1, r3
 80104f6:	041b      	lsls	r3, r3, #16
 80104f8:	43db      	mvns	r3, r3
 80104fa:	68f9      	ldr	r1, [r7, #12]
 80104fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010500:	4013      	ands	r3, r2
 8010502:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801050a:	69da      	ldr	r2, [r3, #28]
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	f003 030f 	and.w	r3, r3, #15
 8010514:	2101      	movs	r1, #1
 8010516:	fa01 f303 	lsl.w	r3, r1, r3
 801051a:	041b      	lsls	r3, r3, #16
 801051c:	43db      	mvns	r3, r3
 801051e:	68f9      	ldr	r1, [r7, #12]
 8010520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010524:	4013      	ands	r3, r2
 8010526:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	015a      	lsls	r2, r3, #5
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010534:	681a      	ldr	r2, [r3, #0]
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	0159      	lsls	r1, r3, #5
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	440b      	add	r3, r1
 801053e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010542:	4619      	mov	r1, r3
 8010544:	4b05      	ldr	r3, [pc, #20]	@ (801055c <USB_DeactivateEndpoint+0x1b4>)
 8010546:	4013      	ands	r3, r2
 8010548:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3714      	adds	r7, #20
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr
 8010558:	ec337800 	.word	0xec337800
 801055c:	eff37800 	.word	0xeff37800

08010560 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b08a      	sub	sp, #40	@ 0x28
 8010564:	af02      	add	r7, sp, #8
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	4613      	mov	r3, r2
 801056c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	785b      	ldrb	r3, [r3, #1]
 801057c:	2b01      	cmp	r3, #1
 801057e:	f040 8181 	bne.w	8010884 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d132      	bne.n	80105f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	015a      	lsls	r2, r3, #5
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	4413      	add	r3, r2
 8010592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010596:	691a      	ldr	r2, [r3, #16]
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	0159      	lsls	r1, r3, #5
 801059c:	69fb      	ldr	r3, [r7, #28]
 801059e:	440b      	add	r3, r1
 80105a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105a4:	4619      	mov	r1, r3
 80105a6:	4ba5      	ldr	r3, [pc, #660]	@ (801083c <USB_EPStartXfer+0x2dc>)
 80105a8:	4013      	ands	r3, r2
 80105aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	015a      	lsls	r2, r3, #5
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	4413      	add	r3, r2
 80105b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	69ba      	ldr	r2, [r7, #24]
 80105bc:	0151      	lsls	r1, r2, #5
 80105be:	69fa      	ldr	r2, [r7, #28]
 80105c0:	440a      	add	r2, r1
 80105c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80105c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80105ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	015a      	lsls	r2, r3, #5
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	4413      	add	r3, r2
 80105d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105d8:	691a      	ldr	r2, [r3, #16]
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	0159      	lsls	r1, r3, #5
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	440b      	add	r3, r1
 80105e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105e6:	4619      	mov	r1, r3
 80105e8:	4b95      	ldr	r3, [pc, #596]	@ (8010840 <USB_EPStartXfer+0x2e0>)
 80105ea:	4013      	ands	r3, r2
 80105ec:	610b      	str	r3, [r1, #16]
 80105ee:	e092      	b.n	8010716 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	015a      	lsls	r2, r3, #5
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	4413      	add	r3, r2
 80105f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80105fc:	691a      	ldr	r2, [r3, #16]
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	0159      	lsls	r1, r3, #5
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	440b      	add	r3, r1
 8010606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801060a:	4619      	mov	r1, r3
 801060c:	4b8c      	ldr	r3, [pc, #560]	@ (8010840 <USB_EPStartXfer+0x2e0>)
 801060e:	4013      	ands	r3, r2
 8010610:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	015a      	lsls	r2, r3, #5
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	4413      	add	r3, r2
 801061a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801061e:	691a      	ldr	r2, [r3, #16]
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	0159      	lsls	r1, r3, #5
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	440b      	add	r3, r1
 8010628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801062c:	4619      	mov	r1, r3
 801062e:	4b83      	ldr	r3, [pc, #524]	@ (801083c <USB_EPStartXfer+0x2dc>)
 8010630:	4013      	ands	r3, r2
 8010632:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d11a      	bne.n	8010670 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	691a      	ldr	r2, [r3, #16]
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	689b      	ldr	r3, [r3, #8]
 8010642:	429a      	cmp	r2, r3
 8010644:	d903      	bls.n	801064e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	689a      	ldr	r2, [r3, #8]
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	015a      	lsls	r2, r3, #5
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	4413      	add	r3, r2
 8010656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801065a:	691b      	ldr	r3, [r3, #16]
 801065c:	69ba      	ldr	r2, [r7, #24]
 801065e:	0151      	lsls	r1, r2, #5
 8010660:	69fa      	ldr	r2, [r7, #28]
 8010662:	440a      	add	r2, r1
 8010664:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010668:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801066c:	6113      	str	r3, [r2, #16]
 801066e:	e01b      	b.n	80106a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010670:	69bb      	ldr	r3, [r7, #24]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801067c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	6919      	ldr	r1, [r3, #16]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	440b      	add	r3, r1
 8010688:	1e59      	subs	r1, r3, #1
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010692:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010694:	4b6b      	ldr	r3, [pc, #428]	@ (8010844 <USB_EPStartXfer+0x2e4>)
 8010696:	400b      	ands	r3, r1
 8010698:	69b9      	ldr	r1, [r7, #24]
 801069a:	0148      	lsls	r0, r1, #5
 801069c:	69f9      	ldr	r1, [r7, #28]
 801069e:	4401      	add	r1, r0
 80106a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80106a4:	4313      	orrs	r3, r2
 80106a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	015a      	lsls	r2, r3, #5
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	4413      	add	r3, r2
 80106b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106b4:	691a      	ldr	r2, [r3, #16]
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106be:	69b9      	ldr	r1, [r7, #24]
 80106c0:	0148      	lsls	r0, r1, #5
 80106c2:	69f9      	ldr	r1, [r7, #28]
 80106c4:	4401      	add	r1, r0
 80106c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80106ca:	4313      	orrs	r3, r2
 80106cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	791b      	ldrb	r3, [r3, #4]
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d11f      	bne.n	8010716 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	015a      	lsls	r2, r3, #5
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	4413      	add	r3, r2
 80106de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106e2:	691b      	ldr	r3, [r3, #16]
 80106e4:	69ba      	ldr	r2, [r7, #24]
 80106e6:	0151      	lsls	r1, r2, #5
 80106e8:	69fa      	ldr	r2, [r7, #28]
 80106ea:	440a      	add	r2, r1
 80106ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80106f0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80106f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	015a      	lsls	r2, r3, #5
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	4413      	add	r3, r2
 80106fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	0151      	lsls	r1, r2, #5
 8010708:	69fa      	ldr	r2, [r7, #28]
 801070a:	440a      	add	r2, r1
 801070c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010714:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010716:	79fb      	ldrb	r3, [r7, #7]
 8010718:	2b01      	cmp	r3, #1
 801071a:	d14b      	bne.n	80107b4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	69db      	ldr	r3, [r3, #28]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d009      	beq.n	8010738 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	015a      	lsls	r2, r3, #5
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	4413      	add	r3, r2
 801072c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010730:	461a      	mov	r2, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	69db      	ldr	r3, [r3, #28]
 8010736:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	791b      	ldrb	r3, [r3, #4]
 801073c:	2b01      	cmp	r3, #1
 801073e:	d128      	bne.n	8010792 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801074c:	2b00      	cmp	r3, #0
 801074e:	d110      	bne.n	8010772 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	4413      	add	r3, r2
 8010758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	69ba      	ldr	r2, [r7, #24]
 8010760:	0151      	lsls	r1, r2, #5
 8010762:	69fa      	ldr	r2, [r7, #28]
 8010764:	440a      	add	r2, r1
 8010766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801076a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801076e:	6013      	str	r3, [r2, #0]
 8010770:	e00f      	b.n	8010792 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	015a      	lsls	r2, r3, #5
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	4413      	add	r3, r2
 801077a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	69ba      	ldr	r2, [r7, #24]
 8010782:	0151      	lsls	r1, r2, #5
 8010784:	69fa      	ldr	r2, [r7, #28]
 8010786:	440a      	add	r2, r1
 8010788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010790:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	015a      	lsls	r2, r3, #5
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	4413      	add	r3, r2
 801079a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	69ba      	ldr	r2, [r7, #24]
 80107a2:	0151      	lsls	r1, r2, #5
 80107a4:	69fa      	ldr	r2, [r7, #28]
 80107a6:	440a      	add	r2, r1
 80107a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80107b0:	6013      	str	r3, [r2, #0]
 80107b2:	e16a      	b.n	8010a8a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	015a      	lsls	r2, r3, #5
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	4413      	add	r3, r2
 80107bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	69ba      	ldr	r2, [r7, #24]
 80107c4:	0151      	lsls	r1, r2, #5
 80107c6:	69fa      	ldr	r2, [r7, #28]
 80107c8:	440a      	add	r2, r1
 80107ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80107d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	791b      	ldrb	r3, [r3, #4]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d015      	beq.n	8010808 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	691b      	ldr	r3, [r3, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f000 8152 	beq.w	8010a8a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	f003 030f 	and.w	r3, r3, #15
 80107f6:	2101      	movs	r1, #1
 80107f8:	fa01 f303 	lsl.w	r3, r1, r3
 80107fc:	69f9      	ldr	r1, [r7, #28]
 80107fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010802:	4313      	orrs	r3, r2
 8010804:	634b      	str	r3, [r1, #52]	@ 0x34
 8010806:	e140      	b.n	8010a8a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010814:	2b00      	cmp	r3, #0
 8010816:	d117      	bne.n	8010848 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	015a      	lsls	r2, r3, #5
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	4413      	add	r3, r2
 8010820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	69ba      	ldr	r2, [r7, #24]
 8010828:	0151      	lsls	r1, r2, #5
 801082a:	69fa      	ldr	r2, [r7, #28]
 801082c:	440a      	add	r2, r1
 801082e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010832:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010836:	6013      	str	r3, [r2, #0]
 8010838:	e016      	b.n	8010868 <USB_EPStartXfer+0x308>
 801083a:	bf00      	nop
 801083c:	e007ffff 	.word	0xe007ffff
 8010840:	fff80000 	.word	0xfff80000
 8010844:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	015a      	lsls	r2, r3, #5
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	4413      	add	r3, r2
 8010850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	69ba      	ldr	r2, [r7, #24]
 8010858:	0151      	lsls	r1, r2, #5
 801085a:	69fa      	ldr	r2, [r7, #28]
 801085c:	440a      	add	r2, r1
 801085e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010866:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	68d9      	ldr	r1, [r3, #12]
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	781a      	ldrb	r2, [r3, #0]
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	b298      	uxth	r0, r3
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	4603      	mov	r3, r0
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f000 f9b9 	bl	8010bf4 <USB_WritePacket>
 8010882:	e102      	b.n	8010a8a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	015a      	lsls	r2, r3, #5
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	4413      	add	r3, r2
 801088c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010890:	691a      	ldr	r2, [r3, #16]
 8010892:	69bb      	ldr	r3, [r7, #24]
 8010894:	0159      	lsls	r1, r3, #5
 8010896:	69fb      	ldr	r3, [r7, #28]
 8010898:	440b      	add	r3, r1
 801089a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801089e:	4619      	mov	r1, r3
 80108a0:	4b7c      	ldr	r3, [pc, #496]	@ (8010a94 <USB_EPStartXfer+0x534>)
 80108a2:	4013      	ands	r3, r2
 80108a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	015a      	lsls	r2, r3, #5
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	4413      	add	r3, r2
 80108ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108b2:	691a      	ldr	r2, [r3, #16]
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	0159      	lsls	r1, r3, #5
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	440b      	add	r3, r1
 80108bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108c0:	4619      	mov	r1, r3
 80108c2:	4b75      	ldr	r3, [pc, #468]	@ (8010a98 <USB_EPStartXfer+0x538>)
 80108c4:	4013      	ands	r3, r2
 80108c6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d12f      	bne.n	801092e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d003      	beq.n	80108de <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	689a      	ldr	r2, [r3, #8]
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	689a      	ldr	r2, [r3, #8]
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	015a      	lsls	r2, r3, #5
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	4413      	add	r3, r2
 80108ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108f2:	691a      	ldr	r2, [r3, #16]
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	6a1b      	ldr	r3, [r3, #32]
 80108f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108fc:	69b9      	ldr	r1, [r7, #24]
 80108fe:	0148      	lsls	r0, r1, #5
 8010900:	69f9      	ldr	r1, [r7, #28]
 8010902:	4401      	add	r1, r0
 8010904:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010908:	4313      	orrs	r3, r2
 801090a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	015a      	lsls	r2, r3, #5
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	4413      	add	r3, r2
 8010914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010918:	691b      	ldr	r3, [r3, #16]
 801091a:	69ba      	ldr	r2, [r7, #24]
 801091c:	0151      	lsls	r1, r2, #5
 801091e:	69fa      	ldr	r2, [r7, #28]
 8010920:	440a      	add	r2, r1
 8010922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010926:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801092a:	6113      	str	r3, [r2, #16]
 801092c:	e05f      	b.n	80109ee <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	691b      	ldr	r3, [r3, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d123      	bne.n	801097e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	015a      	lsls	r2, r3, #5
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	4413      	add	r3, r2
 801093e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010942:	691a      	ldr	r2, [r3, #16]
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801094c:	69b9      	ldr	r1, [r7, #24]
 801094e:	0148      	lsls	r0, r1, #5
 8010950:	69f9      	ldr	r1, [r7, #28]
 8010952:	4401      	add	r1, r0
 8010954:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010958:	4313      	orrs	r3, r2
 801095a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	015a      	lsls	r2, r3, #5
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	4413      	add	r3, r2
 8010964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	69ba      	ldr	r2, [r7, #24]
 801096c:	0151      	lsls	r1, r2, #5
 801096e:	69fa      	ldr	r2, [r7, #28]
 8010970:	440a      	add	r2, r1
 8010972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010976:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801097a:	6113      	str	r3, [r2, #16]
 801097c:	e037      	b.n	80109ee <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	691a      	ldr	r2, [r3, #16]
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	4413      	add	r3, r2
 8010988:	1e5a      	subs	r2, r3, #1
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010992:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	8afa      	ldrh	r2, [r7, #22]
 801099a:	fb03 f202 	mul.w	r2, r3, r2
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	015a      	lsls	r2, r3, #5
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	4413      	add	r3, r2
 80109aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109ae:	691a      	ldr	r2, [r3, #16]
 80109b0:	8afb      	ldrh	r3, [r7, #22]
 80109b2:	04d9      	lsls	r1, r3, #19
 80109b4:	4b39      	ldr	r3, [pc, #228]	@ (8010a9c <USB_EPStartXfer+0x53c>)
 80109b6:	400b      	ands	r3, r1
 80109b8:	69b9      	ldr	r1, [r7, #24]
 80109ba:	0148      	lsls	r0, r1, #5
 80109bc:	69f9      	ldr	r1, [r7, #28]
 80109be:	4401      	add	r1, r0
 80109c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80109c4:	4313      	orrs	r3, r2
 80109c6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	015a      	lsls	r2, r3, #5
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	4413      	add	r3, r2
 80109d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109d4:	691a      	ldr	r2, [r3, #16]
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	6a1b      	ldr	r3, [r3, #32]
 80109da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109de:	69b9      	ldr	r1, [r7, #24]
 80109e0:	0148      	lsls	r0, r1, #5
 80109e2:	69f9      	ldr	r1, [r7, #28]
 80109e4:	4401      	add	r1, r0
 80109e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80109ea:	4313      	orrs	r3, r2
 80109ec:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80109ee:	79fb      	ldrb	r3, [r7, #7]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d10d      	bne.n	8010a10 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d009      	beq.n	8010a10 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	68d9      	ldr	r1, [r3, #12]
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	015a      	lsls	r2, r3, #5
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	4413      	add	r3, r2
 8010a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a0c:	460a      	mov	r2, r1
 8010a0e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	791b      	ldrb	r3, [r3, #4]
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d128      	bne.n	8010a6a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d110      	bne.n	8010a4a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010a28:	69bb      	ldr	r3, [r7, #24]
 8010a2a:	015a      	lsls	r2, r3, #5
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	4413      	add	r3, r2
 8010a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	69ba      	ldr	r2, [r7, #24]
 8010a38:	0151      	lsls	r1, r2, #5
 8010a3a:	69fa      	ldr	r2, [r7, #28]
 8010a3c:	440a      	add	r2, r1
 8010a3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010a46:	6013      	str	r3, [r2, #0]
 8010a48:	e00f      	b.n	8010a6a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	015a      	lsls	r2, r3, #5
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	4413      	add	r3, r2
 8010a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	69ba      	ldr	r2, [r7, #24]
 8010a5a:	0151      	lsls	r1, r2, #5
 8010a5c:	69fa      	ldr	r2, [r7, #28]
 8010a5e:	440a      	add	r2, r1
 8010a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010a68:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	015a      	lsls	r2, r3, #5
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	4413      	add	r3, r2
 8010a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	69ba      	ldr	r2, [r7, #24]
 8010a7a:	0151      	lsls	r1, r2, #5
 8010a7c:	69fa      	ldr	r2, [r7, #28]
 8010a7e:	440a      	add	r2, r1
 8010a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010a88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3720      	adds	r7, #32
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	fff80000 	.word	0xfff80000
 8010a98:	e007ffff 	.word	0xe007ffff
 8010a9c:	1ff80000 	.word	0x1ff80000

08010aa0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b087      	sub	sp, #28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	785b      	ldrb	r3, [r3, #1]
 8010aba:	2b01      	cmp	r3, #1
 8010abc:	d14a      	bne.n	8010b54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	015a      	lsls	r2, r3, #5
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010ad6:	f040 8086 	bne.w	8010be6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	015a      	lsls	r2, r3, #5
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	7812      	ldrb	r2, [r2, #0]
 8010aee:	0151      	lsls	r1, r2, #5
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	440a      	add	r2, r1
 8010af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010af8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010afc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	015a      	lsls	r2, r3, #5
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	4413      	add	r3, r2
 8010b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	683a      	ldr	r2, [r7, #0]
 8010b10:	7812      	ldrb	r2, [r2, #0]
 8010b12:	0151      	lsls	r1, r2, #5
 8010b14:	693a      	ldr	r2, [r7, #16]
 8010b16:	440a      	add	r2, r1
 8010b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010b20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	3301      	adds	r3, #1
 8010b26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d902      	bls.n	8010b38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	75fb      	strb	r3, [r7, #23]
          break;
 8010b36:	e056      	b.n	8010be6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	015a      	lsls	r2, r3, #5
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	4413      	add	r3, r2
 8010b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b50:	d0e7      	beq.n	8010b22 <USB_EPStopXfer+0x82>
 8010b52:	e048      	b.n	8010be6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	015a      	lsls	r2, r3, #5
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010b6c:	d13b      	bne.n	8010be6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	015a      	lsls	r2, r3, #5
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	4413      	add	r3, r2
 8010b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	683a      	ldr	r2, [r7, #0]
 8010b80:	7812      	ldrb	r2, [r2, #0]
 8010b82:	0151      	lsls	r1, r2, #5
 8010b84:	693a      	ldr	r2, [r7, #16]
 8010b86:	440a      	add	r2, r1
 8010b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010b90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	015a      	lsls	r2, r3, #5
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	683a      	ldr	r2, [r7, #0]
 8010ba4:	7812      	ldrb	r2, [r2, #0]
 8010ba6:	0151      	lsls	r1, r2, #5
 8010ba8:	693a      	ldr	r2, [r7, #16]
 8010baa:	440a      	add	r2, r1
 8010bac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d902      	bls.n	8010bcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8010bca:	e00c      	b.n	8010be6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	015a      	lsls	r2, r3, #5
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010be4:	d0e7      	beq.n	8010bb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	371c      	adds	r7, #28
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b089      	sub	sp, #36	@ 0x24
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	60f8      	str	r0, [r7, #12]
 8010bfc:	60b9      	str	r1, [r7, #8]
 8010bfe:	4611      	mov	r1, r2
 8010c00:	461a      	mov	r2, r3
 8010c02:	460b      	mov	r3, r1
 8010c04:	71fb      	strb	r3, [r7, #7]
 8010c06:	4613      	mov	r3, r2
 8010c08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010c12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d123      	bne.n	8010c62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010c1a:	88bb      	ldrh	r3, [r7, #4]
 8010c1c:	3303      	adds	r3, #3
 8010c1e:	089b      	lsrs	r3, r3, #2
 8010c20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010c22:	2300      	movs	r3, #0
 8010c24:	61bb      	str	r3, [r7, #24]
 8010c26:	e018      	b.n	8010c5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010c28:	79fb      	ldrb	r3, [r7, #7]
 8010c2a:	031a      	lsls	r2, r3, #12
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	4413      	add	r3, r2
 8010c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010c34:	461a      	mov	r2, r3
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	3301      	adds	r3, #1
 8010c46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	3301      	adds	r3, #1
 8010c52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	3301      	adds	r3, #1
 8010c58:	61bb      	str	r3, [r7, #24]
 8010c5a:	69ba      	ldr	r2, [r7, #24]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d3e2      	bcc.n	8010c28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010c62:	2300      	movs	r3, #0
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3724      	adds	r7, #36	@ 0x24
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b08b      	sub	sp, #44	@ 0x2c
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010c86:	88fb      	ldrh	r3, [r7, #6]
 8010c88:	089b      	lsrs	r3, r3, #2
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010c8e:	88fb      	ldrh	r3, [r7, #6]
 8010c90:	f003 0303 	and.w	r3, r3, #3
 8010c94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010c96:	2300      	movs	r3, #0
 8010c98:	623b      	str	r3, [r7, #32]
 8010c9a:	e014      	b.n	8010cc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010ca2:	681a      	ldr	r2, [r3, #0]
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca6:	601a      	str	r2, [r3, #0]
    pDest++;
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010caa:	3301      	adds	r3, #1
 8010cac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010cc0:	6a3b      	ldr	r3, [r7, #32]
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	623b      	str	r3, [r7, #32]
 8010cc6:	6a3a      	ldr	r2, [r7, #32]
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d3e6      	bcc.n	8010c9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010cce:	8bfb      	ldrh	r3, [r7, #30]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d01e      	beq.n	8010d12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010cd8:	69bb      	ldr	r3, [r7, #24]
 8010cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010cde:	461a      	mov	r2, r3
 8010ce0:	f107 0310 	add.w	r3, r7, #16
 8010ce4:	6812      	ldr	r2, [r2, #0]
 8010ce6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010ce8:	693a      	ldr	r2, [r7, #16]
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8010cf4:	b2da      	uxtb	r2, r3
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf8:	701a      	strb	r2, [r3, #0]
      i++;
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	623b      	str	r3, [r7, #32]
      pDest++;
 8010d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d02:	3301      	adds	r3, #1
 8010d04:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010d06:	8bfb      	ldrh	r3, [r7, #30]
 8010d08:	3b01      	subs	r3, #1
 8010d0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010d0c:	8bfb      	ldrh	r3, [r7, #30]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1ea      	bne.n	8010ce8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	372c      	adds	r7, #44	@ 0x2c
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b085      	sub	sp, #20
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	785b      	ldrb	r3, [r3, #1]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d12c      	bne.n	8010d96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	015a      	lsls	r2, r3, #5
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	4413      	add	r3, r2
 8010d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	db12      	blt.n	8010d74 <USB_EPSetStall+0x54>
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d00f      	beq.n	8010d74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	015a      	lsls	r2, r3, #5
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	0151      	lsls	r1, r2, #5
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	440a      	add	r2, r1
 8010d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010d72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	015a      	lsls	r2, r3, #5
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	68ba      	ldr	r2, [r7, #8]
 8010d84:	0151      	lsls	r1, r2, #5
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	440a      	add	r2, r1
 8010d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	e02b      	b.n	8010dee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	015a      	lsls	r2, r3, #5
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	db12      	blt.n	8010dce <USB_EPSetStall+0xae>
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00f      	beq.n	8010dce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	015a      	lsls	r2, r3, #5
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	4413      	add	r3, r2
 8010db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	0151      	lsls	r1, r2, #5
 8010dc0:	68fa      	ldr	r2, [r7, #12]
 8010dc2:	440a      	add	r2, r1
 8010dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010dc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010dcc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	015a      	lsls	r2, r3, #5
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	0151      	lsls	r1, r2, #5
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	440a      	add	r2, r1
 8010de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010de8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010dec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr

08010dfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d128      	bne.n	8010e6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	0151      	lsls	r1, r2, #5
 8010e2a:	68fa      	ldr	r2, [r7, #12]
 8010e2c:	440a      	add	r2, r1
 8010e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010e36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	791b      	ldrb	r3, [r3, #4]
 8010e3c:	2b03      	cmp	r3, #3
 8010e3e:	d003      	beq.n	8010e48 <USB_EPClearStall+0x4c>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	791b      	ldrb	r3, [r3, #4]
 8010e44:	2b02      	cmp	r3, #2
 8010e46:	d138      	bne.n	8010eba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	015a      	lsls	r2, r3, #5
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	4413      	add	r3, r2
 8010e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	68ba      	ldr	r2, [r7, #8]
 8010e58:	0151      	lsls	r1, r2, #5
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	440a      	add	r2, r1
 8010e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	e027      	b.n	8010eba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	015a      	lsls	r2, r3, #5
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	4413      	add	r3, r2
 8010e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	0151      	lsls	r1, r2, #5
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	440a      	add	r2, r1
 8010e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010e88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	791b      	ldrb	r3, [r3, #4]
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	d003      	beq.n	8010e9a <USB_EPClearStall+0x9e>
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	791b      	ldrb	r3, [r3, #4]
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	d10f      	bne.n	8010eba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	015a      	lsls	r2, r3, #5
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	4413      	add	r3, r2
 8010ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	0151      	lsls	r1, r2, #5
 8010eac:	68fa      	ldr	r2, [r7, #12]
 8010eae:	440a      	add	r2, r1
 8010eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010eb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010eba:	2300      	movs	r3, #0
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3714      	adds	r7, #20
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010ee6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010eea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	78fb      	ldrb	r3, [r7, #3]
 8010ef6:	011b      	lsls	r3, r3, #4
 8010ef8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010efc:	68f9      	ldr	r1, [r7, #12]
 8010efe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f02:	4313      	orrs	r3, r2
 8010f04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3714      	adds	r7, #20
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010f2e:	f023 0303 	bic.w	r3, r3, #3
 8010f32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f42:	f023 0302 	bic.w	r3, r3, #2
 8010f46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3714      	adds	r7, #20
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f54:	4770      	bx	lr

08010f56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010f56:	b480      	push	{r7}
 8010f58:	b085      	sub	sp, #20
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010f70:	f023 0303 	bic.w	r3, r3, #3
 8010f74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	68fa      	ldr	r2, [r7, #12]
 8010f80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f84:	f043 0302 	orr.w	r3, r3, #2
 8010f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f8a:	2300      	movs	r3, #0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3714      	adds	r7, #20
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr

08010f98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	695b      	ldr	r3, [r3, #20]
 8010fa4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	699b      	ldr	r3, [r3, #24]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	4013      	ands	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr

08010fbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010fbe:	b480      	push	{r7}
 8010fc0:	b085      	sub	sp, #20
 8010fc2:	af00      	add	r7, sp, #0
 8010fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fd0:	699b      	ldr	r3, [r3, #24]
 8010fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fda:	69db      	ldr	r3, [r3, #28]
 8010fdc:	68ba      	ldr	r2, [r7, #8]
 8010fde:	4013      	ands	r3, r2
 8010fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	0c1b      	lsrs	r3, r3, #16
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3714      	adds	r7, #20
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr

08010ff2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ff2:	b480      	push	{r7}
 8010ff4:	b085      	sub	sp, #20
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011004:	699b      	ldr	r3, [r3, #24]
 8011006:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801100e:	69db      	ldr	r3, [r3, #28]
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	4013      	ands	r3, r2
 8011014:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	b29b      	uxth	r3, r3
}
 801101a:	4618      	mov	r0, r3
 801101c:	3714      	adds	r7, #20
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr

08011026 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011026:	b480      	push	{r7}
 8011028:	b085      	sub	sp, #20
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	460b      	mov	r3, r1
 8011030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011036:	78fb      	ldrb	r3, [r7, #3]
 8011038:	015a      	lsls	r2, r3, #5
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	4413      	add	r3, r2
 801103e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011042:	689b      	ldr	r3, [r3, #8]
 8011044:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	68ba      	ldr	r2, [r7, #8]
 8011050:	4013      	ands	r3, r2
 8011052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011054:	68bb      	ldr	r3, [r7, #8]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3714      	adds	r7, #20
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr

08011062 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011062:	b480      	push	{r7}
 8011064:	b087      	sub	sp, #28
 8011066:	af00      	add	r7, sp, #0
 8011068:	6078      	str	r0, [r7, #4]
 801106a:	460b      	mov	r3, r1
 801106c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011084:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011086:	78fb      	ldrb	r3, [r7, #3]
 8011088:	f003 030f 	and.w	r3, r3, #15
 801108c:	68fa      	ldr	r2, [r7, #12]
 801108e:	fa22 f303 	lsr.w	r3, r2, r3
 8011092:	01db      	lsls	r3, r3, #7
 8011094:	b2db      	uxtb	r3, r3
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	4313      	orrs	r3, r2
 801109a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801109c:	78fb      	ldrb	r3, [r7, #3]
 801109e:	015a      	lsls	r2, r3, #5
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	4413      	add	r3, r2
 80110a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110a8:	689b      	ldr	r3, [r3, #8]
 80110aa:	693a      	ldr	r2, [r7, #16]
 80110ac:	4013      	ands	r3, r2
 80110ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80110b0:	68bb      	ldr	r3, [r7, #8]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	371c      	adds	r7, #28
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80110be:	b480      	push	{r7}
 80110c0:	b083      	sub	sp, #12
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	f003 0301 	and.w	r3, r3, #1
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
	...

080110dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110ee:	681a      	ldr	r2, [r3, #0]
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110f6:	4619      	mov	r1, r3
 80110f8:	4b09      	ldr	r3, [pc, #36]	@ (8011120 <USB_ActivateSetup+0x44>)
 80110fa:	4013      	ands	r3, r2
 80110fc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	68fa      	ldr	r2, [r7, #12]
 8011108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801110c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3714      	adds	r7, #20
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	fffff800 	.word	0xfffff800

08011124 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011124:	b480      	push	{r7}
 8011126:	b087      	sub	sp, #28
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	460b      	mov	r3, r1
 801112e:	607a      	str	r2, [r7, #4]
 8011130:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	333c      	adds	r3, #60	@ 0x3c
 801113a:	3304      	adds	r3, #4
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	4a26      	ldr	r2, [pc, #152]	@ (80111dc <USB_EP0_OutStart+0xb8>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d90a      	bls.n	801115e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011158:	d101      	bne.n	801115e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801115a:	2300      	movs	r3, #0
 801115c:	e037      	b.n	80111ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011164:	461a      	mov	r2, r3
 8011166:	2300      	movs	r3, #0
 8011168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	697a      	ldr	r2, [r7, #20]
 8011174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011178:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801117c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801118c:	f043 0318 	orr.w	r3, r3, #24
 8011190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011198:	691b      	ldr	r3, [r3, #16]
 801119a:	697a      	ldr	r2, [r7, #20]
 801119c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111a0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80111a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80111a6:	7afb      	ldrb	r3, [r7, #11]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d10f      	bne.n	80111cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111b2:	461a      	mov	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	697a      	ldr	r2, [r7, #20]
 80111c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111c6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80111ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	371c      	adds	r7, #28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	4f54300a 	.word	0x4f54300a

080111e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80111e8:	2300      	movs	r3, #0
 80111ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	3301      	adds	r3, #1
 80111f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80111f8:	d901      	bls.n	80111fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80111fa:	2303      	movs	r3, #3
 80111fc:	e01b      	b.n	8011236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	2b00      	cmp	r3, #0
 8011204:	daf2      	bge.n	80111ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011206:	2300      	movs	r3, #0
 8011208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	691b      	ldr	r3, [r3, #16]
 801120e:	f043 0201 	orr.w	r2, r3, #1
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	3301      	adds	r3, #1
 801121a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011222:	d901      	bls.n	8011228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011224:	2303      	movs	r3, #3
 8011226:	e006      	b.n	8011236 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	f003 0301 	and.w	r3, r3, #1
 8011230:	2b01      	cmp	r3, #1
 8011232:	d0f0      	beq.n	8011216 <USB_CoreReset+0x36>

  return HAL_OK;
 8011234:	2300      	movs	r3, #0
}
 8011236:	4618      	mov	r0, r3
 8011238:	3714      	adds	r7, #20
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr
	...

08011244 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	460b      	mov	r3, r1
 801124e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011250:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011254:	f005 fa9c 	bl	8016790 <USBD_static_malloc>
 8011258:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d109      	bne.n	8011274 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	32b0      	adds	r2, #176	@ 0xb0
 801126a:	2100      	movs	r1, #0
 801126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011270:	2302      	movs	r3, #2
 8011272:	e0d4      	b.n	801141e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011274:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011278:	2100      	movs	r1, #0
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f006 fefc 	bl	8018078 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	32b0      	adds	r2, #176	@ 0xb0
 801128a:	68f9      	ldr	r1, [r7, #12]
 801128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	32b0      	adds	r2, #176	@ 0xb0
 801129a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7c1b      	ldrb	r3, [r3, #16]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d138      	bne.n	801131e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80112ac:	4b5e      	ldr	r3, [pc, #376]	@ (8011428 <USBD_CDC_Init+0x1e4>)
 80112ae:	7819      	ldrb	r1, [r3, #0]
 80112b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112b4:	2202      	movs	r2, #2
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f005 f947 	bl	801654a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80112bc:	4b5a      	ldr	r3, [pc, #360]	@ (8011428 <USBD_CDC_Init+0x1e4>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	f003 020f 	and.w	r2, r3, #15
 80112c4:	6879      	ldr	r1, [r7, #4]
 80112c6:	4613      	mov	r3, r2
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	4413      	add	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	440b      	add	r3, r1
 80112d0:	3324      	adds	r3, #36	@ 0x24
 80112d2:	2201      	movs	r2, #1
 80112d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80112d6:	4b55      	ldr	r3, [pc, #340]	@ (801142c <USBD_CDC_Init+0x1e8>)
 80112d8:	7819      	ldrb	r1, [r3, #0]
 80112da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112de:	2202      	movs	r2, #2
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f005 f932 	bl	801654a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80112e6:	4b51      	ldr	r3, [pc, #324]	@ (801142c <USBD_CDC_Init+0x1e8>)
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	f003 020f 	and.w	r2, r3, #15
 80112ee:	6879      	ldr	r1, [r7, #4]
 80112f0:	4613      	mov	r3, r2
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4413      	add	r3, r2
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	440b      	add	r3, r1
 80112fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80112fe:	2201      	movs	r2, #1
 8011300:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011302:	4b4b      	ldr	r3, [pc, #300]	@ (8011430 <USBD_CDC_Init+0x1ec>)
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	f003 020f 	and.w	r2, r3, #15
 801130a:	6879      	ldr	r1, [r7, #4]
 801130c:	4613      	mov	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	440b      	add	r3, r1
 8011316:	3326      	adds	r3, #38	@ 0x26
 8011318:	2210      	movs	r2, #16
 801131a:	801a      	strh	r2, [r3, #0]
 801131c:	e035      	b.n	801138a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801131e:	4b42      	ldr	r3, [pc, #264]	@ (8011428 <USBD_CDC_Init+0x1e4>)
 8011320:	7819      	ldrb	r1, [r3, #0]
 8011322:	2340      	movs	r3, #64	@ 0x40
 8011324:	2202      	movs	r2, #2
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f005 f90f 	bl	801654a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801132c:	4b3e      	ldr	r3, [pc, #248]	@ (8011428 <USBD_CDC_Init+0x1e4>)
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	f003 020f 	and.w	r2, r3, #15
 8011334:	6879      	ldr	r1, [r7, #4]
 8011336:	4613      	mov	r3, r2
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	4413      	add	r3, r2
 801133c:	009b      	lsls	r3, r3, #2
 801133e:	440b      	add	r3, r1
 8011340:	3324      	adds	r3, #36	@ 0x24
 8011342:	2201      	movs	r2, #1
 8011344:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011346:	4b39      	ldr	r3, [pc, #228]	@ (801142c <USBD_CDC_Init+0x1e8>)
 8011348:	7819      	ldrb	r1, [r3, #0]
 801134a:	2340      	movs	r3, #64	@ 0x40
 801134c:	2202      	movs	r2, #2
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f005 f8fb 	bl	801654a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011354:	4b35      	ldr	r3, [pc, #212]	@ (801142c <USBD_CDC_Init+0x1e8>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f003 020f 	and.w	r2, r3, #15
 801135c:	6879      	ldr	r1, [r7, #4]
 801135e:	4613      	mov	r3, r2
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	4413      	add	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	440b      	add	r3, r1
 8011368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801136c:	2201      	movs	r2, #1
 801136e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011370:	4b2f      	ldr	r3, [pc, #188]	@ (8011430 <USBD_CDC_Init+0x1ec>)
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	f003 020f 	and.w	r2, r3, #15
 8011378:	6879      	ldr	r1, [r7, #4]
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	440b      	add	r3, r1
 8011384:	3326      	adds	r3, #38	@ 0x26
 8011386:	2210      	movs	r2, #16
 8011388:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801138a:	4b29      	ldr	r3, [pc, #164]	@ (8011430 <USBD_CDC_Init+0x1ec>)
 801138c:	7819      	ldrb	r1, [r3, #0]
 801138e:	2308      	movs	r3, #8
 8011390:	2203      	movs	r2, #3
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f005 f8d9 	bl	801654a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011398:	4b25      	ldr	r3, [pc, #148]	@ (8011430 <USBD_CDC_Init+0x1ec>)
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	f003 020f 	and.w	r2, r3, #15
 80113a0:	6879      	ldr	r1, [r7, #4]
 80113a2:	4613      	mov	r3, r2
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	4413      	add	r3, r2
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	440b      	add	r3, r1
 80113ac:	3324      	adds	r3, #36	@ 0x24
 80113ae:	2201      	movs	r2, #1
 80113b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2200      	movs	r2, #0
 80113b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	33b0      	adds	r3, #176	@ 0xb0
 80113c4:	009b      	lsls	r3, r3, #2
 80113c6:	4413      	add	r3, r2
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2200      	movs	r2, #0
 80113d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d101      	bne.n	80113ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80113e8:	2302      	movs	r3, #2
 80113ea:	e018      	b.n	801141e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	7c1b      	ldrb	r3, [r3, #16]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d10a      	bne.n	801140a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80113f4:	4b0d      	ldr	r3, [pc, #52]	@ (801142c <USBD_CDC_Init+0x1e8>)
 80113f6:	7819      	ldrb	r1, [r3, #0]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80113fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f005 f990 	bl	8016728 <USBD_LL_PrepareReceive>
 8011408:	e008      	b.n	801141c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801140a:	4b08      	ldr	r3, [pc, #32]	@ (801142c <USBD_CDC_Init+0x1e8>)
 801140c:	7819      	ldrb	r1, [r3, #0]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011414:	2340      	movs	r3, #64	@ 0x40
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f005 f986 	bl	8016728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	24000097 	.word	0x24000097
 801142c:	24000098 	.word	0x24000098
 8011430:	24000099 	.word	0x24000099

08011434 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	460b      	mov	r3, r1
 801143e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011440:	4b3a      	ldr	r3, [pc, #232]	@ (801152c <USBD_CDC_DeInit+0xf8>)
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	4619      	mov	r1, r3
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f005 f8a5 	bl	8016596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801144c:	4b37      	ldr	r3, [pc, #220]	@ (801152c <USBD_CDC_DeInit+0xf8>)
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	f003 020f 	and.w	r2, r3, #15
 8011454:	6879      	ldr	r1, [r7, #4]
 8011456:	4613      	mov	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	440b      	add	r3, r1
 8011460:	3324      	adds	r3, #36	@ 0x24
 8011462:	2200      	movs	r2, #0
 8011464:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011466:	4b32      	ldr	r3, [pc, #200]	@ (8011530 <USBD_CDC_DeInit+0xfc>)
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	4619      	mov	r1, r3
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f005 f892 	bl	8016596 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011472:	4b2f      	ldr	r3, [pc, #188]	@ (8011530 <USBD_CDC_DeInit+0xfc>)
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	f003 020f 	and.w	r2, r3, #15
 801147a:	6879      	ldr	r1, [r7, #4]
 801147c:	4613      	mov	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	4413      	add	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	440b      	add	r3, r1
 8011486:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801148a:	2200      	movs	r2, #0
 801148c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801148e:	4b29      	ldr	r3, [pc, #164]	@ (8011534 <USBD_CDC_DeInit+0x100>)
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	4619      	mov	r1, r3
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f005 f87e 	bl	8016596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801149a:	4b26      	ldr	r3, [pc, #152]	@ (8011534 <USBD_CDC_DeInit+0x100>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	f003 020f 	and.w	r2, r3, #15
 80114a2:	6879      	ldr	r1, [r7, #4]
 80114a4:	4613      	mov	r3, r2
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	4413      	add	r3, r2
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	440b      	add	r3, r1
 80114ae:	3324      	adds	r3, #36	@ 0x24
 80114b0:	2200      	movs	r2, #0
 80114b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80114b4:	4b1f      	ldr	r3, [pc, #124]	@ (8011534 <USBD_CDC_DeInit+0x100>)
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	f003 020f 	and.w	r2, r3, #15
 80114bc:	6879      	ldr	r1, [r7, #4]
 80114be:	4613      	mov	r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4413      	add	r3, r2
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	440b      	add	r3, r1
 80114c8:	3326      	adds	r3, #38	@ 0x26
 80114ca:	2200      	movs	r2, #0
 80114cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	32b0      	adds	r2, #176	@ 0xb0
 80114d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d01f      	beq.n	8011520 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	33b0      	adds	r3, #176	@ 0xb0
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	32b0      	adds	r2, #176	@ 0xb0
 80114fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011502:	4618      	mov	r0, r3
 8011504:	f005 f952 	bl	80167ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	32b0      	adds	r2, #176	@ 0xb0
 8011512:	2100      	movs	r1, #0
 8011514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2200      	movs	r2, #0
 801151c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	24000097 	.word	0x24000097
 8011530:	24000098 	.word	0x24000098
 8011534:	24000099 	.word	0x24000099

08011538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	32b0      	adds	r2, #176	@ 0xb0
 801154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011550:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011552:	2300      	movs	r3, #0
 8011554:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011556:	2300      	movs	r3, #0
 8011558:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801155a:	2300      	movs	r3, #0
 801155c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011564:	2303      	movs	r3, #3
 8011566:	e0bf      	b.n	80116e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011570:	2b00      	cmp	r3, #0
 8011572:	d050      	beq.n	8011616 <USBD_CDC_Setup+0xde>
 8011574:	2b20      	cmp	r3, #32
 8011576:	f040 80af 	bne.w	80116d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	88db      	ldrh	r3, [r3, #6]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d03a      	beq.n	80115f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	b25b      	sxtb	r3, r3
 8011588:	2b00      	cmp	r3, #0
 801158a:	da1b      	bge.n	80115c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	33b0      	adds	r3, #176	@ 0xb0
 8011596:	009b      	lsls	r3, r3, #2
 8011598:	4413      	add	r3, r2
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	689b      	ldr	r3, [r3, #8]
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80115a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80115a4:	683a      	ldr	r2, [r7, #0]
 80115a6:	88d2      	ldrh	r2, [r2, #6]
 80115a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	88db      	ldrh	r3, [r3, #6]
 80115ae:	2b07      	cmp	r3, #7
 80115b0:	bf28      	it	cs
 80115b2:	2307      	movcs	r3, #7
 80115b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	89fa      	ldrh	r2, [r7, #14]
 80115ba:	4619      	mov	r1, r3
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f001 fdbd 	bl	801313c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80115c2:	e090      	b.n	80116e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	785a      	ldrb	r2, [r3, #1]
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	88db      	ldrh	r3, [r3, #6]
 80115d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80115d4:	d803      	bhi.n	80115de <USBD_CDC_Setup+0xa6>
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	88db      	ldrh	r3, [r3, #6]
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	e000      	b.n	80115e0 <USBD_CDC_Setup+0xa8>
 80115de:	2240      	movs	r2, #64	@ 0x40
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80115e6:	6939      	ldr	r1, [r7, #16]
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80115ee:	461a      	mov	r2, r3
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f001 fdcf 	bl	8013194 <USBD_CtlPrepareRx>
      break;
 80115f6:	e076      	b.n	80116e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	33b0      	adds	r3, #176	@ 0xb0
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	4413      	add	r3, r2
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	7850      	ldrb	r0, [r2, #1]
 801160e:	2200      	movs	r2, #0
 8011610:	6839      	ldr	r1, [r7, #0]
 8011612:	4798      	blx	r3
      break;
 8011614:	e067      	b.n	80116e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	785b      	ldrb	r3, [r3, #1]
 801161a:	2b0b      	cmp	r3, #11
 801161c:	d851      	bhi.n	80116c2 <USBD_CDC_Setup+0x18a>
 801161e:	a201      	add	r2, pc, #4	@ (adr r2, 8011624 <USBD_CDC_Setup+0xec>)
 8011620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011624:	08011655 	.word	0x08011655
 8011628:	080116d1 	.word	0x080116d1
 801162c:	080116c3 	.word	0x080116c3
 8011630:	080116c3 	.word	0x080116c3
 8011634:	080116c3 	.word	0x080116c3
 8011638:	080116c3 	.word	0x080116c3
 801163c:	080116c3 	.word	0x080116c3
 8011640:	080116c3 	.word	0x080116c3
 8011644:	080116c3 	.word	0x080116c3
 8011648:	080116c3 	.word	0x080116c3
 801164c:	0801167f 	.word	0x0801167f
 8011650:	080116a9 	.word	0x080116a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801165a:	b2db      	uxtb	r3, r3
 801165c:	2b03      	cmp	r3, #3
 801165e:	d107      	bne.n	8011670 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011660:	f107 030a 	add.w	r3, r7, #10
 8011664:	2202      	movs	r2, #2
 8011666:	4619      	mov	r1, r3
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f001 fd67 	bl	801313c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801166e:	e032      	b.n	80116d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011670:	6839      	ldr	r1, [r7, #0]
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f001 fce5 	bl	8013042 <USBD_CtlError>
            ret = USBD_FAIL;
 8011678:	2303      	movs	r3, #3
 801167a:	75fb      	strb	r3, [r7, #23]
          break;
 801167c:	e02b      	b.n	80116d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011684:	b2db      	uxtb	r3, r3
 8011686:	2b03      	cmp	r3, #3
 8011688:	d107      	bne.n	801169a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801168a:	f107 030d 	add.w	r3, r7, #13
 801168e:	2201      	movs	r2, #1
 8011690:	4619      	mov	r1, r3
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f001 fd52 	bl	801313c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011698:	e01d      	b.n	80116d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801169a:	6839      	ldr	r1, [r7, #0]
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f001 fcd0 	bl	8013042 <USBD_CtlError>
            ret = USBD_FAIL;
 80116a2:	2303      	movs	r3, #3
 80116a4:	75fb      	strb	r3, [r7, #23]
          break;
 80116a6:	e016      	b.n	80116d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	2b03      	cmp	r3, #3
 80116b2:	d00f      	beq.n	80116d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f001 fcc3 	bl	8013042 <USBD_CtlError>
            ret = USBD_FAIL;
 80116bc:	2303      	movs	r3, #3
 80116be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80116c0:	e008      	b.n	80116d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f001 fcbc 	bl	8013042 <USBD_CtlError>
          ret = USBD_FAIL;
 80116ca:	2303      	movs	r3, #3
 80116cc:	75fb      	strb	r3, [r7, #23]
          break;
 80116ce:	e002      	b.n	80116d6 <USBD_CDC_Setup+0x19e>
          break;
 80116d0:	bf00      	nop
 80116d2:	e008      	b.n	80116e6 <USBD_CDC_Setup+0x1ae>
          break;
 80116d4:	bf00      	nop
      }
      break;
 80116d6:	e006      	b.n	80116e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f001 fcb1 	bl	8013042 <USBD_CtlError>
      ret = USBD_FAIL;
 80116e0:	2303      	movs	r3, #3
 80116e2:	75fb      	strb	r3, [r7, #23]
      break;
 80116e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3718      	adds	r7, #24
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	460b      	mov	r3, r1
 80116fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011702:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	32b0      	adds	r2, #176	@ 0xb0
 801170e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d101      	bne.n	801171a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011716:	2303      	movs	r3, #3
 8011718:	e065      	b.n	80117e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	32b0      	adds	r2, #176	@ 0xb0
 8011724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011728:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801172a:	78fb      	ldrb	r3, [r7, #3]
 801172c:	f003 020f 	and.w	r2, r3, #15
 8011730:	6879      	ldr	r1, [r7, #4]
 8011732:	4613      	mov	r3, r2
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	4413      	add	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	440b      	add	r3, r1
 801173c:	3318      	adds	r3, #24
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d02f      	beq.n	80117a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011744:	78fb      	ldrb	r3, [r7, #3]
 8011746:	f003 020f 	and.w	r2, r3, #15
 801174a:	6879      	ldr	r1, [r7, #4]
 801174c:	4613      	mov	r3, r2
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	4413      	add	r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	440b      	add	r3, r1
 8011756:	3318      	adds	r3, #24
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	78fb      	ldrb	r3, [r7, #3]
 801175c:	f003 010f 	and.w	r1, r3, #15
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	460b      	mov	r3, r1
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	440b      	add	r3, r1
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	4403      	add	r3, r0
 801176c:	331c      	adds	r3, #28
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	fbb2 f1f3 	udiv	r1, r2, r3
 8011774:	fb01 f303 	mul.w	r3, r1, r3
 8011778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801177a:	2b00      	cmp	r3, #0
 801177c:	d112      	bne.n	80117a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801177e:	78fb      	ldrb	r3, [r7, #3]
 8011780:	f003 020f 	and.w	r2, r3, #15
 8011784:	6879      	ldr	r1, [r7, #4]
 8011786:	4613      	mov	r3, r2
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	4413      	add	r3, r2
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	440b      	add	r3, r1
 8011790:	3318      	adds	r3, #24
 8011792:	2200      	movs	r2, #0
 8011794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011796:	78f9      	ldrb	r1, [r7, #3]
 8011798:	2300      	movs	r3, #0
 801179a:	2200      	movs	r2, #0
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f004 ffa2 	bl	80166e6 <USBD_LL_Transmit>
 80117a2:	e01f      	b.n	80117e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2200      	movs	r2, #0
 80117a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	33b0      	adds	r3, #176	@ 0xb0
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d010      	beq.n	80117e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	33b0      	adds	r3, #176	@ 0xb0
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	4413      	add	r3, r2
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	691b      	ldr	r3, [r3, #16]
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80117da:	68ba      	ldr	r2, [r7, #8]
 80117dc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80117e0:	78fa      	ldrb	r2, [r7, #3]
 80117e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3710      	adds	r7, #16
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}

080117ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b084      	sub	sp, #16
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
 80117f6:	460b      	mov	r3, r1
 80117f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	32b0      	adds	r2, #176	@ 0xb0
 8011804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011808:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	32b0      	adds	r2, #176	@ 0xb0
 8011814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d101      	bne.n	8011820 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801181c:	2303      	movs	r3, #3
 801181e:	e01a      	b.n	8011856 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011820:	78fb      	ldrb	r3, [r7, #3]
 8011822:	4619      	mov	r1, r3
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f004 ffa0 	bl	801676a <USBD_LL_GetRxDataSize>
 801182a:	4602      	mov	r2, r0
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	33b0      	adds	r3, #176	@ 0xb0
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	4413      	add	r3, r2
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011850:	4611      	mov	r1, r2
 8011852:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011854:	2300      	movs	r3, #0
}
 8011856:	4618      	mov	r0, r3
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b084      	sub	sp, #16
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	32b0      	adds	r2, #176	@ 0xb0
 8011870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d101      	bne.n	8011880 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801187c:	2303      	movs	r3, #3
 801187e:	e024      	b.n	80118ca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	33b0      	adds	r3, #176	@ 0xb0
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	4413      	add	r3, r2
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d019      	beq.n	80118c8 <USBD_CDC_EP0_RxReady+0x6a>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801189a:	2bff      	cmp	r3, #255	@ 0xff
 801189c:	d014      	beq.n	80118c8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	33b0      	adds	r3, #176	@ 0xb0
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	4413      	add	r3, r2
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	689b      	ldr	r3, [r3, #8]
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80118b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80118be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	22ff      	movs	r2, #255	@ 0xff
 80118c4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80118c8:	2300      	movs	r3, #0
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3710      	adds	r7, #16
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
	...

080118d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80118dc:	2182      	movs	r1, #130	@ 0x82
 80118de:	4818      	ldr	r0, [pc, #96]	@ (8011940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80118e0:	f000 fd4f 	bl	8012382 <USBD_GetEpDesc>
 80118e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80118e6:	2101      	movs	r1, #1
 80118e8:	4815      	ldr	r0, [pc, #84]	@ (8011940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80118ea:	f000 fd4a 	bl	8012382 <USBD_GetEpDesc>
 80118ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80118f0:	2181      	movs	r1, #129	@ 0x81
 80118f2:	4813      	ldr	r0, [pc, #76]	@ (8011940 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80118f4:	f000 fd45 	bl	8012382 <USBD_GetEpDesc>
 80118f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d002      	beq.n	8011906 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	2210      	movs	r2, #16
 8011904:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d006      	beq.n	801191a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	2200      	movs	r2, #0
 8011910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011914:	711a      	strb	r2, [r3, #4]
 8011916:	2200      	movs	r2, #0
 8011918:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d006      	beq.n	801192e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2200      	movs	r2, #0
 8011924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011928:	711a      	strb	r2, [r3, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2243      	movs	r2, #67	@ 0x43
 8011932:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011934:	4b02      	ldr	r3, [pc, #8]	@ (8011940 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011936:	4618      	mov	r0, r3
 8011938:	3718      	adds	r7, #24
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	24000054 	.word	0x24000054

08011944 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801194c:	2182      	movs	r1, #130	@ 0x82
 801194e:	4818      	ldr	r0, [pc, #96]	@ (80119b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011950:	f000 fd17 	bl	8012382 <USBD_GetEpDesc>
 8011954:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011956:	2101      	movs	r1, #1
 8011958:	4815      	ldr	r0, [pc, #84]	@ (80119b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801195a:	f000 fd12 	bl	8012382 <USBD_GetEpDesc>
 801195e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011960:	2181      	movs	r1, #129	@ 0x81
 8011962:	4813      	ldr	r0, [pc, #76]	@ (80119b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011964:	f000 fd0d 	bl	8012382 <USBD_GetEpDesc>
 8011968:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d002      	beq.n	8011976 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2210      	movs	r2, #16
 8011974:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d006      	beq.n	801198a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	2200      	movs	r2, #0
 8011980:	711a      	strb	r2, [r3, #4]
 8011982:	2200      	movs	r2, #0
 8011984:	f042 0202 	orr.w	r2, r2, #2
 8011988:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d006      	beq.n	801199e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2200      	movs	r2, #0
 8011994:	711a      	strb	r2, [r3, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	f042 0202 	orr.w	r2, r2, #2
 801199c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2243      	movs	r2, #67	@ 0x43
 80119a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80119a4:	4b02      	ldr	r3, [pc, #8]	@ (80119b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3718      	adds	r7, #24
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	24000054 	.word	0x24000054

080119b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b086      	sub	sp, #24
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80119bc:	2182      	movs	r1, #130	@ 0x82
 80119be:	4818      	ldr	r0, [pc, #96]	@ (8011a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80119c0:	f000 fcdf 	bl	8012382 <USBD_GetEpDesc>
 80119c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80119c6:	2101      	movs	r1, #1
 80119c8:	4815      	ldr	r0, [pc, #84]	@ (8011a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80119ca:	f000 fcda 	bl	8012382 <USBD_GetEpDesc>
 80119ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80119d0:	2181      	movs	r1, #129	@ 0x81
 80119d2:	4813      	ldr	r0, [pc, #76]	@ (8011a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80119d4:	f000 fcd5 	bl	8012382 <USBD_GetEpDesc>
 80119d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d002      	beq.n	80119e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	2210      	movs	r2, #16
 80119e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d006      	beq.n	80119fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80119f4:	711a      	strb	r2, [r3, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d006      	beq.n	8011a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2200      	movs	r2, #0
 8011a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011a08:	711a      	strb	r2, [r3, #4]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2243      	movs	r2, #67	@ 0x43
 8011a12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011a14:	4b02      	ldr	r3, [pc, #8]	@ (8011a20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3718      	adds	r7, #24
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	24000054 	.word	0x24000054

08011a24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	220a      	movs	r2, #10
 8011a30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011a32:	4b03      	ldr	r3, [pc, #12]	@ (8011a40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	24000010 	.word	0x24000010

08011a44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
 8011a4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011a54:	2303      	movs	r3, #3
 8011a56:	e009      	b.n	8011a6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011a5e:	687a      	ldr	r2, [r7, #4]
 8011a60:	33b0      	adds	r3, #176	@ 0xb0
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	4413      	add	r3, r2
 8011a66:	683a      	ldr	r2, [r7, #0]
 8011a68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011a6a:	2300      	movs	r3, #0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr

08011a78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b087      	sub	sp, #28
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	32b0      	adds	r2, #176	@ 0xb0
 8011a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d101      	bne.n	8011a9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e008      	b.n	8011ab0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	68ba      	ldr	r2, [r7, #8]
 8011aa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011aae:	2300      	movs	r3, #0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	371c      	adds	r7, #28
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr

08011abc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	32b0      	adds	r2, #176	@ 0xb0
 8011ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d101      	bne.n	8011ae0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011adc:	2303      	movs	r3, #3
 8011ade:	e004      	b.n	8011aea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011ae8:	2300      	movs	r3, #0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3714      	adds	r7, #20
 8011aee:	46bd      	mov	sp, r7
 8011af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af4:	4770      	bx	lr
	...

08011af8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	32b0      	adds	r2, #176	@ 0xb0
 8011b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b0e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011b10:	2301      	movs	r3, #1
 8011b12:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	e025      	b.n	8011b6a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d11f      	bne.n	8011b68 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011b30:	4b10      	ldr	r3, [pc, #64]	@ (8011b74 <USBD_CDC_TransmitPacket+0x7c>)
 8011b32:	781b      	ldrb	r3, [r3, #0]
 8011b34:	f003 020f 	and.w	r2, r3, #15
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	4613      	mov	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	4403      	add	r3, r0
 8011b4a:	3318      	adds	r3, #24
 8011b4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011b4e:	4b09      	ldr	r3, [pc, #36]	@ (8011b74 <USBD_CDC_TransmitPacket+0x7c>)
 8011b50:	7819      	ldrb	r1, [r3, #0]
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f004 fdc1 	bl	80166e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011b64:	2300      	movs	r3, #0
 8011b66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	24000097 	.word	0x24000097

08011b78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	32b0      	adds	r2, #176	@ 0xb0
 8011b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	32b0      	adds	r2, #176	@ 0xb0
 8011b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	e018      	b.n	8011bd8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7c1b      	ldrb	r3, [r3, #16]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10a      	bne.n	8011bc4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011bae:	4b0c      	ldr	r3, [pc, #48]	@ (8011be0 <USBD_CDC_ReceivePacket+0x68>)
 8011bb0:	7819      	ldrb	r1, [r3, #0]
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f004 fdb3 	bl	8016728 <USBD_LL_PrepareReceive>
 8011bc2:	e008      	b.n	8011bd6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011bc4:	4b06      	ldr	r3, [pc, #24]	@ (8011be0 <USBD_CDC_ReceivePacket+0x68>)
 8011bc6:	7819      	ldrb	r1, [r3, #0]
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011bce:	2340      	movs	r3, #64	@ 0x40
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f004 fda9 	bl	8016728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011bd6:	2300      	movs	r3, #0
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3710      	adds	r7, #16
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	24000098 	.word	0x24000098

08011be4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b086      	sub	sp, #24
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d101      	bne.n	8011bfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011bf8:	2303      	movs	r3, #3
 8011bfa:	e01f      	b.n	8011c3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2200      	movs	r2, #0
 8011c08:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d003      	beq.n	8011c22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2201      	movs	r2, #1
 8011c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	79fa      	ldrb	r2, [r7, #7]
 8011c2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f004 fc1f 	bl	8016474 <USBD_LL_Init>
 8011c36:	4603      	mov	r3, r0
 8011c38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3718      	adds	r7, #24
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d101      	bne.n	8011c5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e025      	b.n	8011ca8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	683a      	ldr	r2, [r7, #0]
 8011c60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	32ae      	adds	r2, #174	@ 0xae
 8011c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d00f      	beq.n	8011c98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	32ae      	adds	r2, #174	@ 0xae
 8011c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c88:	f107 020e 	add.w	r2, r7, #14
 8011c8c:	4610      	mov	r0, r2
 8011c8e:	4798      	blx	r3
 8011c90:	4602      	mov	r2, r0
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011c9e:	1c5a      	adds	r2, r3, #1
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011ca6:	2300      	movs	r3, #0
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3710      	adds	r7, #16
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f004 fc2b 	bl	8016514 <USBD_LL_Start>
 8011cbe:	4603      	mov	r3, r0
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}

08011cc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011cd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b084      	sub	sp, #16
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cea:	2300      	movs	r3, #0
 8011cec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d009      	beq.n	8011d0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	78fa      	ldrb	r2, [r7, #3]
 8011d02:	4611      	mov	r1, r2
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	4798      	blx	r3
 8011d08:	4603      	mov	r3, r0
 8011d0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}

08011d16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d16:	b580      	push	{r7, lr}
 8011d18:	b084      	sub	sp, #16
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
 8011d1e:	460b      	mov	r3, r1
 8011d20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d22:	2300      	movs	r3, #0
 8011d24:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	78fa      	ldrb	r2, [r7, #3]
 8011d30:	4611      	mov	r1, r2
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	4798      	blx	r3
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011d3c:	2303      	movs	r3, #3
 8011d3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3710      	adds	r7, #16
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}

08011d4a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b084      	sub	sp, #16
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
 8011d52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f001 f936 	bl	8012fce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2201      	movs	r2, #1
 8011d66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011d70:	461a      	mov	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011d7e:	f003 031f 	and.w	r3, r3, #31
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d01a      	beq.n	8011dbc <USBD_LL_SetupStage+0x72>
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	d822      	bhi.n	8011dd0 <USBD_LL_SetupStage+0x86>
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d002      	beq.n	8011d94 <USBD_LL_SetupStage+0x4a>
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d00a      	beq.n	8011da8 <USBD_LL_SetupStage+0x5e>
 8011d92:	e01d      	b.n	8011dd0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 fb63 	bl	8012468 <USBD_StdDevReq>
 8011da2:	4603      	mov	r3, r0
 8011da4:	73fb      	strb	r3, [r7, #15]
      break;
 8011da6:	e020      	b.n	8011dea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 fbcb 	bl	801254c <USBD_StdItfReq>
 8011db6:	4603      	mov	r3, r0
 8011db8:	73fb      	strb	r3, [r7, #15]
      break;
 8011dba:	e016      	b.n	8011dea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 fc2d 	bl	8012624 <USBD_StdEPReq>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8011dce:	e00c      	b.n	8011dea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011dd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	4619      	mov	r1, r3
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f004 fbf8 	bl	80165d4 <USBD_LL_StallEP>
 8011de4:	4603      	mov	r3, r0
 8011de6:	73fb      	strb	r3, [r7, #15]
      break;
 8011de8:	bf00      	nop
  }

  return ret;
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b086      	sub	sp, #24
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	607a      	str	r2, [r7, #4]
 8011e00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011e06:	7afb      	ldrb	r3, [r7, #11]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d16e      	bne.n	8011eea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011e12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011e1a:	2b03      	cmp	r3, #3
 8011e1c:	f040 8098 	bne.w	8011f50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	689a      	ldr	r2, [r3, #8]
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d913      	bls.n	8011e54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	689a      	ldr	r2, [r3, #8]
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	1ad2      	subs	r2, r2, r3
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	68da      	ldr	r2, [r3, #12]
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	689b      	ldr	r3, [r3, #8]
 8011e42:	4293      	cmp	r3, r2
 8011e44:	bf28      	it	cs
 8011e46:	4613      	movcs	r3, r2
 8011e48:	461a      	mov	r2, r3
 8011e4a:	6879      	ldr	r1, [r7, #4]
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f001 f9be 	bl	80131ce <USBD_CtlContinueRx>
 8011e52:	e07d      	b.n	8011f50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011e5a:	f003 031f 	and.w	r3, r3, #31
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d014      	beq.n	8011e8c <USBD_LL_DataOutStage+0x98>
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d81d      	bhi.n	8011ea2 <USBD_LL_DataOutStage+0xae>
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d002      	beq.n	8011e70 <USBD_LL_DataOutStage+0x7c>
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d003      	beq.n	8011e76 <USBD_LL_DataOutStage+0x82>
 8011e6e:	e018      	b.n	8011ea2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011e70:	2300      	movs	r3, #0
 8011e72:	75bb      	strb	r3, [r7, #22]
            break;
 8011e74:	e018      	b.n	8011ea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	4619      	mov	r1, r3
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	f000 fa64 	bl	801234e <USBD_CoreFindIF>
 8011e86:	4603      	mov	r3, r0
 8011e88:	75bb      	strb	r3, [r7, #22]
            break;
 8011e8a:	e00d      	b.n	8011ea8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	4619      	mov	r1, r3
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f000 fa66 	bl	8012368 <USBD_CoreFindEP>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8011ea0:	e002      	b.n	8011ea8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	75bb      	strb	r3, [r7, #22]
            break;
 8011ea6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011ea8:	7dbb      	ldrb	r3, [r7, #22]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d119      	bne.n	8011ee2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	d113      	bne.n	8011ee2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011eba:	7dba      	ldrb	r2, [r7, #22]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	32ae      	adds	r2, #174	@ 0xae
 8011ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00b      	beq.n	8011ee2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011eca:	7dba      	ldrb	r2, [r7, #22]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011ed2:	7dba      	ldrb	r2, [r7, #22]
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	32ae      	adds	r2, #174	@ 0xae
 8011ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011edc:	691b      	ldr	r3, [r3, #16]
 8011ede:	68f8      	ldr	r0, [r7, #12]
 8011ee0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f001 f984 	bl	80131f0 <USBD_CtlSendStatus>
 8011ee8:	e032      	b.n	8011f50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011eea:	7afb      	ldrb	r3, [r7, #11]
 8011eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ef0:	b2db      	uxtb	r3, r3
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 fa37 	bl	8012368 <USBD_CoreFindEP>
 8011efa:	4603      	mov	r3, r0
 8011efc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011efe:	7dbb      	ldrb	r3, [r7, #22]
 8011f00:	2bff      	cmp	r3, #255	@ 0xff
 8011f02:	d025      	beq.n	8011f50 <USBD_LL_DataOutStage+0x15c>
 8011f04:	7dbb      	ldrb	r3, [r7, #22]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d122      	bne.n	8011f50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b03      	cmp	r3, #3
 8011f14:	d117      	bne.n	8011f46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011f16:	7dba      	ldrb	r2, [r7, #22]
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	32ae      	adds	r2, #174	@ 0xae
 8011f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f20:	699b      	ldr	r3, [r3, #24]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d00f      	beq.n	8011f46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011f26:	7dba      	ldrb	r2, [r7, #22]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011f2e:	7dba      	ldrb	r2, [r7, #22]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	32ae      	adds	r2, #174	@ 0xae
 8011f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f38:	699b      	ldr	r3, [r3, #24]
 8011f3a:	7afa      	ldrb	r2, [r7, #11]
 8011f3c:	4611      	mov	r1, r2
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	4798      	blx	r3
 8011f42:	4603      	mov	r3, r0
 8011f44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011f46:	7dfb      	ldrb	r3, [r7, #23]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011f4c:	7dfb      	ldrb	r3, [r7, #23]
 8011f4e:	e000      	b.n	8011f52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011f50:	2300      	movs	r3, #0
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3718      	adds	r7, #24
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b086      	sub	sp, #24
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	60f8      	str	r0, [r7, #12]
 8011f62:	460b      	mov	r3, r1
 8011f64:	607a      	str	r2, [r7, #4]
 8011f66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011f68:	7afb      	ldrb	r3, [r7, #11]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d16f      	bne.n	801204e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	3314      	adds	r3, #20
 8011f72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011f7a:	2b02      	cmp	r3, #2
 8011f7c:	d15a      	bne.n	8012034 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	689a      	ldr	r2, [r3, #8]
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	68db      	ldr	r3, [r3, #12]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d914      	bls.n	8011fb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	689a      	ldr	r2, [r3, #8]
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	1ad2      	subs	r2, r2, r3
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f001 f8e6 	bl	8013172 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2100      	movs	r1, #0
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f004 fbbb 	bl	8016728 <USBD_LL_PrepareReceive>
 8011fb2:	e03f      	b.n	8012034 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	68da      	ldr	r2, [r3, #12]
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d11c      	bne.n	8011ffa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d316      	bcc.n	8011ffa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	685a      	ldr	r2, [r3, #4]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d20f      	bcs.n	8011ffa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011fda:	2200      	movs	r2, #0
 8011fdc:	2100      	movs	r1, #0
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f001 f8c7 	bl	8013172 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fec:	2300      	movs	r3, #0
 8011fee:	2200      	movs	r2, #0
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f004 fb98 	bl	8016728 <USBD_LL_PrepareReceive>
 8011ff8:	e01c      	b.n	8012034 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012000:	b2db      	uxtb	r3, r3
 8012002:	2b03      	cmp	r3, #3
 8012004:	d10f      	bne.n	8012026 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d009      	beq.n	8012026 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2200      	movs	r2, #0
 8012016:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	68f8      	ldr	r0, [r7, #12]
 8012024:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012026:	2180      	movs	r1, #128	@ 0x80
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f004 fad3 	bl	80165d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f001 f8f1 	bl	8013216 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801203a:	2b00      	cmp	r3, #0
 801203c:	d03a      	beq.n	80120b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	f7ff fe42 	bl	8011cc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2200      	movs	r2, #0
 8012048:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801204c:	e032      	b.n	80120b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801204e:	7afb      	ldrb	r3, [r7, #11]
 8012050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012054:	b2db      	uxtb	r3, r3
 8012056:	4619      	mov	r1, r3
 8012058:	68f8      	ldr	r0, [r7, #12]
 801205a:	f000 f985 	bl	8012368 <USBD_CoreFindEP>
 801205e:	4603      	mov	r3, r0
 8012060:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012062:	7dfb      	ldrb	r3, [r7, #23]
 8012064:	2bff      	cmp	r3, #255	@ 0xff
 8012066:	d025      	beq.n	80120b4 <USBD_LL_DataInStage+0x15a>
 8012068:	7dfb      	ldrb	r3, [r7, #23]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d122      	bne.n	80120b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012074:	b2db      	uxtb	r3, r3
 8012076:	2b03      	cmp	r3, #3
 8012078:	d11c      	bne.n	80120b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801207a:	7dfa      	ldrb	r2, [r7, #23]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	32ae      	adds	r2, #174	@ 0xae
 8012080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012084:	695b      	ldr	r3, [r3, #20]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d014      	beq.n	80120b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801208a:	7dfa      	ldrb	r2, [r7, #23]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012092:	7dfa      	ldrb	r2, [r7, #23]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	32ae      	adds	r2, #174	@ 0xae
 8012098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801209c:	695b      	ldr	r3, [r3, #20]
 801209e:	7afa      	ldrb	r2, [r7, #11]
 80120a0:	4611      	mov	r1, r2
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	4798      	blx	r3
 80120a6:	4603      	mov	r3, r0
 80120a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80120aa:	7dbb      	ldrb	r3, [r7, #22]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d001      	beq.n	80120b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80120b0:	7dbb      	ldrb	r3, [r7, #22]
 80120b2:	e000      	b.n	80120b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3718      	adds	r7, #24
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}

080120be <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80120be:	b580      	push	{r7, lr}
 80120c0:	b084      	sub	sp, #16
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80120c6:	2300      	movs	r3, #0
 80120c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2201      	movs	r2, #1
 80120ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d014      	beq.n	8012124 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d00e      	beq.n	8012124 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	6852      	ldr	r2, [r2, #4]
 8012112:	b2d2      	uxtb	r2, r2
 8012114:	4611      	mov	r1, r2
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	4798      	blx	r3
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012120:	2303      	movs	r3, #3
 8012122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012124:	2340      	movs	r3, #64	@ 0x40
 8012126:	2200      	movs	r2, #0
 8012128:	2100      	movs	r1, #0
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f004 fa0d 	bl	801654a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2240      	movs	r2, #64	@ 0x40
 801213c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012140:	2340      	movs	r3, #64	@ 0x40
 8012142:	2200      	movs	r2, #0
 8012144:	2180      	movs	r1, #128	@ 0x80
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f004 f9ff 	bl	801654a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2240      	movs	r2, #64	@ 0x40
 8012156:	621a      	str	r2, [r3, #32]

  return ret;
 8012158:	7bfb      	ldrb	r3, [r7, #15]
}
 801215a:	4618      	mov	r0, r3
 801215c:	3710      	adds	r7, #16
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012162:	b480      	push	{r7}
 8012164:	b083      	sub	sp, #12
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
 801216a:	460b      	mov	r3, r1
 801216c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	78fa      	ldrb	r2, [r7, #3]
 8012172:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	370c      	adds	r7, #12
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr

08012182 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012182:	b480      	push	{r7}
 8012184:	b083      	sub	sp, #12
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012190:	b2db      	uxtb	r3, r3
 8012192:	2b04      	cmp	r3, #4
 8012194:	d006      	beq.n	80121a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801219c:	b2da      	uxtb	r2, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2204      	movs	r2, #4
 80121a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80121ac:	2300      	movs	r3, #0
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	370c      	adds	r7, #12
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	2b04      	cmp	r3, #4
 80121cc:	d106      	bne.n	80121dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80121d4:	b2da      	uxtb	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80121dc:	2300      	movs	r3, #0
}
 80121de:	4618      	mov	r0, r3
 80121e0:	370c      	adds	r7, #12
 80121e2:	46bd      	mov	sp, r7
 80121e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e8:	4770      	bx	lr

080121ea <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b082      	sub	sp, #8
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	2b03      	cmp	r3, #3
 80121fc:	d110      	bne.n	8012220 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012204:	2b00      	cmp	r3, #0
 8012206:	d00b      	beq.n	8012220 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801220e:	69db      	ldr	r3, [r3, #28]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d005      	beq.n	8012220 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801221a:	69db      	ldr	r3, [r3, #28]
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012220:	2300      	movs	r3, #0
}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b082      	sub	sp, #8
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	460b      	mov	r3, r1
 8012234:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	32ae      	adds	r2, #174	@ 0xae
 8012240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d101      	bne.n	801224c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012248:	2303      	movs	r3, #3
 801224a:	e01c      	b.n	8012286 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012252:	b2db      	uxtb	r3, r3
 8012254:	2b03      	cmp	r3, #3
 8012256:	d115      	bne.n	8012284 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	32ae      	adds	r2, #174	@ 0xae
 8012262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012266:	6a1b      	ldr	r3, [r3, #32]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d00b      	beq.n	8012284 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	32ae      	adds	r2, #174	@ 0xae
 8012276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801227a:	6a1b      	ldr	r3, [r3, #32]
 801227c:	78fa      	ldrb	r2, [r7, #3]
 801227e:	4611      	mov	r1, r2
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012284:	2300      	movs	r3, #0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3708      	adds	r7, #8
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}

0801228e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801228e:	b580      	push	{r7, lr}
 8012290:	b082      	sub	sp, #8
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
 8012296:	460b      	mov	r3, r1
 8012298:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	32ae      	adds	r2, #174	@ 0xae
 80122a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d101      	bne.n	80122b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80122ac:	2303      	movs	r3, #3
 80122ae:	e01c      	b.n	80122ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	2b03      	cmp	r3, #3
 80122ba:	d115      	bne.n	80122e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	32ae      	adds	r2, #174	@ 0xae
 80122c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d00b      	beq.n	80122e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	32ae      	adds	r2, #174	@ 0xae
 80122da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122e0:	78fa      	ldrb	r2, [r7, #3]
 80122e2:	4611      	mov	r1, r2
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3708      	adds	r7, #8
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80122f2:	b480      	push	{r7}
 80122f4:	b083      	sub	sp, #12
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr

08012308 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012310:	2300      	movs	r3, #0
 8012312:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2201      	movs	r2, #1
 8012318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012322:	2b00      	cmp	r3, #0
 8012324:	d00e      	beq.n	8012344 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	6852      	ldr	r2, [r2, #4]
 8012332:	b2d2      	uxtb	r2, r2
 8012334:	4611      	mov	r1, r2
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	4798      	blx	r3
 801233a:	4603      	mov	r3, r0
 801233c:	2b00      	cmp	r3, #0
 801233e:	d001      	beq.n	8012344 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012340:	2303      	movs	r3, #3
 8012342:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012344:	7bfb      	ldrb	r3, [r7, #15]
}
 8012346:	4618      	mov	r0, r3
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801234e:	b480      	push	{r7}
 8012350:	b083      	sub	sp, #12
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
 8012356:	460b      	mov	r3, r1
 8012358:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801235a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801235c:	4618      	mov	r0, r3
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	460b      	mov	r3, r1
 8012372:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012374:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012382:	b580      	push	{r7, lr}
 8012384:	b086      	sub	sp, #24
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
 801238a:	460b      	mov	r3, r1
 801238c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012396:	2300      	movs	r3, #0
 8012398:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	885b      	ldrh	r3, [r3, #2]
 801239e:	b29b      	uxth	r3, r3
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	7812      	ldrb	r2, [r2, #0]
 80123a4:	4293      	cmp	r3, r2
 80123a6:	d91f      	bls.n	80123e8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80123ae:	e013      	b.n	80123d8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80123b0:	f107 030a 	add.w	r3, r7, #10
 80123b4:	4619      	mov	r1, r3
 80123b6:	6978      	ldr	r0, [r7, #20]
 80123b8:	f000 f81b 	bl	80123f2 <USBD_GetNextDesc>
 80123bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	785b      	ldrb	r3, [r3, #1]
 80123c2:	2b05      	cmp	r3, #5
 80123c4:	d108      	bne.n	80123d8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	789b      	ldrb	r3, [r3, #2]
 80123ce:	78fa      	ldrb	r2, [r7, #3]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d008      	beq.n	80123e6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80123d4:	2300      	movs	r3, #0
 80123d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	885b      	ldrh	r3, [r3, #2]
 80123dc:	b29a      	uxth	r2, r3
 80123de:	897b      	ldrh	r3, [r7, #10]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d8e5      	bhi.n	80123b0 <USBD_GetEpDesc+0x2e>
 80123e4:	e000      	b.n	80123e8 <USBD_GetEpDesc+0x66>
          break;
 80123e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80123e8:	693b      	ldr	r3, [r7, #16]
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3718      	adds	r7, #24
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80123f2:	b480      	push	{r7}
 80123f4:	b085      	sub	sp, #20
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	881b      	ldrh	r3, [r3, #0]
 8012404:	68fa      	ldr	r2, [r7, #12]
 8012406:	7812      	ldrb	r2, [r2, #0]
 8012408:	4413      	add	r3, r2
 801240a:	b29a      	uxth	r2, r3
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	461a      	mov	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	4413      	add	r3, r2
 801241a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801241c:	68fb      	ldr	r3, [r7, #12]
}
 801241e:	4618      	mov	r0, r3
 8012420:	3714      	adds	r7, #20
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr

0801242a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801242a:	b480      	push	{r7}
 801242c:	b087      	sub	sp, #28
 801242e:	af00      	add	r7, sp, #0
 8012430:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	3301      	adds	r3, #1
 8012440:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012448:	8a3b      	ldrh	r3, [r7, #16]
 801244a:	021b      	lsls	r3, r3, #8
 801244c:	b21a      	sxth	r2, r3
 801244e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012452:	4313      	orrs	r3, r2
 8012454:	b21b      	sxth	r3, r3
 8012456:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012458:	89fb      	ldrh	r3, [r7, #14]
}
 801245a:	4618      	mov	r0, r3
 801245c:	371c      	adds	r7, #28
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr
	...

08012468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b084      	sub	sp, #16
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801247e:	2b40      	cmp	r3, #64	@ 0x40
 8012480:	d005      	beq.n	801248e <USBD_StdDevReq+0x26>
 8012482:	2b40      	cmp	r3, #64	@ 0x40
 8012484:	d857      	bhi.n	8012536 <USBD_StdDevReq+0xce>
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00f      	beq.n	80124aa <USBD_StdDevReq+0x42>
 801248a:	2b20      	cmp	r3, #32
 801248c:	d153      	bne.n	8012536 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	32ae      	adds	r2, #174	@ 0xae
 8012498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801249c:	689b      	ldr	r3, [r3, #8]
 801249e:	6839      	ldr	r1, [r7, #0]
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	4798      	blx	r3
 80124a4:	4603      	mov	r3, r0
 80124a6:	73fb      	strb	r3, [r7, #15]
      break;
 80124a8:	e04a      	b.n	8012540 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	785b      	ldrb	r3, [r3, #1]
 80124ae:	2b09      	cmp	r3, #9
 80124b0:	d83b      	bhi.n	801252a <USBD_StdDevReq+0xc2>
 80124b2:	a201      	add	r2, pc, #4	@ (adr r2, 80124b8 <USBD_StdDevReq+0x50>)
 80124b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124b8:	0801250d 	.word	0x0801250d
 80124bc:	08012521 	.word	0x08012521
 80124c0:	0801252b 	.word	0x0801252b
 80124c4:	08012517 	.word	0x08012517
 80124c8:	0801252b 	.word	0x0801252b
 80124cc:	080124eb 	.word	0x080124eb
 80124d0:	080124e1 	.word	0x080124e1
 80124d4:	0801252b 	.word	0x0801252b
 80124d8:	08012503 	.word	0x08012503
 80124dc:	080124f5 	.word	0x080124f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80124e0:	6839      	ldr	r1, [r7, #0]
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 fa3c 	bl	8012960 <USBD_GetDescriptor>
          break;
 80124e8:	e024      	b.n	8012534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fbcb 	bl	8012c88 <USBD_SetAddress>
          break;
 80124f2:	e01f      	b.n	8012534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80124f4:	6839      	ldr	r1, [r7, #0]
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 fc0a 	bl	8012d10 <USBD_SetConfig>
 80124fc:	4603      	mov	r3, r0
 80124fe:	73fb      	strb	r3, [r7, #15]
          break;
 8012500:	e018      	b.n	8012534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012502:	6839      	ldr	r1, [r7, #0]
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f000 fcad 	bl	8012e64 <USBD_GetConfig>
          break;
 801250a:	e013      	b.n	8012534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801250c:	6839      	ldr	r1, [r7, #0]
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 fcde 	bl	8012ed0 <USBD_GetStatus>
          break;
 8012514:	e00e      	b.n	8012534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012516:	6839      	ldr	r1, [r7, #0]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 fd0d 	bl	8012f38 <USBD_SetFeature>
          break;
 801251e:	e009      	b.n	8012534 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012520:	6839      	ldr	r1, [r7, #0]
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 fd31 	bl	8012f8a <USBD_ClrFeature>
          break;
 8012528:	e004      	b.n	8012534 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f000 fd88 	bl	8013042 <USBD_CtlError>
          break;
 8012532:	bf00      	nop
      }
      break;
 8012534:	e004      	b.n	8012540 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012536:	6839      	ldr	r1, [r7, #0]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f000 fd82 	bl	8013042 <USBD_CtlError>
      break;
 801253e:	bf00      	nop
  }

  return ret;
 8012540:	7bfb      	ldrb	r3, [r7, #15]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3710      	adds	r7, #16
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop

0801254c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012556:	2300      	movs	r3, #0
 8012558:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012562:	2b40      	cmp	r3, #64	@ 0x40
 8012564:	d005      	beq.n	8012572 <USBD_StdItfReq+0x26>
 8012566:	2b40      	cmp	r3, #64	@ 0x40
 8012568:	d852      	bhi.n	8012610 <USBD_StdItfReq+0xc4>
 801256a:	2b00      	cmp	r3, #0
 801256c:	d001      	beq.n	8012572 <USBD_StdItfReq+0x26>
 801256e:	2b20      	cmp	r3, #32
 8012570:	d14e      	bne.n	8012610 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012578:	b2db      	uxtb	r3, r3
 801257a:	3b01      	subs	r3, #1
 801257c:	2b02      	cmp	r3, #2
 801257e:	d840      	bhi.n	8012602 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	889b      	ldrh	r3, [r3, #4]
 8012584:	b2db      	uxtb	r3, r3
 8012586:	2b01      	cmp	r3, #1
 8012588:	d836      	bhi.n	80125f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	889b      	ldrh	r3, [r3, #4]
 801258e:	b2db      	uxtb	r3, r3
 8012590:	4619      	mov	r1, r3
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f7ff fedb 	bl	801234e <USBD_CoreFindIF>
 8012598:	4603      	mov	r3, r0
 801259a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801259c:	7bbb      	ldrb	r3, [r7, #14]
 801259e:	2bff      	cmp	r3, #255	@ 0xff
 80125a0:	d01d      	beq.n	80125de <USBD_StdItfReq+0x92>
 80125a2:	7bbb      	ldrb	r3, [r7, #14]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d11a      	bne.n	80125de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80125a8:	7bba      	ldrb	r2, [r7, #14]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	32ae      	adds	r2, #174	@ 0xae
 80125ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125b2:	689b      	ldr	r3, [r3, #8]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d00f      	beq.n	80125d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80125b8:	7bba      	ldrb	r2, [r7, #14]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80125c0:	7bba      	ldrb	r2, [r7, #14]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	32ae      	adds	r2, #174	@ 0xae
 80125c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125ca:	689b      	ldr	r3, [r3, #8]
 80125cc:	6839      	ldr	r1, [r7, #0]
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	4798      	blx	r3
 80125d2:	4603      	mov	r3, r0
 80125d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80125d6:	e004      	b.n	80125e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80125d8:	2303      	movs	r3, #3
 80125da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80125dc:	e001      	b.n	80125e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80125de:	2303      	movs	r3, #3
 80125e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	88db      	ldrh	r3, [r3, #6]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d110      	bne.n	801260c <USBD_StdItfReq+0xc0>
 80125ea:	7bfb      	ldrb	r3, [r7, #15]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10d      	bne.n	801260c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 fdfd 	bl	80131f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80125f6:	e009      	b.n	801260c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 fd21 	bl	8013042 <USBD_CtlError>
          break;
 8012600:	e004      	b.n	801260c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012602:	6839      	ldr	r1, [r7, #0]
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f000 fd1c 	bl	8013042 <USBD_CtlError>
          break;
 801260a:	e000      	b.n	801260e <USBD_StdItfReq+0xc2>
          break;
 801260c:	bf00      	nop
      }
      break;
 801260e:	e004      	b.n	801261a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012610:	6839      	ldr	r1, [r7, #0]
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 fd15 	bl	8013042 <USBD_CtlError>
      break;
 8012618:	bf00      	nop
  }

  return ret;
 801261a:	7bfb      	ldrb	r3, [r7, #15]
}
 801261c:	4618      	mov	r0, r3
 801261e:	3710      	adds	r7, #16
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801262e:	2300      	movs	r3, #0
 8012630:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	889b      	ldrh	r3, [r3, #4]
 8012636:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012640:	2b40      	cmp	r3, #64	@ 0x40
 8012642:	d007      	beq.n	8012654 <USBD_StdEPReq+0x30>
 8012644:	2b40      	cmp	r3, #64	@ 0x40
 8012646:	f200 817f 	bhi.w	8012948 <USBD_StdEPReq+0x324>
 801264a:	2b00      	cmp	r3, #0
 801264c:	d02a      	beq.n	80126a4 <USBD_StdEPReq+0x80>
 801264e:	2b20      	cmp	r3, #32
 8012650:	f040 817a 	bne.w	8012948 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012654:	7bbb      	ldrb	r3, [r7, #14]
 8012656:	4619      	mov	r1, r3
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f7ff fe85 	bl	8012368 <USBD_CoreFindEP>
 801265e:	4603      	mov	r3, r0
 8012660:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012662:	7b7b      	ldrb	r3, [r7, #13]
 8012664:	2bff      	cmp	r3, #255	@ 0xff
 8012666:	f000 8174 	beq.w	8012952 <USBD_StdEPReq+0x32e>
 801266a:	7b7b      	ldrb	r3, [r7, #13]
 801266c:	2b00      	cmp	r3, #0
 801266e:	f040 8170 	bne.w	8012952 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012672:	7b7a      	ldrb	r2, [r7, #13]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801267a:	7b7a      	ldrb	r2, [r7, #13]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	32ae      	adds	r2, #174	@ 0xae
 8012680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012684:	689b      	ldr	r3, [r3, #8]
 8012686:	2b00      	cmp	r3, #0
 8012688:	f000 8163 	beq.w	8012952 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801268c:	7b7a      	ldrb	r2, [r7, #13]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	32ae      	adds	r2, #174	@ 0xae
 8012692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	6839      	ldr	r1, [r7, #0]
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	4798      	blx	r3
 801269e:	4603      	mov	r3, r0
 80126a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80126a2:	e156      	b.n	8012952 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	785b      	ldrb	r3, [r3, #1]
 80126a8:	2b03      	cmp	r3, #3
 80126aa:	d008      	beq.n	80126be <USBD_StdEPReq+0x9a>
 80126ac:	2b03      	cmp	r3, #3
 80126ae:	f300 8145 	bgt.w	801293c <USBD_StdEPReq+0x318>
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f000 809b 	beq.w	80127ee <USBD_StdEPReq+0x1ca>
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d03c      	beq.n	8012736 <USBD_StdEPReq+0x112>
 80126bc:	e13e      	b.n	801293c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	2b02      	cmp	r3, #2
 80126c8:	d002      	beq.n	80126d0 <USBD_StdEPReq+0xac>
 80126ca:	2b03      	cmp	r3, #3
 80126cc:	d016      	beq.n	80126fc <USBD_StdEPReq+0xd8>
 80126ce:	e02c      	b.n	801272a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80126d0:	7bbb      	ldrb	r3, [r7, #14]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00d      	beq.n	80126f2 <USBD_StdEPReq+0xce>
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
 80126d8:	2b80      	cmp	r3, #128	@ 0x80
 80126da:	d00a      	beq.n	80126f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80126dc:	7bbb      	ldrb	r3, [r7, #14]
 80126de:	4619      	mov	r1, r3
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f003 ff77 	bl	80165d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80126e6:	2180      	movs	r1, #128	@ 0x80
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f003 ff73 	bl	80165d4 <USBD_LL_StallEP>
 80126ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80126f0:	e020      	b.n	8012734 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80126f2:	6839      	ldr	r1, [r7, #0]
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 fca4 	bl	8013042 <USBD_CtlError>
              break;
 80126fa:	e01b      	b.n	8012734 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	885b      	ldrh	r3, [r3, #2]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10e      	bne.n	8012722 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012704:	7bbb      	ldrb	r3, [r7, #14]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00b      	beq.n	8012722 <USBD_StdEPReq+0xfe>
 801270a:	7bbb      	ldrb	r3, [r7, #14]
 801270c:	2b80      	cmp	r3, #128	@ 0x80
 801270e:	d008      	beq.n	8012722 <USBD_StdEPReq+0xfe>
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	88db      	ldrh	r3, [r3, #6]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d104      	bne.n	8012722 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012718:	7bbb      	ldrb	r3, [r7, #14]
 801271a:	4619      	mov	r1, r3
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f003 ff59 	bl	80165d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 fd64 	bl	80131f0 <USBD_CtlSendStatus>

              break;
 8012728:	e004      	b.n	8012734 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801272a:	6839      	ldr	r1, [r7, #0]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 fc88 	bl	8013042 <USBD_CtlError>
              break;
 8012732:	bf00      	nop
          }
          break;
 8012734:	e107      	b.n	8012946 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801273c:	b2db      	uxtb	r3, r3
 801273e:	2b02      	cmp	r3, #2
 8012740:	d002      	beq.n	8012748 <USBD_StdEPReq+0x124>
 8012742:	2b03      	cmp	r3, #3
 8012744:	d016      	beq.n	8012774 <USBD_StdEPReq+0x150>
 8012746:	e04b      	b.n	80127e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012748:	7bbb      	ldrb	r3, [r7, #14]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d00d      	beq.n	801276a <USBD_StdEPReq+0x146>
 801274e:	7bbb      	ldrb	r3, [r7, #14]
 8012750:	2b80      	cmp	r3, #128	@ 0x80
 8012752:	d00a      	beq.n	801276a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012754:	7bbb      	ldrb	r3, [r7, #14]
 8012756:	4619      	mov	r1, r3
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f003 ff3b 	bl	80165d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801275e:	2180      	movs	r1, #128	@ 0x80
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f003 ff37 	bl	80165d4 <USBD_LL_StallEP>
 8012766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012768:	e040      	b.n	80127ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801276a:	6839      	ldr	r1, [r7, #0]
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 fc68 	bl	8013042 <USBD_CtlError>
              break;
 8012772:	e03b      	b.n	80127ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	885b      	ldrh	r3, [r3, #2]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d136      	bne.n	80127ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801277c:	7bbb      	ldrb	r3, [r7, #14]
 801277e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012782:	2b00      	cmp	r3, #0
 8012784:	d004      	beq.n	8012790 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012786:	7bbb      	ldrb	r3, [r7, #14]
 8012788:	4619      	mov	r1, r3
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f003 ff41 	bl	8016612 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 fd2d 	bl	80131f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012796:	7bbb      	ldrb	r3, [r7, #14]
 8012798:	4619      	mov	r1, r3
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7ff fde4 	bl	8012368 <USBD_CoreFindEP>
 80127a0:	4603      	mov	r3, r0
 80127a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80127a4:	7b7b      	ldrb	r3, [r7, #13]
 80127a6:	2bff      	cmp	r3, #255	@ 0xff
 80127a8:	d01f      	beq.n	80127ea <USBD_StdEPReq+0x1c6>
 80127aa:	7b7b      	ldrb	r3, [r7, #13]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d11c      	bne.n	80127ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80127b0:	7b7a      	ldrb	r2, [r7, #13]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80127b8:	7b7a      	ldrb	r2, [r7, #13]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	32ae      	adds	r2, #174	@ 0xae
 80127be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d010      	beq.n	80127ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80127c8:	7b7a      	ldrb	r2, [r7, #13]
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	32ae      	adds	r2, #174	@ 0xae
 80127ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127d2:	689b      	ldr	r3, [r3, #8]
 80127d4:	6839      	ldr	r1, [r7, #0]
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	4798      	blx	r3
 80127da:	4603      	mov	r3, r0
 80127dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80127de:	e004      	b.n	80127ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 fc2d 	bl	8013042 <USBD_CtlError>
              break;
 80127e8:	e000      	b.n	80127ec <USBD_StdEPReq+0x1c8>
              break;
 80127ea:	bf00      	nop
          }
          break;
 80127ec:	e0ab      	b.n	8012946 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	2b02      	cmp	r3, #2
 80127f8:	d002      	beq.n	8012800 <USBD_StdEPReq+0x1dc>
 80127fa:	2b03      	cmp	r3, #3
 80127fc:	d032      	beq.n	8012864 <USBD_StdEPReq+0x240>
 80127fe:	e097      	b.n	8012930 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012800:	7bbb      	ldrb	r3, [r7, #14]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d007      	beq.n	8012816 <USBD_StdEPReq+0x1f2>
 8012806:	7bbb      	ldrb	r3, [r7, #14]
 8012808:	2b80      	cmp	r3, #128	@ 0x80
 801280a:	d004      	beq.n	8012816 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 fc17 	bl	8013042 <USBD_CtlError>
                break;
 8012814:	e091      	b.n	801293a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801281a:	2b00      	cmp	r3, #0
 801281c:	da0b      	bge.n	8012836 <USBD_StdEPReq+0x212>
 801281e:	7bbb      	ldrb	r3, [r7, #14]
 8012820:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012824:	4613      	mov	r3, r2
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	4413      	add	r3, r2
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	3310      	adds	r3, #16
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	4413      	add	r3, r2
 8012832:	3304      	adds	r3, #4
 8012834:	e00b      	b.n	801284e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012836:	7bbb      	ldrb	r3, [r7, #14]
 8012838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801283c:	4613      	mov	r3, r2
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	4413      	add	r3, r2
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	4413      	add	r3, r2
 801284c:	3304      	adds	r3, #4
 801284e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	2200      	movs	r2, #0
 8012854:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	2202      	movs	r2, #2
 801285a:	4619      	mov	r1, r3
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 fc6d 	bl	801313c <USBD_CtlSendData>
              break;
 8012862:	e06a      	b.n	801293a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012868:	2b00      	cmp	r3, #0
 801286a:	da11      	bge.n	8012890 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801286c:	7bbb      	ldrb	r3, [r7, #14]
 801286e:	f003 020f 	and.w	r2, r3, #15
 8012872:	6879      	ldr	r1, [r7, #4]
 8012874:	4613      	mov	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	4413      	add	r3, r2
 801287a:	009b      	lsls	r3, r3, #2
 801287c:	440b      	add	r3, r1
 801287e:	3324      	adds	r3, #36	@ 0x24
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d117      	bne.n	80128b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012886:	6839      	ldr	r1, [r7, #0]
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f000 fbda 	bl	8013042 <USBD_CtlError>
                  break;
 801288e:	e054      	b.n	801293a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012890:	7bbb      	ldrb	r3, [r7, #14]
 8012892:	f003 020f 	and.w	r2, r3, #15
 8012896:	6879      	ldr	r1, [r7, #4]
 8012898:	4613      	mov	r3, r2
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	4413      	add	r3, r2
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	440b      	add	r3, r1
 80128a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80128a6:	881b      	ldrh	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d104      	bne.n	80128b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80128ac:	6839      	ldr	r1, [r7, #0]
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f000 fbc7 	bl	8013042 <USBD_CtlError>
                  break;
 80128b4:	e041      	b.n	801293a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	da0b      	bge.n	80128d6 <USBD_StdEPReq+0x2b2>
 80128be:	7bbb      	ldrb	r3, [r7, #14]
 80128c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80128c4:	4613      	mov	r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	3310      	adds	r3, #16
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	4413      	add	r3, r2
 80128d2:	3304      	adds	r3, #4
 80128d4:	e00b      	b.n	80128ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80128d6:	7bbb      	ldrb	r3, [r7, #14]
 80128d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128dc:	4613      	mov	r3, r2
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	4413      	add	r3, r2
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	4413      	add	r3, r2
 80128ec:	3304      	adds	r3, #4
 80128ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80128f0:	7bbb      	ldrb	r3, [r7, #14]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d002      	beq.n	80128fc <USBD_StdEPReq+0x2d8>
 80128f6:	7bbb      	ldrb	r3, [r7, #14]
 80128f8:	2b80      	cmp	r3, #128	@ 0x80
 80128fa:	d103      	bne.n	8012904 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2200      	movs	r2, #0
 8012900:	601a      	str	r2, [r3, #0]
 8012902:	e00e      	b.n	8012922 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012904:	7bbb      	ldrb	r3, [r7, #14]
 8012906:	4619      	mov	r1, r3
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f003 fea1 	bl	8016650 <USBD_LL_IsStallEP>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d003      	beq.n	801291c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	2201      	movs	r2, #1
 8012918:	601a      	str	r2, [r3, #0]
 801291a:	e002      	b.n	8012922 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	2200      	movs	r2, #0
 8012920:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	2202      	movs	r2, #2
 8012926:	4619      	mov	r1, r3
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 fc07 	bl	801313c <USBD_CtlSendData>
              break;
 801292e:	e004      	b.n	801293a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 fb85 	bl	8013042 <USBD_CtlError>
              break;
 8012938:	bf00      	nop
          }
          break;
 801293a:	e004      	b.n	8012946 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801293c:	6839      	ldr	r1, [r7, #0]
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f000 fb7f 	bl	8013042 <USBD_CtlError>
          break;
 8012944:	bf00      	nop
      }
      break;
 8012946:	e005      	b.n	8012954 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012948:	6839      	ldr	r1, [r7, #0]
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 fb79 	bl	8013042 <USBD_CtlError>
      break;
 8012950:	e000      	b.n	8012954 <USBD_StdEPReq+0x330>
      break;
 8012952:	bf00      	nop
  }

  return ret;
 8012954:	7bfb      	ldrb	r3, [r7, #15]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
	...

08012960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801296a:	2300      	movs	r3, #0
 801296c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801296e:	2300      	movs	r3, #0
 8012970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012972:	2300      	movs	r3, #0
 8012974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	885b      	ldrh	r3, [r3, #2]
 801297a:	0a1b      	lsrs	r3, r3, #8
 801297c:	b29b      	uxth	r3, r3
 801297e:	3b01      	subs	r3, #1
 8012980:	2b0e      	cmp	r3, #14
 8012982:	f200 8152 	bhi.w	8012c2a <USBD_GetDescriptor+0x2ca>
 8012986:	a201      	add	r2, pc, #4	@ (adr r2, 801298c <USBD_GetDescriptor+0x2c>)
 8012988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801298c:	080129fd 	.word	0x080129fd
 8012990:	08012a15 	.word	0x08012a15
 8012994:	08012a55 	.word	0x08012a55
 8012998:	08012c2b 	.word	0x08012c2b
 801299c:	08012c2b 	.word	0x08012c2b
 80129a0:	08012bcb 	.word	0x08012bcb
 80129a4:	08012bf7 	.word	0x08012bf7
 80129a8:	08012c2b 	.word	0x08012c2b
 80129ac:	08012c2b 	.word	0x08012c2b
 80129b0:	08012c2b 	.word	0x08012c2b
 80129b4:	08012c2b 	.word	0x08012c2b
 80129b8:	08012c2b 	.word	0x08012c2b
 80129bc:	08012c2b 	.word	0x08012c2b
 80129c0:	08012c2b 	.word	0x08012c2b
 80129c4:	080129c9 	.word	0x080129c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80129ce:	69db      	ldr	r3, [r3, #28]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d00b      	beq.n	80129ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80129da:	69db      	ldr	r3, [r3, #28]
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	7c12      	ldrb	r2, [r2, #16]
 80129e0:	f107 0108 	add.w	r1, r7, #8
 80129e4:	4610      	mov	r0, r2
 80129e6:	4798      	blx	r3
 80129e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129ea:	e126      	b.n	8012c3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80129ec:	6839      	ldr	r1, [r7, #0]
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f000 fb27 	bl	8013042 <USBD_CtlError>
        err++;
 80129f4:	7afb      	ldrb	r3, [r7, #11]
 80129f6:	3301      	adds	r3, #1
 80129f8:	72fb      	strb	r3, [r7, #11]
      break;
 80129fa:	e11e      	b.n	8012c3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	7c12      	ldrb	r2, [r2, #16]
 8012a08:	f107 0108 	add.w	r1, r7, #8
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	4798      	blx	r3
 8012a10:	60f8      	str	r0, [r7, #12]
      break;
 8012a12:	e112      	b.n	8012c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	7c1b      	ldrb	r3, [r3, #16]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d10d      	bne.n	8012a38 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a24:	f107 0208 	add.w	r2, r7, #8
 8012a28:	4610      	mov	r0, r2
 8012a2a:	4798      	blx	r3
 8012a2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	3301      	adds	r3, #1
 8012a32:	2202      	movs	r2, #2
 8012a34:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012a36:	e100      	b.n	8012c3a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a40:	f107 0208 	add.w	r2, r7, #8
 8012a44:	4610      	mov	r0, r2
 8012a46:	4798      	blx	r3
 8012a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	2202      	movs	r2, #2
 8012a50:	701a      	strb	r2, [r3, #0]
      break;
 8012a52:	e0f2      	b.n	8012c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	885b      	ldrh	r3, [r3, #2]
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	2b05      	cmp	r3, #5
 8012a5c:	f200 80ac 	bhi.w	8012bb8 <USBD_GetDescriptor+0x258>
 8012a60:	a201      	add	r2, pc, #4	@ (adr r2, 8012a68 <USBD_GetDescriptor+0x108>)
 8012a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a66:	bf00      	nop
 8012a68:	08012a81 	.word	0x08012a81
 8012a6c:	08012ab5 	.word	0x08012ab5
 8012a70:	08012ae9 	.word	0x08012ae9
 8012a74:	08012b1d 	.word	0x08012b1d
 8012a78:	08012b51 	.word	0x08012b51
 8012a7c:	08012b85 	.word	0x08012b85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00b      	beq.n	8012aa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	7c12      	ldrb	r2, [r2, #16]
 8012a98:	f107 0108 	add.w	r1, r7, #8
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	4798      	blx	r3
 8012aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012aa2:	e091      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012aa4:	6839      	ldr	r1, [r7, #0]
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f000 facb 	bl	8013042 <USBD_CtlError>
            err++;
 8012aac:	7afb      	ldrb	r3, [r7, #11]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8012ab2:	e089      	b.n	8012bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d00b      	beq.n	8012ad8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ac6:	689b      	ldr	r3, [r3, #8]
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	7c12      	ldrb	r2, [r2, #16]
 8012acc:	f107 0108 	add.w	r1, r7, #8
 8012ad0:	4610      	mov	r0, r2
 8012ad2:	4798      	blx	r3
 8012ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ad6:	e077      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ad8:	6839      	ldr	r1, [r7, #0]
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f000 fab1 	bl	8013042 <USBD_CtlError>
            err++;
 8012ae0:	7afb      	ldrb	r3, [r7, #11]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ae6:	e06f      	b.n	8012bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00b      	beq.n	8012b0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	7c12      	ldrb	r2, [r2, #16]
 8012b00:	f107 0108 	add.w	r1, r7, #8
 8012b04:	4610      	mov	r0, r2
 8012b06:	4798      	blx	r3
 8012b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b0a:	e05d      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b0c:	6839      	ldr	r1, [r7, #0]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fa97 	bl	8013042 <USBD_CtlError>
            err++;
 8012b14:	7afb      	ldrb	r3, [r7, #11]
 8012b16:	3301      	adds	r3, #1
 8012b18:	72fb      	strb	r3, [r7, #11]
          break;
 8012b1a:	e055      	b.n	8012bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b22:	691b      	ldr	r3, [r3, #16]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d00b      	beq.n	8012b40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b2e:	691b      	ldr	r3, [r3, #16]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	7c12      	ldrb	r2, [r2, #16]
 8012b34:	f107 0108 	add.w	r1, r7, #8
 8012b38:	4610      	mov	r0, r2
 8012b3a:	4798      	blx	r3
 8012b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b3e:	e043      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b40:	6839      	ldr	r1, [r7, #0]
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f000 fa7d 	bl	8013042 <USBD_CtlError>
            err++;
 8012b48:	7afb      	ldrb	r3, [r7, #11]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8012b4e:	e03b      	b.n	8012bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b56:	695b      	ldr	r3, [r3, #20]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00b      	beq.n	8012b74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b62:	695b      	ldr	r3, [r3, #20]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	7c12      	ldrb	r2, [r2, #16]
 8012b68:	f107 0108 	add.w	r1, r7, #8
 8012b6c:	4610      	mov	r0, r2
 8012b6e:	4798      	blx	r3
 8012b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b72:	e029      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b74:	6839      	ldr	r1, [r7, #0]
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 fa63 	bl	8013042 <USBD_CtlError>
            err++;
 8012b7c:	7afb      	ldrb	r3, [r7, #11]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	72fb      	strb	r3, [r7, #11]
          break;
 8012b82:	e021      	b.n	8012bc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b8a:	699b      	ldr	r3, [r3, #24]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00b      	beq.n	8012ba8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b96:	699b      	ldr	r3, [r3, #24]
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	7c12      	ldrb	r2, [r2, #16]
 8012b9c:	f107 0108 	add.w	r1, r7, #8
 8012ba0:	4610      	mov	r0, r2
 8012ba2:	4798      	blx	r3
 8012ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ba6:	e00f      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ba8:	6839      	ldr	r1, [r7, #0]
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f000 fa49 	bl	8013042 <USBD_CtlError>
            err++;
 8012bb0:	7afb      	ldrb	r3, [r7, #11]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8012bb6:	e007      	b.n	8012bc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012bb8:	6839      	ldr	r1, [r7, #0]
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f000 fa41 	bl	8013042 <USBD_CtlError>
          err++;
 8012bc0:	7afb      	ldrb	r3, [r7, #11]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012bc6:	bf00      	nop
      }
      break;
 8012bc8:	e037      	b.n	8012c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	7c1b      	ldrb	r3, [r3, #16]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d109      	bne.n	8012be6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012bda:	f107 0208 	add.w	r2, r7, #8
 8012bde:	4610      	mov	r0, r2
 8012be0:	4798      	blx	r3
 8012be2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012be4:	e029      	b.n	8012c3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012be6:	6839      	ldr	r1, [r7, #0]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 fa2a 	bl	8013042 <USBD_CtlError>
        err++;
 8012bee:	7afb      	ldrb	r3, [r7, #11]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8012bf4:	e021      	b.n	8012c3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	7c1b      	ldrb	r3, [r3, #16]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d10d      	bne.n	8012c1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c06:	f107 0208 	add.w	r2, r7, #8
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	4798      	blx	r3
 8012c0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	3301      	adds	r3, #1
 8012c14:	2207      	movs	r2, #7
 8012c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012c18:	e00f      	b.n	8012c3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012c1a:	6839      	ldr	r1, [r7, #0]
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f000 fa10 	bl	8013042 <USBD_CtlError>
        err++;
 8012c22:	7afb      	ldrb	r3, [r7, #11]
 8012c24:	3301      	adds	r3, #1
 8012c26:	72fb      	strb	r3, [r7, #11]
      break;
 8012c28:	e007      	b.n	8012c3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012c2a:	6839      	ldr	r1, [r7, #0]
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f000 fa08 	bl	8013042 <USBD_CtlError>
      err++;
 8012c32:	7afb      	ldrb	r3, [r7, #11]
 8012c34:	3301      	adds	r3, #1
 8012c36:	72fb      	strb	r3, [r7, #11]
      break;
 8012c38:	bf00      	nop
  }

  if (err != 0U)
 8012c3a:	7afb      	ldrb	r3, [r7, #11]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d11e      	bne.n	8012c7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	88db      	ldrh	r3, [r3, #6]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d016      	beq.n	8012c76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012c48:	893b      	ldrh	r3, [r7, #8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00e      	beq.n	8012c6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	88da      	ldrh	r2, [r3, #6]
 8012c52:	893b      	ldrh	r3, [r7, #8]
 8012c54:	4293      	cmp	r3, r2
 8012c56:	bf28      	it	cs
 8012c58:	4613      	movcs	r3, r2
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012c5e:	893b      	ldrh	r3, [r7, #8]
 8012c60:	461a      	mov	r2, r3
 8012c62:	68f9      	ldr	r1, [r7, #12]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 fa69 	bl	801313c <USBD_CtlSendData>
 8012c6a:	e009      	b.n	8012c80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012c6c:	6839      	ldr	r1, [r7, #0]
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f000 f9e7 	bl	8013042 <USBD_CtlError>
 8012c74:	e004      	b.n	8012c80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f000 faba 	bl	80131f0 <USBD_CtlSendStatus>
 8012c7c:	e000      	b.n	8012c80 <USBD_GetDescriptor+0x320>
    return;
 8012c7e:	bf00      	nop
  }
}
 8012c80:	3710      	adds	r7, #16
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop

08012c88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	889b      	ldrh	r3, [r3, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d131      	bne.n	8012cfe <USBD_SetAddress+0x76>
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	88db      	ldrh	r3, [r3, #6]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d12d      	bne.n	8012cfe <USBD_SetAddress+0x76>
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	885b      	ldrh	r3, [r3, #2]
 8012ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8012ca8:	d829      	bhi.n	8012cfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	885b      	ldrh	r3, [r3, #2]
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012cb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	2b03      	cmp	r3, #3
 8012cc0:	d104      	bne.n	8012ccc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012cc2:	6839      	ldr	r1, [r7, #0]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 f9bc 	bl	8013042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cca:	e01d      	b.n	8012d08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	7bfa      	ldrb	r2, [r7, #15]
 8012cd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f003 fce5 	bl	80166a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 fa86 	bl	80131f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012ce4:	7bfb      	ldrb	r3, [r7, #15]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d004      	beq.n	8012cf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2202      	movs	r2, #2
 8012cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cf2:	e009      	b.n	8012d08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cfc:	e004      	b.n	8012d08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012cfe:	6839      	ldr	r1, [r7, #0]
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f000 f99e 	bl	8013042 <USBD_CtlError>
  }
}
 8012d06:	bf00      	nop
 8012d08:	bf00      	nop
 8012d0a:	3710      	adds	r7, #16
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	885b      	ldrh	r3, [r3, #2]
 8012d22:	b2da      	uxtb	r2, r3
 8012d24:	4b4e      	ldr	r3, [pc, #312]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012d26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012d28:	4b4d      	ldr	r3, [pc, #308]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012d2a:	781b      	ldrb	r3, [r3, #0]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d905      	bls.n	8012d3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012d30:	6839      	ldr	r1, [r7, #0]
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 f985 	bl	8013042 <USBD_CtlError>
    return USBD_FAIL;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	e08c      	b.n	8012e56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	2b02      	cmp	r3, #2
 8012d46:	d002      	beq.n	8012d4e <USBD_SetConfig+0x3e>
 8012d48:	2b03      	cmp	r3, #3
 8012d4a:	d029      	beq.n	8012da0 <USBD_SetConfig+0x90>
 8012d4c:	e075      	b.n	8012e3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012d4e:	4b44      	ldr	r3, [pc, #272]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d020      	beq.n	8012d98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012d56:	4b42      	ldr	r3, [pc, #264]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012d60:	4b3f      	ldr	r3, [pc, #252]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	4619      	mov	r1, r3
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f7fe ffb9 	bl	8011cde <USBD_SetClassConfig>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012d70:	7bfb      	ldrb	r3, [r7, #15]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d008      	beq.n	8012d88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012d76:	6839      	ldr	r1, [r7, #0]
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f000 f962 	bl	8013042 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2202      	movs	r2, #2
 8012d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012d86:	e065      	b.n	8012e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fa31 	bl	80131f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2203      	movs	r2, #3
 8012d92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012d96:	e05d      	b.n	8012e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 fa29 	bl	80131f0 <USBD_CtlSendStatus>
      break;
 8012d9e:	e059      	b.n	8012e54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012da0:	4b2f      	ldr	r3, [pc, #188]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d112      	bne.n	8012dce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2202      	movs	r2, #2
 8012dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012db0:	4b2b      	ldr	r3, [pc, #172]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	461a      	mov	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012dba:	4b29      	ldr	r3, [pc, #164]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7fe ffa8 	bl	8011d16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f000 fa12 	bl	80131f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012dcc:	e042      	b.n	8012e54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012dce:	4b24      	ldr	r3, [pc, #144]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d02a      	beq.n	8012e32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	b2db      	uxtb	r3, r3
 8012de2:	4619      	mov	r1, r3
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7fe ff96 	bl	8011d16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012dea:	4b1d      	ldr	r3, [pc, #116]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	461a      	mov	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012df4:	4b1a      	ldr	r3, [pc, #104]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	4619      	mov	r1, r3
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7fe ff6f 	bl	8011cde <USBD_SetClassConfig>
 8012e00:	4603      	mov	r3, r0
 8012e02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012e04:	7bfb      	ldrb	r3, [r7, #15]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d00f      	beq.n	8012e2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012e0a:	6839      	ldr	r1, [r7, #0]
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f000 f918 	bl	8013042 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	4619      	mov	r1, r3
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7fe ff7b 	bl	8011d16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2202      	movs	r2, #2
 8012e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012e28:	e014      	b.n	8012e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f000 f9e0 	bl	80131f0 <USBD_CtlSendStatus>
      break;
 8012e30:	e010      	b.n	8012e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f000 f9dc 	bl	80131f0 <USBD_CtlSendStatus>
      break;
 8012e38:	e00c      	b.n	8012e54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012e3a:	6839      	ldr	r1, [r7, #0]
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f000 f900 	bl	8013042 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012e42:	4b07      	ldr	r3, [pc, #28]	@ (8012e60 <USBD_SetConfig+0x150>)
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	4619      	mov	r1, r3
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7fe ff64 	bl	8011d16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012e4e:	2303      	movs	r3, #3
 8012e50:	73fb      	strb	r3, [r7, #15]
      break;
 8012e52:	bf00      	nop
  }

  return ret;
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	24070fb8 	.word	0x24070fb8

08012e64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	88db      	ldrh	r3, [r3, #6]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d004      	beq.n	8012e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012e76:	6839      	ldr	r1, [r7, #0]
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 f8e2 	bl	8013042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012e7e:	e023      	b.n	8012ec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e86:	b2db      	uxtb	r3, r3
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	dc02      	bgt.n	8012e92 <USBD_GetConfig+0x2e>
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	dc03      	bgt.n	8012e98 <USBD_GetConfig+0x34>
 8012e90:	e015      	b.n	8012ebe <USBD_GetConfig+0x5a>
 8012e92:	2b03      	cmp	r3, #3
 8012e94:	d00b      	beq.n	8012eae <USBD_GetConfig+0x4a>
 8012e96:	e012      	b.n	8012ebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	3308      	adds	r3, #8
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 f948 	bl	801313c <USBD_CtlSendData>
        break;
 8012eac:	e00c      	b.n	8012ec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	3304      	adds	r3, #4
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f940 	bl	801313c <USBD_CtlSendData>
        break;
 8012ebc:	e004      	b.n	8012ec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012ebe:	6839      	ldr	r1, [r7, #0]
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f000 f8be 	bl	8013042 <USBD_CtlError>
        break;
 8012ec6:	bf00      	nop
}
 8012ec8:	bf00      	nop
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	2b02      	cmp	r3, #2
 8012ee6:	d81e      	bhi.n	8012f26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	88db      	ldrh	r3, [r3, #6]
 8012eec:	2b02      	cmp	r3, #2
 8012eee:	d004      	beq.n	8012efa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012ef0:	6839      	ldr	r1, [r7, #0]
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 f8a5 	bl	8013042 <USBD_CtlError>
        break;
 8012ef8:	e01a      	b.n	8012f30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2201      	movs	r2, #1
 8012efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d005      	beq.n	8012f16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	68db      	ldr	r3, [r3, #12]
 8012f0e:	f043 0202 	orr.w	r2, r3, #2
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	330c      	adds	r3, #12
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 f90c 	bl	801313c <USBD_CtlSendData>
      break;
 8012f24:	e004      	b.n	8012f30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012f26:	6839      	ldr	r1, [r7, #0]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f000 f88a 	bl	8013042 <USBD_CtlError>
      break;
 8012f2e:	bf00      	nop
  }
}
 8012f30:	bf00      	nop
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	885b      	ldrh	r3, [r3, #2]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d107      	bne.n	8012f5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 f94c 	bl	80131f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012f58:	e013      	b.n	8012f82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	885b      	ldrh	r3, [r3, #2]
 8012f5e:	2b02      	cmp	r3, #2
 8012f60:	d10b      	bne.n	8012f7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	889b      	ldrh	r3, [r3, #4]
 8012f66:	0a1b      	lsrs	r3, r3, #8
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	b2da      	uxtb	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f000 f93c 	bl	80131f0 <USBD_CtlSendStatus>
}
 8012f78:	e003      	b.n	8012f82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012f7a:	6839      	ldr	r1, [r7, #0]
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f000 f860 	bl	8013042 <USBD_CtlError>
}
 8012f82:	bf00      	nop
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b082      	sub	sp, #8
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
 8012f92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	d80b      	bhi.n	8012fba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	885b      	ldrh	r3, [r3, #2]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d10c      	bne.n	8012fc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 f91c 	bl	80131f0 <USBD_CtlSendStatus>
      }
      break;
 8012fb8:	e004      	b.n	8012fc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012fba:	6839      	ldr	r1, [r7, #0]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 f840 	bl	8013042 <USBD_CtlError>
      break;
 8012fc2:	e000      	b.n	8012fc6 <USBD_ClrFeature+0x3c>
      break;
 8012fc4:	bf00      	nop
  }
}
 8012fc6:	bf00      	nop
 8012fc8:	3708      	adds	r7, #8
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}

08012fce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012fce:	b580      	push	{r7, lr}
 8012fd0:	b084      	sub	sp, #16
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
 8012fd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	781a      	ldrb	r2, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	781a      	ldrb	r2, [r3, #0]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f7ff fa16 	bl	801242a <SWAPBYTE>
 8012ffe:	4603      	mov	r3, r0
 8013000:	461a      	mov	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	3301      	adds	r3, #1
 801300a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	3301      	adds	r3, #1
 8013010:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013012:	68f8      	ldr	r0, [r7, #12]
 8013014:	f7ff fa09 	bl	801242a <SWAPBYTE>
 8013018:	4603      	mov	r3, r0
 801301a:	461a      	mov	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	3301      	adds	r3, #1
 8013024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	3301      	adds	r3, #1
 801302a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f7ff f9fc 	bl	801242a <SWAPBYTE>
 8013032:	4603      	mov	r3, r0
 8013034:	461a      	mov	r2, r3
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	80da      	strh	r2, [r3, #6]
}
 801303a:	bf00      	nop
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b082      	sub	sp, #8
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
 801304a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801304c:	2180      	movs	r1, #128	@ 0x80
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f003 fac0 	bl	80165d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013054:	2100      	movs	r1, #0
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f003 fabc 	bl	80165d4 <USBD_LL_StallEP>
}
 801305c:	bf00      	nop
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b086      	sub	sp, #24
 8013068:	af00      	add	r7, sp, #0
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013070:	2300      	movs	r3, #0
 8013072:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d042      	beq.n	8013100 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801307e:	6938      	ldr	r0, [r7, #16]
 8013080:	f000 f842 	bl	8013108 <USBD_GetLen>
 8013084:	4603      	mov	r3, r0
 8013086:	3301      	adds	r3, #1
 8013088:	005b      	lsls	r3, r3, #1
 801308a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801308e:	d808      	bhi.n	80130a2 <USBD_GetString+0x3e>
 8013090:	6938      	ldr	r0, [r7, #16]
 8013092:	f000 f839 	bl	8013108 <USBD_GetLen>
 8013096:	4603      	mov	r3, r0
 8013098:	3301      	adds	r3, #1
 801309a:	b29b      	uxth	r3, r3
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	b29a      	uxth	r2, r3
 80130a0:	e001      	b.n	80130a6 <USBD_GetString+0x42>
 80130a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80130aa:	7dfb      	ldrb	r3, [r7, #23]
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	4413      	add	r3, r2
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	7812      	ldrb	r2, [r2, #0]
 80130b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80130b6:	7dfb      	ldrb	r3, [r7, #23]
 80130b8:	3301      	adds	r3, #1
 80130ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80130bc:	7dfb      	ldrb	r3, [r7, #23]
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	4413      	add	r3, r2
 80130c2:	2203      	movs	r2, #3
 80130c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80130c6:	7dfb      	ldrb	r3, [r7, #23]
 80130c8:	3301      	adds	r3, #1
 80130ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80130cc:	e013      	b.n	80130f6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
 80130d0:	68ba      	ldr	r2, [r7, #8]
 80130d2:	4413      	add	r3, r2
 80130d4:	693a      	ldr	r2, [r7, #16]
 80130d6:	7812      	ldrb	r2, [r2, #0]
 80130d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	3301      	adds	r3, #1
 80130de:	613b      	str	r3, [r7, #16]
    idx++;
 80130e0:	7dfb      	ldrb	r3, [r7, #23]
 80130e2:	3301      	adds	r3, #1
 80130e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80130e6:	7dfb      	ldrb	r3, [r7, #23]
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	4413      	add	r3, r2
 80130ec:	2200      	movs	r2, #0
 80130ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80130f0:	7dfb      	ldrb	r3, [r7, #23]
 80130f2:	3301      	adds	r3, #1
 80130f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d1e7      	bne.n	80130ce <USBD_GetString+0x6a>
 80130fe:	e000      	b.n	8013102 <USBD_GetString+0x9e>
    return;
 8013100:	bf00      	nop
  }
}
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013108:	b480      	push	{r7}
 801310a:	b085      	sub	sp, #20
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013110:	2300      	movs	r3, #0
 8013112:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013118:	e005      	b.n	8013126 <USBD_GetLen+0x1e>
  {
    len++;
 801311a:	7bfb      	ldrb	r3, [r7, #15]
 801311c:	3301      	adds	r3, #1
 801311e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	3301      	adds	r3, #1
 8013124:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d1f5      	bne.n	801311a <USBD_GetLen+0x12>
  }

  return len;
 801312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013130:	4618      	mov	r0, r3
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr

0801313c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	60b9      	str	r1, [r7, #8]
 8013146:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2202      	movs	r2, #2
 801314c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	68ba      	ldr	r2, [r7, #8]
 8013160:	2100      	movs	r1, #0
 8013162:	68f8      	ldr	r0, [r7, #12]
 8013164:	f003 fabf 	bl	80166e6 <USBD_LL_Transmit>

  return USBD_OK;
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3710      	adds	r7, #16
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b084      	sub	sp, #16
 8013176:	af00      	add	r7, sp, #0
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	60b9      	str	r1, [r7, #8]
 801317c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	68ba      	ldr	r2, [r7, #8]
 8013182:	2100      	movs	r1, #0
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	f003 faae 	bl	80166e6 <USBD_LL_Transmit>

  return USBD_OK;
 801318a:	2300      	movs	r3, #0
}
 801318c:	4618      	mov	r0, r3
 801318e:	3710      	adds	r7, #16
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2203      	movs	r2, #3
 80131a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	68ba      	ldr	r2, [r7, #8]
 80131bc:	2100      	movs	r1, #0
 80131be:	68f8      	ldr	r0, [r7, #12]
 80131c0:	f003 fab2 	bl	8016728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80131c4:	2300      	movs	r3, #0
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b084      	sub	sp, #16
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	60f8      	str	r0, [r7, #12]
 80131d6:	60b9      	str	r1, [r7, #8]
 80131d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	68ba      	ldr	r2, [r7, #8]
 80131de:	2100      	movs	r1, #0
 80131e0:	68f8      	ldr	r0, [r7, #12]
 80131e2:	f003 faa1 	bl	8016728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80131e6:	2300      	movs	r3, #0
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2204      	movs	r2, #4
 80131fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013200:	2300      	movs	r3, #0
 8013202:	2200      	movs	r2, #0
 8013204:	2100      	movs	r1, #0
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f003 fa6d 	bl	80166e6 <USBD_LL_Transmit>

  return USBD_OK;
 801320c:	2300      	movs	r3, #0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3708      	adds	r7, #8
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b082      	sub	sp, #8
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2205      	movs	r2, #5
 8013222:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013226:	2300      	movs	r3, #0
 8013228:	2200      	movs	r2, #0
 801322a:	2100      	movs	r1, #0
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f003 fa7b 	bl	8016728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	3708      	adds	r7, #8
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <__NVIC_SetPriority>:
{
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	4603      	mov	r3, r0
 8013244:	6039      	str	r1, [r7, #0]
 8013246:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801324c:	2b00      	cmp	r3, #0
 801324e:	db0a      	blt.n	8013266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	b2da      	uxtb	r2, r3
 8013254:	490c      	ldr	r1, [pc, #48]	@ (8013288 <__NVIC_SetPriority+0x4c>)
 8013256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801325a:	0112      	lsls	r2, r2, #4
 801325c:	b2d2      	uxtb	r2, r2
 801325e:	440b      	add	r3, r1
 8013260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013264:	e00a      	b.n	801327c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	b2da      	uxtb	r2, r3
 801326a:	4908      	ldr	r1, [pc, #32]	@ (801328c <__NVIC_SetPriority+0x50>)
 801326c:	88fb      	ldrh	r3, [r7, #6]
 801326e:	f003 030f 	and.w	r3, r3, #15
 8013272:	3b04      	subs	r3, #4
 8013274:	0112      	lsls	r2, r2, #4
 8013276:	b2d2      	uxtb	r2, r2
 8013278:	440b      	add	r3, r1
 801327a:	761a      	strb	r2, [r3, #24]
}
 801327c:	bf00      	nop
 801327e:	370c      	adds	r7, #12
 8013280:	46bd      	mov	sp, r7
 8013282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013286:	4770      	bx	lr
 8013288:	e000e100 	.word	0xe000e100
 801328c:	e000ed00 	.word	0xe000ed00

08013290 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013290:	b580      	push	{r7, lr}
 8013292:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013294:	4b05      	ldr	r3, [pc, #20]	@ (80132ac <SysTick_Handler+0x1c>)
 8013296:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013298:	f001 fcf4 	bl	8014c84 <xTaskGetSchedulerState>
 801329c:	4603      	mov	r3, r0
 801329e:	2b01      	cmp	r3, #1
 80132a0:	d001      	beq.n	80132a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80132a2:	f002 fae9 	bl	8015878 <xPortSysTickHandler>
  }
}
 80132a6:	bf00      	nop
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	e000e010 	.word	0xe000e010

080132b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80132b0:	b580      	push	{r7, lr}
 80132b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80132b4:	2100      	movs	r1, #0
 80132b6:	f06f 0004 	mvn.w	r0, #4
 80132ba:	f7ff ffbf 	bl	801323c <__NVIC_SetPriority>
#endif
}
 80132be:	bf00      	nop
 80132c0:	bd80      	pop	{r7, pc}
	...

080132c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132ca:	f3ef 8305 	mrs	r3, IPSR
 80132ce:	603b      	str	r3, [r7, #0]
  return(result);
 80132d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d003      	beq.n	80132de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80132d6:	f06f 0305 	mvn.w	r3, #5
 80132da:	607b      	str	r3, [r7, #4]
 80132dc:	e00c      	b.n	80132f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80132de:	4b0a      	ldr	r3, [pc, #40]	@ (8013308 <osKernelInitialize+0x44>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d105      	bne.n	80132f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80132e6:	4b08      	ldr	r3, [pc, #32]	@ (8013308 <osKernelInitialize+0x44>)
 80132e8:	2201      	movs	r2, #1
 80132ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80132ec:	2300      	movs	r3, #0
 80132ee:	607b      	str	r3, [r7, #4]
 80132f0:	e002      	b.n	80132f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80132f2:	f04f 33ff 	mov.w	r3, #4294967295
 80132f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80132f8:	687b      	ldr	r3, [r7, #4]
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	370c      	adds	r7, #12
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	24070fbc 	.word	0x24070fbc

0801330c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013312:	f3ef 8305 	mrs	r3, IPSR
 8013316:	603b      	str	r3, [r7, #0]
  return(result);
 8013318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801331a:	2b00      	cmp	r3, #0
 801331c:	d003      	beq.n	8013326 <osKernelStart+0x1a>
    stat = osErrorISR;
 801331e:	f06f 0305 	mvn.w	r3, #5
 8013322:	607b      	str	r3, [r7, #4]
 8013324:	e010      	b.n	8013348 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013326:	4b0b      	ldr	r3, [pc, #44]	@ (8013354 <osKernelStart+0x48>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b01      	cmp	r3, #1
 801332c:	d109      	bne.n	8013342 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801332e:	f7ff ffbf 	bl	80132b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013332:	4b08      	ldr	r3, [pc, #32]	@ (8013354 <osKernelStart+0x48>)
 8013334:	2202      	movs	r2, #2
 8013336:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013338:	f001 f840 	bl	80143bc <vTaskStartScheduler>
      stat = osOK;
 801333c:	2300      	movs	r3, #0
 801333e:	607b      	str	r3, [r7, #4]
 8013340:	e002      	b.n	8013348 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013342:	f04f 33ff 	mov.w	r3, #4294967295
 8013346:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013348:	687b      	ldr	r3, [r7, #4]
}
 801334a:	4618      	mov	r0, r3
 801334c:	3708      	adds	r7, #8
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	24070fbc 	.word	0x24070fbc

08013358 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013358:	b580      	push	{r7, lr}
 801335a:	b08e      	sub	sp, #56	@ 0x38
 801335c:	af04      	add	r7, sp, #16
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013364:	2300      	movs	r3, #0
 8013366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013368:	f3ef 8305 	mrs	r3, IPSR
 801336c:	617b      	str	r3, [r7, #20]
  return(result);
 801336e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013370:	2b00      	cmp	r3, #0
 8013372:	d17e      	bne.n	8013472 <osThreadNew+0x11a>
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d07b      	beq.n	8013472 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801337a:	2380      	movs	r3, #128	@ 0x80
 801337c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801337e:	2318      	movs	r3, #24
 8013380:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013382:	2300      	movs	r3, #0
 8013384:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013386:	f04f 33ff 	mov.w	r3, #4294967295
 801338a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d045      	beq.n	801341e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d002      	beq.n	80133a0 <osThreadNew+0x48>
        name = attr->name;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	699b      	ldr	r3, [r3, #24]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d002      	beq.n	80133ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	699b      	ldr	r3, [r3, #24]
 80133ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d008      	beq.n	80133c6 <osThreadNew+0x6e>
 80133b4:	69fb      	ldr	r3, [r7, #28]
 80133b6:	2b38      	cmp	r3, #56	@ 0x38
 80133b8:	d805      	bhi.n	80133c6 <osThreadNew+0x6e>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	f003 0301 	and.w	r3, r3, #1
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <osThreadNew+0x72>
        return (NULL);
 80133c6:	2300      	movs	r3, #0
 80133c8:	e054      	b.n	8013474 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	695b      	ldr	r3, [r3, #20]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d003      	beq.n	80133da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	695b      	ldr	r3, [r3, #20]
 80133d6:	089b      	lsrs	r3, r3, #2
 80133d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	689b      	ldr	r3, [r3, #8]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d00e      	beq.n	8013400 <osThreadNew+0xa8>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80133e8:	d90a      	bls.n	8013400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d006      	beq.n	8013400 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	695b      	ldr	r3, [r3, #20]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d002      	beq.n	8013400 <osThreadNew+0xa8>
        mem = 1;
 80133fa:	2301      	movs	r3, #1
 80133fc:	61bb      	str	r3, [r7, #24]
 80133fe:	e010      	b.n	8013422 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	689b      	ldr	r3, [r3, #8]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10c      	bne.n	8013422 <osThreadNew+0xca>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d108      	bne.n	8013422 <osThreadNew+0xca>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	691b      	ldr	r3, [r3, #16]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d104      	bne.n	8013422 <osThreadNew+0xca>
          mem = 0;
 8013418:	2300      	movs	r3, #0
 801341a:	61bb      	str	r3, [r7, #24]
 801341c:	e001      	b.n	8013422 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801341e:	2300      	movs	r3, #0
 8013420:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	2b01      	cmp	r3, #1
 8013426:	d110      	bne.n	801344a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013430:	9202      	str	r2, [sp, #8]
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	6a3a      	ldr	r2, [r7, #32]
 801343c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801343e:	68f8      	ldr	r0, [r7, #12]
 8013440:	f000 fdfe 	bl	8014040 <xTaskCreateStatic>
 8013444:	4603      	mov	r3, r0
 8013446:	613b      	str	r3, [r7, #16]
 8013448:	e013      	b.n	8013472 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801344a:	69bb      	ldr	r3, [r7, #24]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d110      	bne.n	8013472 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013450:	6a3b      	ldr	r3, [r7, #32]
 8013452:	b29a      	uxth	r2, r3
 8013454:	f107 0310 	add.w	r3, r7, #16
 8013458:	9301      	str	r3, [sp, #4]
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	f000 fe4c 	bl	8014100 <xTaskCreate>
 8013468:	4603      	mov	r3, r0
 801346a:	2b01      	cmp	r3, #1
 801346c:	d001      	beq.n	8013472 <osThreadNew+0x11a>
            hTask = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013472:	693b      	ldr	r3, [r7, #16]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3728      	adds	r7, #40	@ 0x28
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801347c:	b480      	push	{r7}
 801347e:	b085      	sub	sp, #20
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	4a07      	ldr	r2, [pc, #28]	@ (80134a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801348c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	4a06      	ldr	r2, [pc, #24]	@ (80134ac <vApplicationGetIdleTaskMemory+0x30>)
 8013492:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2280      	movs	r2, #128	@ 0x80
 8013498:	601a      	str	r2, [r3, #0]
}
 801349a:	bf00      	nop
 801349c:	3714      	adds	r7, #20
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop
 80134a8:	24070fc0 	.word	0x24070fc0
 80134ac:	24071068 	.word	0x24071068

080134b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80134b0:	b480      	push	{r7}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	4a07      	ldr	r2, [pc, #28]	@ (80134dc <vApplicationGetTimerTaskMemory+0x2c>)
 80134c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	4a06      	ldr	r2, [pc, #24]	@ (80134e0 <vApplicationGetTimerTaskMemory+0x30>)
 80134c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80134ce:	601a      	str	r2, [r3, #0]
}
 80134d0:	bf00      	nop
 80134d2:	3714      	adds	r7, #20
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	24071268 	.word	0x24071268
 80134e0:	24071310 	.word	0x24071310

080134e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f103 0208 	add.w	r2, r3, #8
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f04f 32ff 	mov.w	r2, #4294967295
 80134fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f103 0208 	add.w	r2, r3, #8
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f103 0208 	add.w	r2, r3, #8
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2200      	movs	r2, #0
 8013516:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013518:	bf00      	nop
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr

08013524 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013532:	bf00      	nop
 8013534:	370c      	adds	r7, #12
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr

0801353e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801353e:	b480      	push	{r7}
 8013540:	b085      	sub	sp, #20
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
 8013546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	689a      	ldr	r2, [r3, #8]
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	689b      	ldr	r3, [r3, #8]
 8013560:	683a      	ldr	r2, [r7, #0]
 8013562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	683a      	ldr	r2, [r7, #0]
 8013568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	1c5a      	adds	r2, r3, #1
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	601a      	str	r2, [r3, #0]
}
 801357a:	bf00      	nop
 801357c:	3714      	adds	r7, #20
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr

08013586 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013586:	b480      	push	{r7}
 8013588:	b085      	sub	sp, #20
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
 801358e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359c:	d103      	bne.n	80135a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	691b      	ldr	r3, [r3, #16]
 80135a2:	60fb      	str	r3, [r7, #12]
 80135a4:	e00c      	b.n	80135c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	3308      	adds	r3, #8
 80135aa:	60fb      	str	r3, [r7, #12]
 80135ac:	e002      	b.n	80135b4 <vListInsert+0x2e>
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	60fb      	str	r3, [r7, #12]
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d2f6      	bcs.n	80135ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	685a      	ldr	r2, [r3, #4]
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	683a      	ldr	r2, [r7, #0]
 80135ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	683a      	ldr	r2, [r7, #0]
 80135da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	687a      	ldr	r2, [r7, #4]
 80135e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	1c5a      	adds	r2, r3, #1
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	601a      	str	r2, [r3, #0]
}
 80135ec:	bf00      	nop
 80135ee:	3714      	adds	r7, #20
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr

080135f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80135f8:	b480      	push	{r7}
 80135fa:	b085      	sub	sp, #20
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	691b      	ldr	r3, [r3, #16]
 8013604:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	6892      	ldr	r2, [r2, #8]
 801360e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	6852      	ldr	r2, [r2, #4]
 8013618:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	687a      	ldr	r2, [r7, #4]
 8013620:	429a      	cmp	r2, r3
 8013622:	d103      	bne.n	801362c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	689a      	ldr	r2, [r3, #8]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2200      	movs	r2, #0
 8013630:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	1e5a      	subs	r2, r3, #1
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3714      	adds	r7, #20
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr

0801364c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d10b      	bne.n	8013678 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013664:	f383 8811 	msr	BASEPRI, r3
 8013668:	f3bf 8f6f 	isb	sy
 801366c:	f3bf 8f4f 	dsb	sy
 8013670:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013672:	bf00      	nop
 8013674:	bf00      	nop
 8013676:	e7fd      	b.n	8013674 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013678:	f002 f86e 	bl	8015758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013684:	68f9      	ldr	r1, [r7, #12]
 8013686:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013688:	fb01 f303 	mul.w	r3, r1, r3
 801368c:	441a      	add	r2, r3
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2200      	movs	r2, #0
 8013696:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136a8:	3b01      	subs	r3, #1
 80136aa:	68f9      	ldr	r1, [r7, #12]
 80136ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80136ae:	fb01 f303 	mul.w	r3, r1, r3
 80136b2:	441a      	add	r2, r3
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	22ff      	movs	r2, #255	@ 0xff
 80136bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	22ff      	movs	r2, #255	@ 0xff
 80136c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d114      	bne.n	80136f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	691b      	ldr	r3, [r3, #16]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d01a      	beq.n	801370c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	3310      	adds	r3, #16
 80136da:	4618      	mov	r0, r3
 80136dc:	f001 f90c 	bl	80148f8 <xTaskRemoveFromEventList>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d012      	beq.n	801370c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80136e6:	4b0d      	ldr	r3, [pc, #52]	@ (801371c <xQueueGenericReset+0xd0>)
 80136e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80136ec:	601a      	str	r2, [r3, #0]
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	f3bf 8f6f 	isb	sy
 80136f6:	e009      	b.n	801370c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	3310      	adds	r3, #16
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7ff fef1 	bl	80134e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	3324      	adds	r3, #36	@ 0x24
 8013706:	4618      	mov	r0, r3
 8013708:	f7ff feec 	bl	80134e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801370c:	f002 f856 	bl	80157bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013710:	2301      	movs	r3, #1
}
 8013712:	4618      	mov	r0, r3
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	e000ed04 	.word	0xe000ed04

08013720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013720:	b580      	push	{r7, lr}
 8013722:	b08e      	sub	sp, #56	@ 0x38
 8013724:	af02      	add	r7, sp, #8
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
 801372c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d10b      	bne.n	801374c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013738:	f383 8811 	msr	BASEPRI, r3
 801373c:	f3bf 8f6f 	isb	sy
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013746:	bf00      	nop
 8013748:	bf00      	nop
 801374a:	e7fd      	b.n	8013748 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d10b      	bne.n	801376a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013756:	f383 8811 	msr	BASEPRI, r3
 801375a:	f3bf 8f6f 	isb	sy
 801375e:	f3bf 8f4f 	dsb	sy
 8013762:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013764:	bf00      	nop
 8013766:	bf00      	nop
 8013768:	e7fd      	b.n	8013766 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <xQueueGenericCreateStatic+0x56>
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d001      	beq.n	801377a <xQueueGenericCreateStatic+0x5a>
 8013776:	2301      	movs	r3, #1
 8013778:	e000      	b.n	801377c <xQueueGenericCreateStatic+0x5c>
 801377a:	2300      	movs	r3, #0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d10b      	bne.n	8013798 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8013780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013784:	f383 8811 	msr	BASEPRI, r3
 8013788:	f3bf 8f6f 	isb	sy
 801378c:	f3bf 8f4f 	dsb	sy
 8013790:	623b      	str	r3, [r7, #32]
}
 8013792:	bf00      	nop
 8013794:	bf00      	nop
 8013796:	e7fd      	b.n	8013794 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d102      	bne.n	80137a4 <xQueueGenericCreateStatic+0x84>
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d101      	bne.n	80137a8 <xQueueGenericCreateStatic+0x88>
 80137a4:	2301      	movs	r3, #1
 80137a6:	e000      	b.n	80137aa <xQueueGenericCreateStatic+0x8a>
 80137a8:	2300      	movs	r3, #0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d10b      	bne.n	80137c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80137ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	61fb      	str	r3, [r7, #28]
}
 80137c0:	bf00      	nop
 80137c2:	bf00      	nop
 80137c4:	e7fd      	b.n	80137c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137c6:	2350      	movs	r3, #80	@ 0x50
 80137c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	2b50      	cmp	r3, #80	@ 0x50
 80137ce:	d00b      	beq.n	80137e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80137d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137d4:	f383 8811 	msr	BASEPRI, r3
 80137d8:	f3bf 8f6f 	isb	sy
 80137dc:	f3bf 8f4f 	dsb	sy
 80137e0:	61bb      	str	r3, [r7, #24]
}
 80137e2:	bf00      	nop
 80137e4:	bf00      	nop
 80137e6:	e7fd      	b.n	80137e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80137e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80137ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d00d      	beq.n	8013810 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80137f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f6:	2201      	movs	r2, #1
 80137f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80137fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	4613      	mov	r3, r2
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	68b9      	ldr	r1, [r7, #8]
 801380a:	68f8      	ldr	r0, [r7, #12]
 801380c:	f000 f805 	bl	801381a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013812:	4618      	mov	r0, r3
 8013814:	3730      	adds	r7, #48	@ 0x30
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801381a:	b580      	push	{r7, lr}
 801381c:	b084      	sub	sp, #16
 801381e:	af00      	add	r7, sp, #0
 8013820:	60f8      	str	r0, [r7, #12]
 8013822:	60b9      	str	r1, [r7, #8]
 8013824:	607a      	str	r2, [r7, #4]
 8013826:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d103      	bne.n	8013836 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	69ba      	ldr	r2, [r7, #24]
 8013832:	601a      	str	r2, [r3, #0]
 8013834:	e002      	b.n	801383c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801383c:	69bb      	ldr	r3, [r7, #24]
 801383e:	68fa      	ldr	r2, [r7, #12]
 8013840:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013842:	69bb      	ldr	r3, [r7, #24]
 8013844:	68ba      	ldr	r2, [r7, #8]
 8013846:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013848:	2101      	movs	r1, #1
 801384a:	69b8      	ldr	r0, [r7, #24]
 801384c:	f7ff fefe 	bl	801364c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	78fa      	ldrb	r2, [r7, #3]
 8013854:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013858:	bf00      	nop
 801385a:	3710      	adds	r7, #16
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b08e      	sub	sp, #56	@ 0x38
 8013864:	af00      	add	r7, sp, #0
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	60b9      	str	r1, [r7, #8]
 801386a:	607a      	str	r2, [r7, #4]
 801386c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801386e:	2300      	movs	r3, #0
 8013870:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013878:	2b00      	cmp	r3, #0
 801387a:	d10b      	bne.n	8013894 <xQueueGenericSend+0x34>
	__asm volatile
 801387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801388e:	bf00      	nop
 8013890:	bf00      	nop
 8013892:	e7fd      	b.n	8013890 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d103      	bne.n	80138a2 <xQueueGenericSend+0x42>
 801389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d101      	bne.n	80138a6 <xQueueGenericSend+0x46>
 80138a2:	2301      	movs	r3, #1
 80138a4:	e000      	b.n	80138a8 <xQueueGenericSend+0x48>
 80138a6:	2300      	movs	r3, #0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d10b      	bne.n	80138c4 <xQueueGenericSend+0x64>
	__asm volatile
 80138ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138b0:	f383 8811 	msr	BASEPRI, r3
 80138b4:	f3bf 8f6f 	isb	sy
 80138b8:	f3bf 8f4f 	dsb	sy
 80138bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80138be:	bf00      	nop
 80138c0:	bf00      	nop
 80138c2:	e7fd      	b.n	80138c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d103      	bne.n	80138d2 <xQueueGenericSend+0x72>
 80138ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d101      	bne.n	80138d6 <xQueueGenericSend+0x76>
 80138d2:	2301      	movs	r3, #1
 80138d4:	e000      	b.n	80138d8 <xQueueGenericSend+0x78>
 80138d6:	2300      	movs	r3, #0
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d10b      	bne.n	80138f4 <xQueueGenericSend+0x94>
	__asm volatile
 80138dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138e0:	f383 8811 	msr	BASEPRI, r3
 80138e4:	f3bf 8f6f 	isb	sy
 80138e8:	f3bf 8f4f 	dsb	sy
 80138ec:	623b      	str	r3, [r7, #32]
}
 80138ee:	bf00      	nop
 80138f0:	bf00      	nop
 80138f2:	e7fd      	b.n	80138f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80138f4:	f001 f9c6 	bl	8014c84 <xTaskGetSchedulerState>
 80138f8:	4603      	mov	r3, r0
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d102      	bne.n	8013904 <xQueueGenericSend+0xa4>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d101      	bne.n	8013908 <xQueueGenericSend+0xa8>
 8013904:	2301      	movs	r3, #1
 8013906:	e000      	b.n	801390a <xQueueGenericSend+0xaa>
 8013908:	2300      	movs	r3, #0
 801390a:	2b00      	cmp	r3, #0
 801390c:	d10b      	bne.n	8013926 <xQueueGenericSend+0xc6>
	__asm volatile
 801390e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013912:	f383 8811 	msr	BASEPRI, r3
 8013916:	f3bf 8f6f 	isb	sy
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	61fb      	str	r3, [r7, #28]
}
 8013920:	bf00      	nop
 8013922:	bf00      	nop
 8013924:	e7fd      	b.n	8013922 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013926:	f001 ff17 	bl	8015758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801392c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013932:	429a      	cmp	r2, r3
 8013934:	d302      	bcc.n	801393c <xQueueGenericSend+0xdc>
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	2b02      	cmp	r3, #2
 801393a:	d129      	bne.n	8013990 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801393c:	683a      	ldr	r2, [r7, #0]
 801393e:	68b9      	ldr	r1, [r7, #8]
 8013940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013942:	f000 fa0f 	bl	8013d64 <prvCopyDataToQueue>
 8013946:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801394c:	2b00      	cmp	r3, #0
 801394e:	d010      	beq.n	8013972 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013952:	3324      	adds	r3, #36	@ 0x24
 8013954:	4618      	mov	r0, r3
 8013956:	f000 ffcf 	bl	80148f8 <xTaskRemoveFromEventList>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d013      	beq.n	8013988 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013960:	4b3f      	ldr	r3, [pc, #252]	@ (8013a60 <xQueueGenericSend+0x200>)
 8013962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013966:	601a      	str	r2, [r3, #0]
 8013968:	f3bf 8f4f 	dsb	sy
 801396c:	f3bf 8f6f 	isb	sy
 8013970:	e00a      	b.n	8013988 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013974:	2b00      	cmp	r3, #0
 8013976:	d007      	beq.n	8013988 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013978:	4b39      	ldr	r3, [pc, #228]	@ (8013a60 <xQueueGenericSend+0x200>)
 801397a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801397e:	601a      	str	r2, [r3, #0]
 8013980:	f3bf 8f4f 	dsb	sy
 8013984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013988:	f001 ff18 	bl	80157bc <vPortExitCritical>
				return pdPASS;
 801398c:	2301      	movs	r3, #1
 801398e:	e063      	b.n	8013a58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d103      	bne.n	801399e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013996:	f001 ff11 	bl	80157bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801399a:	2300      	movs	r3, #0
 801399c:	e05c      	b.n	8013a58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d106      	bne.n	80139b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139a4:	f107 0314 	add.w	r3, r7, #20
 80139a8:	4618      	mov	r0, r3
 80139aa:	f001 f809 	bl	80149c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139ae:	2301      	movs	r3, #1
 80139b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139b2:	f001 ff03 	bl	80157bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139b6:	f000 fd71 	bl	801449c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139ba:	f001 fecd 	bl	8015758 <vPortEnterCritical>
 80139be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80139c4:	b25b      	sxtb	r3, r3
 80139c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ca:	d103      	bne.n	80139d4 <xQueueGenericSend+0x174>
 80139cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ce:	2200      	movs	r2, #0
 80139d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80139d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80139da:	b25b      	sxtb	r3, r3
 80139dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e0:	d103      	bne.n	80139ea <xQueueGenericSend+0x18a>
 80139e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e4:	2200      	movs	r2, #0
 80139e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80139ea:	f001 fee7 	bl	80157bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80139ee:	1d3a      	adds	r2, r7, #4
 80139f0:	f107 0314 	add.w	r3, r7, #20
 80139f4:	4611      	mov	r1, r2
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 fff8 	bl	80149ec <xTaskCheckForTimeOut>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d124      	bne.n	8013a4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a04:	f000 faa6 	bl	8013f54 <prvIsQueueFull>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d018      	beq.n	8013a40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a10:	3310      	adds	r3, #16
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	4611      	mov	r1, r2
 8013a16:	4618      	mov	r0, r3
 8013a18:	f000 ff1c 	bl	8014854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a1e:	f000 fa31 	bl	8013e84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a22:	f000 fd49 	bl	80144b8 <xTaskResumeAll>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f47f af7c 	bne.w	8013926 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8013a60 <xQueueGenericSend+0x200>)
 8013a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a34:	601a      	str	r2, [r3, #0]
 8013a36:	f3bf 8f4f 	dsb	sy
 8013a3a:	f3bf 8f6f 	isb	sy
 8013a3e:	e772      	b.n	8013926 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a42:	f000 fa1f 	bl	8013e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a46:	f000 fd37 	bl	80144b8 <xTaskResumeAll>
 8013a4a:	e76c      	b.n	8013926 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a4e:	f000 fa19 	bl	8013e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a52:	f000 fd31 	bl	80144b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3738      	adds	r7, #56	@ 0x38
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	e000ed04 	.word	0xe000ed04

08013a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b090      	sub	sp, #64	@ 0x40
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8013a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10b      	bne.n	8013a94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013a8e:	bf00      	nop
 8013a90:	bf00      	nop
 8013a92:	e7fd      	b.n	8013a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d103      	bne.n	8013aa2 <xQueueGenericSendFromISR+0x3e>
 8013a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d101      	bne.n	8013aa6 <xQueueGenericSendFromISR+0x42>
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	e000      	b.n	8013aa8 <xQueueGenericSendFromISR+0x44>
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d10b      	bne.n	8013ac4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ab0:	f383 8811 	msr	BASEPRI, r3
 8013ab4:	f3bf 8f6f 	isb	sy
 8013ab8:	f3bf 8f4f 	dsb	sy
 8013abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013abe:	bf00      	nop
 8013ac0:	bf00      	nop
 8013ac2:	e7fd      	b.n	8013ac0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d103      	bne.n	8013ad2 <xQueueGenericSendFromISR+0x6e>
 8013aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	d101      	bne.n	8013ad6 <xQueueGenericSendFromISR+0x72>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e000      	b.n	8013ad8 <xQueueGenericSendFromISR+0x74>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d10b      	bne.n	8013af4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8013adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ae0:	f383 8811 	msr	BASEPRI, r3
 8013ae4:	f3bf 8f6f 	isb	sy
 8013ae8:	f3bf 8f4f 	dsb	sy
 8013aec:	623b      	str	r3, [r7, #32]
}
 8013aee:	bf00      	nop
 8013af0:	bf00      	nop
 8013af2:	e7fd      	b.n	8013af0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013af4:	f001 ff10 	bl	8015918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013af8:	f3ef 8211 	mrs	r2, BASEPRI
 8013afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b00:	f383 8811 	msr	BASEPRI, r3
 8013b04:	f3bf 8f6f 	isb	sy
 8013b08:	f3bf 8f4f 	dsb	sy
 8013b0c:	61fa      	str	r2, [r7, #28]
 8013b0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d302      	bcc.n	8013b26 <xQueueGenericSendFromISR+0xc2>
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	2b02      	cmp	r3, #2
 8013b24:	d12f      	bne.n	8013b86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013b2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b36:	683a      	ldr	r2, [r7, #0]
 8013b38:	68b9      	ldr	r1, [r7, #8]
 8013b3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013b3c:	f000 f912 	bl	8013d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b48:	d112      	bne.n	8013b70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d016      	beq.n	8013b80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b54:	3324      	adds	r3, #36	@ 0x24
 8013b56:	4618      	mov	r0, r3
 8013b58:	f000 fece 	bl	80148f8 <xTaskRemoveFromEventList>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d00e      	beq.n	8013b80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d00b      	beq.n	8013b80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	601a      	str	r2, [r3, #0]
 8013b6e:	e007      	b.n	8013b80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013b70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013b74:	3301      	adds	r3, #1
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	b25a      	sxtb	r2, r3
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013b80:	2301      	movs	r3, #1
 8013b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013b84:	e001      	b.n	8013b8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013b86:	2300      	movs	r3, #0
 8013b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013b94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3740      	adds	r7, #64	@ 0x40
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}

08013ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b08c      	sub	sp, #48	@ 0x30
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013bac:	2300      	movs	r3, #0
 8013bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10b      	bne.n	8013bd2 <xQueueReceive+0x32>
	__asm volatile
 8013bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	623b      	str	r3, [r7, #32]
}
 8013bcc:	bf00      	nop
 8013bce:	bf00      	nop
 8013bd0:	e7fd      	b.n	8013bce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d103      	bne.n	8013be0 <xQueueReceive+0x40>
 8013bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d101      	bne.n	8013be4 <xQueueReceive+0x44>
 8013be0:	2301      	movs	r3, #1
 8013be2:	e000      	b.n	8013be6 <xQueueReceive+0x46>
 8013be4:	2300      	movs	r3, #0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d10b      	bne.n	8013c02 <xQueueReceive+0x62>
	__asm volatile
 8013bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bee:	f383 8811 	msr	BASEPRI, r3
 8013bf2:	f3bf 8f6f 	isb	sy
 8013bf6:	f3bf 8f4f 	dsb	sy
 8013bfa:	61fb      	str	r3, [r7, #28]
}
 8013bfc:	bf00      	nop
 8013bfe:	bf00      	nop
 8013c00:	e7fd      	b.n	8013bfe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c02:	f001 f83f 	bl	8014c84 <xTaskGetSchedulerState>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d102      	bne.n	8013c12 <xQueueReceive+0x72>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <xQueueReceive+0x76>
 8013c12:	2301      	movs	r3, #1
 8013c14:	e000      	b.n	8013c18 <xQueueReceive+0x78>
 8013c16:	2300      	movs	r3, #0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d10b      	bne.n	8013c34 <xQueueReceive+0x94>
	__asm volatile
 8013c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c20:	f383 8811 	msr	BASEPRI, r3
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	f3bf 8f4f 	dsb	sy
 8013c2c:	61bb      	str	r3, [r7, #24]
}
 8013c2e:	bf00      	nop
 8013c30:	bf00      	nop
 8013c32:	e7fd      	b.n	8013c30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c34:	f001 fd90 	bl	8015758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d01f      	beq.n	8013c84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c44:	68b9      	ldr	r1, [r7, #8]
 8013c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c48:	f000 f8f6 	bl	8013e38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4e:	1e5a      	subs	r2, r3, #1
 8013c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c56:	691b      	ldr	r3, [r3, #16]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00f      	beq.n	8013c7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c5e:	3310      	adds	r3, #16
 8013c60:	4618      	mov	r0, r3
 8013c62:	f000 fe49 	bl	80148f8 <xTaskRemoveFromEventList>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d007      	beq.n	8013c7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8013d60 <xQueueReceive+0x1c0>)
 8013c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c72:	601a      	str	r2, [r3, #0]
 8013c74:	f3bf 8f4f 	dsb	sy
 8013c78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013c7c:	f001 fd9e 	bl	80157bc <vPortExitCritical>
				return pdPASS;
 8013c80:	2301      	movs	r3, #1
 8013c82:	e069      	b.n	8013d58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d103      	bne.n	8013c92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013c8a:	f001 fd97 	bl	80157bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	e062      	b.n	8013d58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d106      	bne.n	8013ca6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013c98:	f107 0310 	add.w	r3, r7, #16
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 fe8f 	bl	80149c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ca6:	f001 fd89 	bl	80157bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013caa:	f000 fbf7 	bl	801449c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cae:	f001 fd53 	bl	8015758 <vPortEnterCritical>
 8013cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013cb8:	b25b      	sxtb	r3, r3
 8013cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cbe:	d103      	bne.n	8013cc8 <xQueueReceive+0x128>
 8013cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013cce:	b25b      	sxtb	r3, r3
 8013cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cd4:	d103      	bne.n	8013cde <xQueueReceive+0x13e>
 8013cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013cde:	f001 fd6d 	bl	80157bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013ce2:	1d3a      	adds	r2, r7, #4
 8013ce4:	f107 0310 	add.w	r3, r7, #16
 8013ce8:	4611      	mov	r1, r2
 8013cea:	4618      	mov	r0, r3
 8013cec:	f000 fe7e 	bl	80149ec <xTaskCheckForTimeOut>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d123      	bne.n	8013d3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013cf8:	f000 f916 	bl	8013f28 <prvIsQueueEmpty>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d017      	beq.n	8013d32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d04:	3324      	adds	r3, #36	@ 0x24
 8013d06:	687a      	ldr	r2, [r7, #4]
 8013d08:	4611      	mov	r1, r2
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f000 fda2 	bl	8014854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d12:	f000 f8b7 	bl	8013e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d16:	f000 fbcf 	bl	80144b8 <xTaskResumeAll>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d189      	bne.n	8013c34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013d20:	4b0f      	ldr	r3, [pc, #60]	@ (8013d60 <xQueueReceive+0x1c0>)
 8013d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d26:	601a      	str	r2, [r3, #0]
 8013d28:	f3bf 8f4f 	dsb	sy
 8013d2c:	f3bf 8f6f 	isb	sy
 8013d30:	e780      	b.n	8013c34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d34:	f000 f8a6 	bl	8013e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d38:	f000 fbbe 	bl	80144b8 <xTaskResumeAll>
 8013d3c:	e77a      	b.n	8013c34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d40:	f000 f8a0 	bl	8013e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d44:	f000 fbb8 	bl	80144b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d4a:	f000 f8ed 	bl	8013f28 <prvIsQueueEmpty>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f43f af6f 	beq.w	8013c34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3730      	adds	r7, #48	@ 0x30
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	e000ed04 	.word	0xe000ed04

08013d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b086      	sub	sp, #24
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013d70:	2300      	movs	r3, #0
 8013d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d10d      	bne.n	8013d9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d14d      	bne.n	8013e26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	689b      	ldr	r3, [r3, #8]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f000 ff96 	bl	8014cc0 <xTaskPriorityDisinherit>
 8013d94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	609a      	str	r2, [r3, #8]
 8013d9c:	e043      	b.n	8013e26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d119      	bne.n	8013dd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6858      	ldr	r0, [r3, #4]
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dac:	461a      	mov	r2, r3
 8013dae:	68b9      	ldr	r1, [r7, #8]
 8013db0:	f004 facd 	bl	801834e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	685a      	ldr	r2, [r3, #4]
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dbc:	441a      	add	r2, r3
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	685a      	ldr	r2, [r3, #4]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	689b      	ldr	r3, [r3, #8]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d32b      	bcc.n	8013e26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	605a      	str	r2, [r3, #4]
 8013dd6:	e026      	b.n	8013e26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	68d8      	ldr	r0, [r3, #12]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013de0:	461a      	mov	r2, r3
 8013de2:	68b9      	ldr	r1, [r7, #8]
 8013de4:	f004 fab3 	bl	801834e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	68da      	ldr	r2, [r3, #12]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013df0:	425b      	negs	r3, r3
 8013df2:	441a      	add	r2, r3
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	68da      	ldr	r2, [r3, #12]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d207      	bcs.n	8013e14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	689a      	ldr	r2, [r3, #8]
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e0c:	425b      	negs	r3, r3
 8013e0e:	441a      	add	r2, r3
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b02      	cmp	r3, #2
 8013e18:	d105      	bne.n	8013e26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d002      	beq.n	8013e26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	3b01      	subs	r3, #1
 8013e24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	1c5a      	adds	r2, r3, #1
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013e2e:	697b      	ldr	r3, [r7, #20]
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3718      	adds	r7, #24
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d018      	beq.n	8013e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	68da      	ldr	r2, [r3, #12]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e52:	441a      	add	r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	68da      	ldr	r2, [r3, #12]
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	689b      	ldr	r3, [r3, #8]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d303      	bcc.n	8013e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	68d9      	ldr	r1, [r3, #12]
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e74:	461a      	mov	r2, r3
 8013e76:	6838      	ldr	r0, [r7, #0]
 8013e78:	f004 fa69 	bl	801834e <memcpy>
	}
}
 8013e7c:	bf00      	nop
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013e8c:	f001 fc64 	bl	8015758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e98:	e011      	b.n	8013ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d012      	beq.n	8013ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	3324      	adds	r3, #36	@ 0x24
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f000 fd26 	bl	80148f8 <xTaskRemoveFromEventList>
 8013eac:	4603      	mov	r3, r0
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d001      	beq.n	8013eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013eb2:	f000 fdff 	bl	8014ab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013eb6:	7bfb      	ldrb	r3, [r7, #15]
 8013eb8:	3b01      	subs	r3, #1
 8013eba:	b2db      	uxtb	r3, r3
 8013ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	dce9      	bgt.n	8013e9a <prvUnlockQueue+0x16>
 8013ec6:	e000      	b.n	8013eca <prvUnlockQueue+0x46>
					break;
 8013ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	22ff      	movs	r2, #255	@ 0xff
 8013ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013ed2:	f001 fc73 	bl	80157bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013ed6:	f001 fc3f 	bl	8015758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ee2:	e011      	b.n	8013f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d012      	beq.n	8013f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	3310      	adds	r3, #16
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f000 fd01 	bl	80148f8 <xTaskRemoveFromEventList>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d001      	beq.n	8013f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013efc:	f000 fdda 	bl	8014ab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013f00:	7bbb      	ldrb	r3, [r7, #14]
 8013f02:	3b01      	subs	r3, #1
 8013f04:	b2db      	uxtb	r3, r3
 8013f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	dce9      	bgt.n	8013ee4 <prvUnlockQueue+0x60>
 8013f10:	e000      	b.n	8013f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	22ff      	movs	r2, #255	@ 0xff
 8013f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013f1c:	f001 fc4e 	bl	80157bc <vPortExitCritical>
}
 8013f20:	bf00      	nop
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f30:	f001 fc12 	bl	8015758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d102      	bne.n	8013f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	60fb      	str	r3, [r7, #12]
 8013f40:	e001      	b.n	8013f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013f42:	2300      	movs	r3, #0
 8013f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f46:	f001 fc39 	bl	80157bc <vPortExitCritical>

	return xReturn;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013f5c:	f001 fbfc 	bl	8015758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d102      	bne.n	8013f72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	60fb      	str	r3, [r7, #12]
 8013f70:	e001      	b.n	8013f76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013f72:	2300      	movs	r3, #0
 8013f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013f76:	f001 fc21 	bl	80157bc <vPortExitCritical>

	return xReturn;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3710      	adds	r7, #16
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}

08013f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f8e:	2300      	movs	r3, #0
 8013f90:	60fb      	str	r3, [r7, #12]
 8013f92:	e014      	b.n	8013fbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013f94:	4a0f      	ldr	r2, [pc, #60]	@ (8013fd4 <vQueueAddToRegistry+0x50>)
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d10b      	bne.n	8013fb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013fa0:	490c      	ldr	r1, [pc, #48]	@ (8013fd4 <vQueueAddToRegistry+0x50>)
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013faa:	4a0a      	ldr	r2, [pc, #40]	@ (8013fd4 <vQueueAddToRegistry+0x50>)
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	00db      	lsls	r3, r3, #3
 8013fb0:	4413      	add	r3, r2
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013fb6:	e006      	b.n	8013fc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	60fb      	str	r3, [r7, #12]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2b07      	cmp	r3, #7
 8013fc2:	d9e7      	bls.n	8013f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	3714      	adds	r7, #20
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr
 8013fd2:	bf00      	nop
 8013fd4:	24071710 	.word	0x24071710

08013fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b086      	sub	sp, #24
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013fe8:	f001 fbb6 	bl	8015758 <vPortEnterCritical>
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013ff2:	b25b      	sxtb	r3, r3
 8013ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ff8:	d103      	bne.n	8014002 <vQueueWaitForMessageRestricted+0x2a>
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014008:	b25b      	sxtb	r3, r3
 801400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801400e:	d103      	bne.n	8014018 <vQueueWaitForMessageRestricted+0x40>
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	2200      	movs	r2, #0
 8014014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014018:	f001 fbd0 	bl	80157bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	3324      	adds	r3, #36	@ 0x24
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	68b9      	ldr	r1, [r7, #8]
 801402c:	4618      	mov	r0, r3
 801402e:	f000 fc37 	bl	80148a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014032:	6978      	ldr	r0, [r7, #20]
 8014034:	f7ff ff26 	bl	8013e84 <prvUnlockQueue>
	}
 8014038:	bf00      	nop
 801403a:	3718      	adds	r7, #24
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014040:	b580      	push	{r7, lr}
 8014042:	b08e      	sub	sp, #56	@ 0x38
 8014044:	af04      	add	r7, sp, #16
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10b      	bne.n	801406c <xTaskCreateStatic+0x2c>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	623b      	str	r3, [r7, #32]
}
 8014066:	bf00      	nop
 8014068:	bf00      	nop
 801406a:	e7fd      	b.n	8014068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801406e:	2b00      	cmp	r3, #0
 8014070:	d10b      	bne.n	801408a <xTaskCreateStatic+0x4a>
	__asm volatile
 8014072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	61fb      	str	r3, [r7, #28]
}
 8014084:	bf00      	nop
 8014086:	bf00      	nop
 8014088:	e7fd      	b.n	8014086 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801408a:	23a8      	movs	r3, #168	@ 0xa8
 801408c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	2ba8      	cmp	r3, #168	@ 0xa8
 8014092:	d00b      	beq.n	80140ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8014094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014098:	f383 8811 	msr	BASEPRI, r3
 801409c:	f3bf 8f6f 	isb	sy
 80140a0:	f3bf 8f4f 	dsb	sy
 80140a4:	61bb      	str	r3, [r7, #24]
}
 80140a6:	bf00      	nop
 80140a8:	bf00      	nop
 80140aa:	e7fd      	b.n	80140a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80140ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80140ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d01e      	beq.n	80140f2 <xTaskCreateStatic+0xb2>
 80140b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d01b      	beq.n	80140f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80140ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80140be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80140c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c6:	2202      	movs	r2, #2
 80140c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80140cc:	2300      	movs	r3, #0
 80140ce:	9303      	str	r3, [sp, #12]
 80140d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d2:	9302      	str	r3, [sp, #8]
 80140d4:	f107 0314 	add.w	r3, r7, #20
 80140d8:	9301      	str	r3, [sp, #4]
 80140da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140dc:	9300      	str	r3, [sp, #0]
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	68b9      	ldr	r1, [r7, #8]
 80140e4:	68f8      	ldr	r0, [r7, #12]
 80140e6:	f000 f851 	bl	801418c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140ec:	f000 f8f6 	bl	80142dc <prvAddNewTaskToReadyList>
 80140f0:	e001      	b.n	80140f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80140f2:	2300      	movs	r3, #0
 80140f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80140f6:	697b      	ldr	r3, [r7, #20]
	}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3728      	adds	r7, #40	@ 0x28
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014100:	b580      	push	{r7, lr}
 8014102:	b08c      	sub	sp, #48	@ 0x30
 8014104:	af04      	add	r7, sp, #16
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	603b      	str	r3, [r7, #0]
 801410c:	4613      	mov	r3, r2
 801410e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014110:	88fb      	ldrh	r3, [r7, #6]
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4618      	mov	r0, r3
 8014116:	f001 fc41 	bl	801599c <pvPortMalloc>
 801411a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00e      	beq.n	8014140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014122:	20a8      	movs	r0, #168	@ 0xa8
 8014124:	f001 fc3a 	bl	801599c <pvPortMalloc>
 8014128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d003      	beq.n	8014138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	697a      	ldr	r2, [r7, #20]
 8014134:	631a      	str	r2, [r3, #48]	@ 0x30
 8014136:	e005      	b.n	8014144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014138:	6978      	ldr	r0, [r7, #20]
 801413a:	f001 fcfd 	bl	8015b38 <vPortFree>
 801413e:	e001      	b.n	8014144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014140:	2300      	movs	r3, #0
 8014142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d017      	beq.n	801417a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	2200      	movs	r2, #0
 801414e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014152:	88fa      	ldrh	r2, [r7, #6]
 8014154:	2300      	movs	r3, #0
 8014156:	9303      	str	r3, [sp, #12]
 8014158:	69fb      	ldr	r3, [r7, #28]
 801415a:	9302      	str	r3, [sp, #8]
 801415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801415e:	9301      	str	r3, [sp, #4]
 8014160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	68b9      	ldr	r1, [r7, #8]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f000 f80f 	bl	801418c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801416e:	69f8      	ldr	r0, [r7, #28]
 8014170:	f000 f8b4 	bl	80142dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014174:	2301      	movs	r3, #1
 8014176:	61bb      	str	r3, [r7, #24]
 8014178:	e002      	b.n	8014180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801417a:	f04f 33ff 	mov.w	r3, #4294967295
 801417e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014180:	69bb      	ldr	r3, [r7, #24]
	}
 8014182:	4618      	mov	r0, r3
 8014184:	3720      	adds	r7, #32
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b088      	sub	sp, #32
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	607a      	str	r2, [r7, #4]
 8014198:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	461a      	mov	r2, r3
 80141a4:	21a5      	movs	r1, #165	@ 0xa5
 80141a6:	f003 ff67 	bl	8018078 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80141aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80141ae:	6879      	ldr	r1, [r7, #4]
 80141b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80141b4:	440b      	add	r3, r1
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	4413      	add	r3, r2
 80141ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80141bc:	69bb      	ldr	r3, [r7, #24]
 80141be:	f023 0307 	bic.w	r3, r3, #7
 80141c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	f003 0307 	and.w	r3, r3, #7
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d00b      	beq.n	80141e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80141ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d2:	f383 8811 	msr	BASEPRI, r3
 80141d6:	f3bf 8f6f 	isb	sy
 80141da:	f3bf 8f4f 	dsb	sy
 80141de:	617b      	str	r3, [r7, #20]
}
 80141e0:	bf00      	nop
 80141e2:	bf00      	nop
 80141e4:	e7fd      	b.n	80141e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d01f      	beq.n	801422c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80141ec:	2300      	movs	r3, #0
 80141ee:	61fb      	str	r3, [r7, #28]
 80141f0:	e012      	b.n	8014218 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	4413      	add	r3, r2
 80141f8:	7819      	ldrb	r1, [r3, #0]
 80141fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	4413      	add	r3, r2
 8014200:	3334      	adds	r3, #52	@ 0x34
 8014202:	460a      	mov	r2, r1
 8014204:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014206:	68ba      	ldr	r2, [r7, #8]
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	4413      	add	r3, r2
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d006      	beq.n	8014220 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	3301      	adds	r3, #1
 8014216:	61fb      	str	r3, [r7, #28]
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	2b0f      	cmp	r3, #15
 801421c:	d9e9      	bls.n	80141f2 <prvInitialiseNewTask+0x66>
 801421e:	e000      	b.n	8014222 <prvInitialiseNewTask+0x96>
			{
				break;
 8014220:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014224:	2200      	movs	r2, #0
 8014226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801422a:	e003      	b.n	8014234 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422e:	2200      	movs	r2, #0
 8014230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014236:	2b37      	cmp	r3, #55	@ 0x37
 8014238:	d901      	bls.n	801423e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801423a:	2337      	movs	r3, #55	@ 0x37
 801423c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014242:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014248:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801424c:	2200      	movs	r2, #0
 801424e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014252:	3304      	adds	r3, #4
 8014254:	4618      	mov	r0, r3
 8014256:	f7ff f965 	bl	8013524 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801425c:	3318      	adds	r3, #24
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff f960 	bl	8013524 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801426c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014278:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801427c:	2200      	movs	r2, #0
 801427e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014284:	2200      	movs	r2, #0
 8014286:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801428c:	3354      	adds	r3, #84	@ 0x54
 801428e:	224c      	movs	r2, #76	@ 0x4c
 8014290:	2100      	movs	r1, #0
 8014292:	4618      	mov	r0, r3
 8014294:	f003 fef0 	bl	8018078 <memset>
 8014298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801429a:	4a0d      	ldr	r2, [pc, #52]	@ (80142d0 <prvInitialiseNewTask+0x144>)
 801429c:	659a      	str	r2, [r3, #88]	@ 0x58
 801429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a0:	4a0c      	ldr	r2, [pc, #48]	@ (80142d4 <prvInitialiseNewTask+0x148>)
 80142a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80142a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142a6:	4a0c      	ldr	r2, [pc, #48]	@ (80142d8 <prvInitialiseNewTask+0x14c>)
 80142a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80142aa:	683a      	ldr	r2, [r7, #0]
 80142ac:	68f9      	ldr	r1, [r7, #12]
 80142ae:	69b8      	ldr	r0, [r7, #24]
 80142b0:	f001 f924 	bl	80154fc <pxPortInitialiseStack>
 80142b4:	4602      	mov	r2, r0
 80142b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80142ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d002      	beq.n	80142c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80142c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142c6:	bf00      	nop
 80142c8:	3720      	adds	r7, #32
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	2407758c 	.word	0x2407758c
 80142d4:	240775f4 	.word	0x240775f4
 80142d8:	2407765c 	.word	0x2407765c

080142dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80142e4:	f001 fa38 	bl	8015758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80142e8:	4b2d      	ldr	r3, [pc, #180]	@ (80143a0 <prvAddNewTaskToReadyList+0xc4>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	3301      	adds	r3, #1
 80142ee:	4a2c      	ldr	r2, [pc, #176]	@ (80143a0 <prvAddNewTaskToReadyList+0xc4>)
 80142f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80142f2:	4b2c      	ldr	r3, [pc, #176]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d109      	bne.n	801430e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80142fa:	4a2a      	ldr	r2, [pc, #168]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014300:	4b27      	ldr	r3, [pc, #156]	@ (80143a0 <prvAddNewTaskToReadyList+0xc4>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	2b01      	cmp	r3, #1
 8014306:	d110      	bne.n	801432a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014308:	f000 fbf8 	bl	8014afc <prvInitialiseTaskLists>
 801430c:	e00d      	b.n	801432a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801430e:	4b26      	ldr	r3, [pc, #152]	@ (80143a8 <prvAddNewTaskToReadyList+0xcc>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d109      	bne.n	801432a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014316:	4b23      	ldr	r3, [pc, #140]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014320:	429a      	cmp	r2, r3
 8014322:	d802      	bhi.n	801432a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014324:	4a1f      	ldr	r2, [pc, #124]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801432a:	4b20      	ldr	r3, [pc, #128]	@ (80143ac <prvAddNewTaskToReadyList+0xd0>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	3301      	adds	r3, #1
 8014330:	4a1e      	ldr	r2, [pc, #120]	@ (80143ac <prvAddNewTaskToReadyList+0xd0>)
 8014332:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014334:	4b1d      	ldr	r3, [pc, #116]	@ (80143ac <prvAddNewTaskToReadyList+0xd0>)
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014340:	4b1b      	ldr	r3, [pc, #108]	@ (80143b0 <prvAddNewTaskToReadyList+0xd4>)
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	429a      	cmp	r2, r3
 8014346:	d903      	bls.n	8014350 <prvAddNewTaskToReadyList+0x74>
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434c:	4a18      	ldr	r2, [pc, #96]	@ (80143b0 <prvAddNewTaskToReadyList+0xd4>)
 801434e:	6013      	str	r3, [r2, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014354:	4613      	mov	r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	4413      	add	r3, r2
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	4a15      	ldr	r2, [pc, #84]	@ (80143b4 <prvAddNewTaskToReadyList+0xd8>)
 801435e:	441a      	add	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3304      	adds	r3, #4
 8014364:	4619      	mov	r1, r3
 8014366:	4610      	mov	r0, r2
 8014368:	f7ff f8e9 	bl	801353e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801436c:	f001 fa26 	bl	80157bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014370:	4b0d      	ldr	r3, [pc, #52]	@ (80143a8 <prvAddNewTaskToReadyList+0xcc>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d00e      	beq.n	8014396 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014378:	4b0a      	ldr	r3, [pc, #40]	@ (80143a4 <prvAddNewTaskToReadyList+0xc8>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014382:	429a      	cmp	r2, r3
 8014384:	d207      	bcs.n	8014396 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014386:	4b0c      	ldr	r3, [pc, #48]	@ (80143b8 <prvAddNewTaskToReadyList+0xdc>)
 8014388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801438c:	601a      	str	r2, [r3, #0]
 801438e:	f3bf 8f4f 	dsb	sy
 8014392:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014396:	bf00      	nop
 8014398:	3708      	adds	r7, #8
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	24071c24 	.word	0x24071c24
 80143a4:	24071750 	.word	0x24071750
 80143a8:	24071c30 	.word	0x24071c30
 80143ac:	24071c40 	.word	0x24071c40
 80143b0:	24071c2c 	.word	0x24071c2c
 80143b4:	24071754 	.word	0x24071754
 80143b8:	e000ed04 	.word	0xe000ed04

080143bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b08a      	sub	sp, #40	@ 0x28
 80143c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80143c2:	2300      	movs	r3, #0
 80143c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80143c6:	2300      	movs	r3, #0
 80143c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80143ca:	463a      	mov	r2, r7
 80143cc:	1d39      	adds	r1, r7, #4
 80143ce:	f107 0308 	add.w	r3, r7, #8
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7ff f852 	bl	801347c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80143d8:	6839      	ldr	r1, [r7, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68ba      	ldr	r2, [r7, #8]
 80143de:	9202      	str	r2, [sp, #8]
 80143e0:	9301      	str	r3, [sp, #4]
 80143e2:	2300      	movs	r3, #0
 80143e4:	9300      	str	r3, [sp, #0]
 80143e6:	2300      	movs	r3, #0
 80143e8:	460a      	mov	r2, r1
 80143ea:	4924      	ldr	r1, [pc, #144]	@ (801447c <vTaskStartScheduler+0xc0>)
 80143ec:	4824      	ldr	r0, [pc, #144]	@ (8014480 <vTaskStartScheduler+0xc4>)
 80143ee:	f7ff fe27 	bl	8014040 <xTaskCreateStatic>
 80143f2:	4603      	mov	r3, r0
 80143f4:	4a23      	ldr	r2, [pc, #140]	@ (8014484 <vTaskStartScheduler+0xc8>)
 80143f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80143f8:	4b22      	ldr	r3, [pc, #136]	@ (8014484 <vTaskStartScheduler+0xc8>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d002      	beq.n	8014406 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014400:	2301      	movs	r3, #1
 8014402:	617b      	str	r3, [r7, #20]
 8014404:	e001      	b.n	801440a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014406:	2300      	movs	r3, #0
 8014408:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	2b01      	cmp	r3, #1
 801440e:	d102      	bne.n	8014416 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014410:	f000 fd1a 	bl	8014e48 <xTimerCreateTimerTask>
 8014414:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	2b01      	cmp	r3, #1
 801441a:	d11b      	bne.n	8014454 <vTaskStartScheduler+0x98>
	__asm volatile
 801441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014420:	f383 8811 	msr	BASEPRI, r3
 8014424:	f3bf 8f6f 	isb	sy
 8014428:	f3bf 8f4f 	dsb	sy
 801442c:	613b      	str	r3, [r7, #16]
}
 801442e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014430:	4b15      	ldr	r3, [pc, #84]	@ (8014488 <vTaskStartScheduler+0xcc>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	3354      	adds	r3, #84	@ 0x54
 8014436:	4a15      	ldr	r2, [pc, #84]	@ (801448c <vTaskStartScheduler+0xd0>)
 8014438:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801443a:	4b15      	ldr	r3, [pc, #84]	@ (8014490 <vTaskStartScheduler+0xd4>)
 801443c:	f04f 32ff 	mov.w	r2, #4294967295
 8014440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014442:	4b14      	ldr	r3, [pc, #80]	@ (8014494 <vTaskStartScheduler+0xd8>)
 8014444:	2201      	movs	r2, #1
 8014446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014448:	4b13      	ldr	r3, [pc, #76]	@ (8014498 <vTaskStartScheduler+0xdc>)
 801444a:	2200      	movs	r2, #0
 801444c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801444e:	f001 f8df 	bl	8015610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014452:	e00f      	b.n	8014474 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	f1b3 3fff 	cmp.w	r3, #4294967295
 801445a:	d10b      	bne.n	8014474 <vTaskStartScheduler+0xb8>
	__asm volatile
 801445c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014460:	f383 8811 	msr	BASEPRI, r3
 8014464:	f3bf 8f6f 	isb	sy
 8014468:	f3bf 8f4f 	dsb	sy
 801446c:	60fb      	str	r3, [r7, #12]
}
 801446e:	bf00      	nop
 8014470:	bf00      	nop
 8014472:	e7fd      	b.n	8014470 <vTaskStartScheduler+0xb4>
}
 8014474:	bf00      	nop
 8014476:	3718      	adds	r7, #24
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	0801a83c 	.word	0x0801a83c
 8014480:	08014acd 	.word	0x08014acd
 8014484:	24071c48 	.word	0x24071c48
 8014488:	24071750 	.word	0x24071750
 801448c:	24000280 	.word	0x24000280
 8014490:	24071c44 	.word	0x24071c44
 8014494:	24071c30 	.word	0x24071c30
 8014498:	24071c28 	.word	0x24071c28

0801449c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801449c:	b480      	push	{r7}
 801449e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80144a0:	4b04      	ldr	r3, [pc, #16]	@ (80144b4 <vTaskSuspendAll+0x18>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	3301      	adds	r3, #1
 80144a6:	4a03      	ldr	r2, [pc, #12]	@ (80144b4 <vTaskSuspendAll+0x18>)
 80144a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80144aa:	bf00      	nop
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr
 80144b4:	24071c4c 	.word	0x24071c4c

080144b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80144be:	2300      	movs	r3, #0
 80144c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80144c2:	2300      	movs	r3, #0
 80144c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80144c6:	4b42      	ldr	r3, [pc, #264]	@ (80145d0 <xTaskResumeAll+0x118>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10b      	bne.n	80144e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80144ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	603b      	str	r3, [r7, #0]
}
 80144e0:	bf00      	nop
 80144e2:	bf00      	nop
 80144e4:	e7fd      	b.n	80144e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80144e6:	f001 f937 	bl	8015758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80144ea:	4b39      	ldr	r3, [pc, #228]	@ (80145d0 <xTaskResumeAll+0x118>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	3b01      	subs	r3, #1
 80144f0:	4a37      	ldr	r2, [pc, #220]	@ (80145d0 <xTaskResumeAll+0x118>)
 80144f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144f4:	4b36      	ldr	r3, [pc, #216]	@ (80145d0 <xTaskResumeAll+0x118>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d162      	bne.n	80145c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80144fc:	4b35      	ldr	r3, [pc, #212]	@ (80145d4 <xTaskResumeAll+0x11c>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d05e      	beq.n	80145c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014504:	e02f      	b.n	8014566 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014506:	4b34      	ldr	r3, [pc, #208]	@ (80145d8 <xTaskResumeAll+0x120>)
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	68db      	ldr	r3, [r3, #12]
 801450c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	3318      	adds	r3, #24
 8014512:	4618      	mov	r0, r3
 8014514:	f7ff f870 	bl	80135f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	3304      	adds	r3, #4
 801451c:	4618      	mov	r0, r3
 801451e:	f7ff f86b 	bl	80135f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014526:	4b2d      	ldr	r3, [pc, #180]	@ (80145dc <xTaskResumeAll+0x124>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	429a      	cmp	r2, r3
 801452c:	d903      	bls.n	8014536 <xTaskResumeAll+0x7e>
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014532:	4a2a      	ldr	r2, [pc, #168]	@ (80145dc <xTaskResumeAll+0x124>)
 8014534:	6013      	str	r3, [r2, #0]
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801453a:	4613      	mov	r3, r2
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	4413      	add	r3, r2
 8014540:	009b      	lsls	r3, r3, #2
 8014542:	4a27      	ldr	r2, [pc, #156]	@ (80145e0 <xTaskResumeAll+0x128>)
 8014544:	441a      	add	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	3304      	adds	r3, #4
 801454a:	4619      	mov	r1, r3
 801454c:	4610      	mov	r0, r2
 801454e:	f7fe fff6 	bl	801353e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014556:	4b23      	ldr	r3, [pc, #140]	@ (80145e4 <xTaskResumeAll+0x12c>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801455c:	429a      	cmp	r2, r3
 801455e:	d302      	bcc.n	8014566 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8014560:	4b21      	ldr	r3, [pc, #132]	@ (80145e8 <xTaskResumeAll+0x130>)
 8014562:	2201      	movs	r2, #1
 8014564:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014566:	4b1c      	ldr	r3, [pc, #112]	@ (80145d8 <xTaskResumeAll+0x120>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d1cb      	bne.n	8014506 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d001      	beq.n	8014578 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014574:	f000 fb66 	bl	8014c44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014578:	4b1c      	ldr	r3, [pc, #112]	@ (80145ec <xTaskResumeAll+0x134>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d010      	beq.n	80145a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014584:	f000 f846 	bl	8014614 <xTaskIncrementTick>
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d002      	beq.n	8014594 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801458e:	4b16      	ldr	r3, [pc, #88]	@ (80145e8 <xTaskResumeAll+0x130>)
 8014590:	2201      	movs	r2, #1
 8014592:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	3b01      	subs	r3, #1
 8014598:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d1f1      	bne.n	8014584 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80145a0:	4b12      	ldr	r3, [pc, #72]	@ (80145ec <xTaskResumeAll+0x134>)
 80145a2:	2200      	movs	r2, #0
 80145a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80145a6:	4b10      	ldr	r3, [pc, #64]	@ (80145e8 <xTaskResumeAll+0x130>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d009      	beq.n	80145c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80145ae:	2301      	movs	r3, #1
 80145b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80145b2:	4b0f      	ldr	r3, [pc, #60]	@ (80145f0 <xTaskResumeAll+0x138>)
 80145b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145b8:	601a      	str	r2, [r3, #0]
 80145ba:	f3bf 8f4f 	dsb	sy
 80145be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80145c2:	f001 f8fb 	bl	80157bc <vPortExitCritical>

	return xAlreadyYielded;
 80145c6:	68bb      	ldr	r3, [r7, #8]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3710      	adds	r7, #16
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	24071c4c 	.word	0x24071c4c
 80145d4:	24071c24 	.word	0x24071c24
 80145d8:	24071be4 	.word	0x24071be4
 80145dc:	24071c2c 	.word	0x24071c2c
 80145e0:	24071754 	.word	0x24071754
 80145e4:	24071750 	.word	0x24071750
 80145e8:	24071c38 	.word	0x24071c38
 80145ec:	24071c34 	.word	0x24071c34
 80145f0:	e000ed04 	.word	0xe000ed04

080145f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80145fa:	4b05      	ldr	r3, [pc, #20]	@ (8014610 <xTaskGetTickCount+0x1c>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014600:	687b      	ldr	r3, [r7, #4]
}
 8014602:	4618      	mov	r0, r3
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop
 8014610:	24071c28 	.word	0x24071c28

08014614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b086      	sub	sp, #24
 8014618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801461a:	2300      	movs	r3, #0
 801461c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801461e:	4b4f      	ldr	r3, [pc, #316]	@ (801475c <xTaskIncrementTick+0x148>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	f040 8090 	bne.w	8014748 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014628:	4b4d      	ldr	r3, [pc, #308]	@ (8014760 <xTaskIncrementTick+0x14c>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	3301      	adds	r3, #1
 801462e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014630:	4a4b      	ldr	r2, [pc, #300]	@ (8014760 <xTaskIncrementTick+0x14c>)
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d121      	bne.n	8014680 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801463c:	4b49      	ldr	r3, [pc, #292]	@ (8014764 <xTaskIncrementTick+0x150>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d00b      	beq.n	801465e <xTaskIncrementTick+0x4a>
	__asm volatile
 8014646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801464a:	f383 8811 	msr	BASEPRI, r3
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	f3bf 8f4f 	dsb	sy
 8014656:	603b      	str	r3, [r7, #0]
}
 8014658:	bf00      	nop
 801465a:	bf00      	nop
 801465c:	e7fd      	b.n	801465a <xTaskIncrementTick+0x46>
 801465e:	4b41      	ldr	r3, [pc, #260]	@ (8014764 <xTaskIncrementTick+0x150>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	60fb      	str	r3, [r7, #12]
 8014664:	4b40      	ldr	r3, [pc, #256]	@ (8014768 <xTaskIncrementTick+0x154>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4a3e      	ldr	r2, [pc, #248]	@ (8014764 <xTaskIncrementTick+0x150>)
 801466a:	6013      	str	r3, [r2, #0]
 801466c:	4a3e      	ldr	r2, [pc, #248]	@ (8014768 <xTaskIncrementTick+0x154>)
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	6013      	str	r3, [r2, #0]
 8014672:	4b3e      	ldr	r3, [pc, #248]	@ (801476c <xTaskIncrementTick+0x158>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	3301      	adds	r3, #1
 8014678:	4a3c      	ldr	r2, [pc, #240]	@ (801476c <xTaskIncrementTick+0x158>)
 801467a:	6013      	str	r3, [r2, #0]
 801467c:	f000 fae2 	bl	8014c44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014680:	4b3b      	ldr	r3, [pc, #236]	@ (8014770 <xTaskIncrementTick+0x15c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	693a      	ldr	r2, [r7, #16]
 8014686:	429a      	cmp	r2, r3
 8014688:	d349      	bcc.n	801471e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801468a:	4b36      	ldr	r3, [pc, #216]	@ (8014764 <xTaskIncrementTick+0x150>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d104      	bne.n	801469e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014694:	4b36      	ldr	r3, [pc, #216]	@ (8014770 <xTaskIncrementTick+0x15c>)
 8014696:	f04f 32ff 	mov.w	r2, #4294967295
 801469a:	601a      	str	r2, [r3, #0]
					break;
 801469c:	e03f      	b.n	801471e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801469e:	4b31      	ldr	r3, [pc, #196]	@ (8014764 <xTaskIncrementTick+0x150>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	68db      	ldr	r3, [r3, #12]
 80146a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80146ae:	693a      	ldr	r2, [r7, #16]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d203      	bcs.n	80146be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80146b6:	4a2e      	ldr	r2, [pc, #184]	@ (8014770 <xTaskIncrementTick+0x15c>)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80146bc:	e02f      	b.n	801471e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	3304      	adds	r3, #4
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7fe ff98 	bl	80135f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d004      	beq.n	80146da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	3318      	adds	r3, #24
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7fe ff8f 	bl	80135f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146de:	4b25      	ldr	r3, [pc, #148]	@ (8014774 <xTaskIncrementTick+0x160>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d903      	bls.n	80146ee <xTaskIncrementTick+0xda>
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ea:	4a22      	ldr	r2, [pc, #136]	@ (8014774 <xTaskIncrementTick+0x160>)
 80146ec:	6013      	str	r3, [r2, #0]
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146f2:	4613      	mov	r3, r2
 80146f4:	009b      	lsls	r3, r3, #2
 80146f6:	4413      	add	r3, r2
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	4a1f      	ldr	r2, [pc, #124]	@ (8014778 <xTaskIncrementTick+0x164>)
 80146fc:	441a      	add	r2, r3
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	3304      	adds	r3, #4
 8014702:	4619      	mov	r1, r3
 8014704:	4610      	mov	r0, r2
 8014706:	f7fe ff1a 	bl	801353e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801470e:	4b1b      	ldr	r3, [pc, #108]	@ (801477c <xTaskIncrementTick+0x168>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014714:	429a      	cmp	r2, r3
 8014716:	d3b8      	bcc.n	801468a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8014718:	2301      	movs	r3, #1
 801471a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801471c:	e7b5      	b.n	801468a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801471e:	4b17      	ldr	r3, [pc, #92]	@ (801477c <xTaskIncrementTick+0x168>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014724:	4914      	ldr	r1, [pc, #80]	@ (8014778 <xTaskIncrementTick+0x164>)
 8014726:	4613      	mov	r3, r2
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4413      	add	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	440b      	add	r3, r1
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b01      	cmp	r3, #1
 8014734:	d901      	bls.n	801473a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8014736:	2301      	movs	r3, #1
 8014738:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801473a:	4b11      	ldr	r3, [pc, #68]	@ (8014780 <xTaskIncrementTick+0x16c>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d007      	beq.n	8014752 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8014742:	2301      	movs	r3, #1
 8014744:	617b      	str	r3, [r7, #20]
 8014746:	e004      	b.n	8014752 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014748:	4b0e      	ldr	r3, [pc, #56]	@ (8014784 <xTaskIncrementTick+0x170>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	3301      	adds	r3, #1
 801474e:	4a0d      	ldr	r2, [pc, #52]	@ (8014784 <xTaskIncrementTick+0x170>)
 8014750:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014752:	697b      	ldr	r3, [r7, #20]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3718      	adds	r7, #24
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	24071c4c 	.word	0x24071c4c
 8014760:	24071c28 	.word	0x24071c28
 8014764:	24071bdc 	.word	0x24071bdc
 8014768:	24071be0 	.word	0x24071be0
 801476c:	24071c3c 	.word	0x24071c3c
 8014770:	24071c44 	.word	0x24071c44
 8014774:	24071c2c 	.word	0x24071c2c
 8014778:	24071754 	.word	0x24071754
 801477c:	24071750 	.word	0x24071750
 8014780:	24071c38 	.word	0x24071c38
 8014784:	24071c34 	.word	0x24071c34

08014788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014788:	b480      	push	{r7}
 801478a:	b085      	sub	sp, #20
 801478c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801478e:	4b2b      	ldr	r3, [pc, #172]	@ (801483c <vTaskSwitchContext+0xb4>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d003      	beq.n	801479e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014796:	4b2a      	ldr	r3, [pc, #168]	@ (8014840 <vTaskSwitchContext+0xb8>)
 8014798:	2201      	movs	r2, #1
 801479a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801479c:	e047      	b.n	801482e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801479e:	4b28      	ldr	r3, [pc, #160]	@ (8014840 <vTaskSwitchContext+0xb8>)
 80147a0:	2200      	movs	r2, #0
 80147a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147a4:	4b27      	ldr	r3, [pc, #156]	@ (8014844 <vTaskSwitchContext+0xbc>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	60fb      	str	r3, [r7, #12]
 80147aa:	e011      	b.n	80147d0 <vTaskSwitchContext+0x48>
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d10b      	bne.n	80147ca <vTaskSwitchContext+0x42>
	__asm volatile
 80147b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147b6:	f383 8811 	msr	BASEPRI, r3
 80147ba:	f3bf 8f6f 	isb	sy
 80147be:	f3bf 8f4f 	dsb	sy
 80147c2:	607b      	str	r3, [r7, #4]
}
 80147c4:	bf00      	nop
 80147c6:	bf00      	nop
 80147c8:	e7fd      	b.n	80147c6 <vTaskSwitchContext+0x3e>
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	3b01      	subs	r3, #1
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	491d      	ldr	r1, [pc, #116]	@ (8014848 <vTaskSwitchContext+0xc0>)
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	4613      	mov	r3, r2
 80147d6:	009b      	lsls	r3, r3, #2
 80147d8:	4413      	add	r3, r2
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	440b      	add	r3, r1
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d0e3      	beq.n	80147ac <vTaskSwitchContext+0x24>
 80147e4:	68fa      	ldr	r2, [r7, #12]
 80147e6:	4613      	mov	r3, r2
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	4413      	add	r3, r2
 80147ec:	009b      	lsls	r3, r3, #2
 80147ee:	4a16      	ldr	r2, [pc, #88]	@ (8014848 <vTaskSwitchContext+0xc0>)
 80147f0:	4413      	add	r3, r2
 80147f2:	60bb      	str	r3, [r7, #8]
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	685a      	ldr	r2, [r3, #4]
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	605a      	str	r2, [r3, #4]
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	685a      	ldr	r2, [r3, #4]
 8014802:	68bb      	ldr	r3, [r7, #8]
 8014804:	3308      	adds	r3, #8
 8014806:	429a      	cmp	r2, r3
 8014808:	d104      	bne.n	8014814 <vTaskSwitchContext+0x8c>
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	685a      	ldr	r2, [r3, #4]
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	605a      	str	r2, [r3, #4]
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	685b      	ldr	r3, [r3, #4]
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	4a0c      	ldr	r2, [pc, #48]	@ (801484c <vTaskSwitchContext+0xc4>)
 801481c:	6013      	str	r3, [r2, #0]
 801481e:	4a09      	ldr	r2, [pc, #36]	@ (8014844 <vTaskSwitchContext+0xbc>)
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014824:	4b09      	ldr	r3, [pc, #36]	@ (801484c <vTaskSwitchContext+0xc4>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	3354      	adds	r3, #84	@ 0x54
 801482a:	4a09      	ldr	r2, [pc, #36]	@ (8014850 <vTaskSwitchContext+0xc8>)
 801482c:	6013      	str	r3, [r2, #0]
}
 801482e:	bf00      	nop
 8014830:	3714      	adds	r7, #20
 8014832:	46bd      	mov	sp, r7
 8014834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014838:	4770      	bx	lr
 801483a:	bf00      	nop
 801483c:	24071c4c 	.word	0x24071c4c
 8014840:	24071c38 	.word	0x24071c38
 8014844:	24071c2c 	.word	0x24071c2c
 8014848:	24071754 	.word	0x24071754
 801484c:	24071750 	.word	0x24071750
 8014850:	24000280 	.word	0x24000280

08014854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b084      	sub	sp, #16
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d10b      	bne.n	801487c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8014864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014868:	f383 8811 	msr	BASEPRI, r3
 801486c:	f3bf 8f6f 	isb	sy
 8014870:	f3bf 8f4f 	dsb	sy
 8014874:	60fb      	str	r3, [r7, #12]
}
 8014876:	bf00      	nop
 8014878:	bf00      	nop
 801487a:	e7fd      	b.n	8014878 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801487c:	4b07      	ldr	r3, [pc, #28]	@ (801489c <vTaskPlaceOnEventList+0x48>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	3318      	adds	r3, #24
 8014882:	4619      	mov	r1, r3
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7fe fe7e 	bl	8013586 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801488a:	2101      	movs	r1, #1
 801488c:	6838      	ldr	r0, [r7, #0]
 801488e:	f000 fa87 	bl	8014da0 <prvAddCurrentTaskToDelayedList>
}
 8014892:	bf00      	nop
 8014894:	3710      	adds	r7, #16
 8014896:	46bd      	mov	sp, r7
 8014898:	bd80      	pop	{r7, pc}
 801489a:	bf00      	nop
 801489c:	24071750 	.word	0x24071750

080148a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	60b9      	str	r1, [r7, #8]
 80148aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10b      	bne.n	80148ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80148b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148b6:	f383 8811 	msr	BASEPRI, r3
 80148ba:	f3bf 8f6f 	isb	sy
 80148be:	f3bf 8f4f 	dsb	sy
 80148c2:	617b      	str	r3, [r7, #20]
}
 80148c4:	bf00      	nop
 80148c6:	bf00      	nop
 80148c8:	e7fd      	b.n	80148c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148ca:	4b0a      	ldr	r3, [pc, #40]	@ (80148f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	3318      	adds	r3, #24
 80148d0:	4619      	mov	r1, r3
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f7fe fe33 	bl	801353e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d002      	beq.n	80148e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80148de:	f04f 33ff 	mov.w	r3, #4294967295
 80148e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80148e4:	6879      	ldr	r1, [r7, #4]
 80148e6:	68b8      	ldr	r0, [r7, #8]
 80148e8:	f000 fa5a 	bl	8014da0 <prvAddCurrentTaskToDelayedList>
	}
 80148ec:	bf00      	nop
 80148ee:	3718      	adds	r7, #24
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	24071750 	.word	0x24071750

080148f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b086      	sub	sp, #24
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	68db      	ldr	r3, [r3, #12]
 8014904:	68db      	ldr	r3, [r3, #12]
 8014906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d10b      	bne.n	8014926 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014912:	f383 8811 	msr	BASEPRI, r3
 8014916:	f3bf 8f6f 	isb	sy
 801491a:	f3bf 8f4f 	dsb	sy
 801491e:	60fb      	str	r3, [r7, #12]
}
 8014920:	bf00      	nop
 8014922:	bf00      	nop
 8014924:	e7fd      	b.n	8014922 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	3318      	adds	r3, #24
 801492a:	4618      	mov	r0, r3
 801492c:	f7fe fe64 	bl	80135f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014930:	4b1d      	ldr	r3, [pc, #116]	@ (80149a8 <xTaskRemoveFromEventList+0xb0>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d11d      	bne.n	8014974 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	3304      	adds	r3, #4
 801493c:	4618      	mov	r0, r3
 801493e:	f7fe fe5b 	bl	80135f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014946:	4b19      	ldr	r3, [pc, #100]	@ (80149ac <xTaskRemoveFromEventList+0xb4>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	429a      	cmp	r2, r3
 801494c:	d903      	bls.n	8014956 <xTaskRemoveFromEventList+0x5e>
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014952:	4a16      	ldr	r2, [pc, #88]	@ (80149ac <xTaskRemoveFromEventList+0xb4>)
 8014954:	6013      	str	r3, [r2, #0]
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801495a:	4613      	mov	r3, r2
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	4413      	add	r3, r2
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	4a13      	ldr	r2, [pc, #76]	@ (80149b0 <xTaskRemoveFromEventList+0xb8>)
 8014964:	441a      	add	r2, r3
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	3304      	adds	r3, #4
 801496a:	4619      	mov	r1, r3
 801496c:	4610      	mov	r0, r2
 801496e:	f7fe fde6 	bl	801353e <vListInsertEnd>
 8014972:	e005      	b.n	8014980 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	3318      	adds	r3, #24
 8014978:	4619      	mov	r1, r3
 801497a:	480e      	ldr	r0, [pc, #56]	@ (80149b4 <xTaskRemoveFromEventList+0xbc>)
 801497c:	f7fe fddf 	bl	801353e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014984:	4b0c      	ldr	r3, [pc, #48]	@ (80149b8 <xTaskRemoveFromEventList+0xc0>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801498a:	429a      	cmp	r2, r3
 801498c:	d905      	bls.n	801499a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801498e:	2301      	movs	r3, #1
 8014990:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014992:	4b0a      	ldr	r3, [pc, #40]	@ (80149bc <xTaskRemoveFromEventList+0xc4>)
 8014994:	2201      	movs	r2, #1
 8014996:	601a      	str	r2, [r3, #0]
 8014998:	e001      	b.n	801499e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801499a:	2300      	movs	r3, #0
 801499c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801499e:	697b      	ldr	r3, [r7, #20]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3718      	adds	r7, #24
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	24071c4c 	.word	0x24071c4c
 80149ac:	24071c2c 	.word	0x24071c2c
 80149b0:	24071754 	.word	0x24071754
 80149b4:	24071be4 	.word	0x24071be4
 80149b8:	24071750 	.word	0x24071750
 80149bc:	24071c38 	.word	0x24071c38

080149c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80149c8:	4b06      	ldr	r3, [pc, #24]	@ (80149e4 <vTaskInternalSetTimeOutState+0x24>)
 80149ca:	681a      	ldr	r2, [r3, #0]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80149d0:	4b05      	ldr	r3, [pc, #20]	@ (80149e8 <vTaskInternalSetTimeOutState+0x28>)
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	605a      	str	r2, [r3, #4]
}
 80149d8:	bf00      	nop
 80149da:	370c      	adds	r7, #12
 80149dc:	46bd      	mov	sp, r7
 80149de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e2:	4770      	bx	lr
 80149e4:	24071c3c 	.word	0x24071c3c
 80149e8:	24071c28 	.word	0x24071c28

080149ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b088      	sub	sp, #32
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d10b      	bne.n	8014a14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80149fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a00:	f383 8811 	msr	BASEPRI, r3
 8014a04:	f3bf 8f6f 	isb	sy
 8014a08:	f3bf 8f4f 	dsb	sy
 8014a0c:	613b      	str	r3, [r7, #16]
}
 8014a0e:	bf00      	nop
 8014a10:	bf00      	nop
 8014a12:	e7fd      	b.n	8014a10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d10b      	bne.n	8014a32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8014a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a1e:	f383 8811 	msr	BASEPRI, r3
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	f3bf 8f4f 	dsb	sy
 8014a2a:	60fb      	str	r3, [r7, #12]
}
 8014a2c:	bf00      	nop
 8014a2e:	bf00      	nop
 8014a30:	e7fd      	b.n	8014a2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014a32:	f000 fe91 	bl	8015758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a36:	4b1d      	ldr	r3, [pc, #116]	@ (8014aac <xTaskCheckForTimeOut+0xc0>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	69ba      	ldr	r2, [r7, #24]
 8014a42:	1ad3      	subs	r3, r2, r3
 8014a44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a4e:	d102      	bne.n	8014a56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a50:	2300      	movs	r3, #0
 8014a52:	61fb      	str	r3, [r7, #28]
 8014a54:	e023      	b.n	8014a9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	4b15      	ldr	r3, [pc, #84]	@ (8014ab0 <xTaskCheckForTimeOut+0xc4>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d007      	beq.n	8014a72 <xTaskCheckForTimeOut+0x86>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	69ba      	ldr	r2, [r7, #24]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d302      	bcc.n	8014a72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	61fb      	str	r3, [r7, #28]
 8014a70:	e015      	b.n	8014a9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	697a      	ldr	r2, [r7, #20]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d20b      	bcs.n	8014a94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	681a      	ldr	r2, [r3, #0]
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	1ad2      	subs	r2, r2, r3
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f7ff ff99 	bl	80149c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	61fb      	str	r3, [r7, #28]
 8014a92:	e004      	b.n	8014a9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	2200      	movs	r2, #0
 8014a98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014a9e:	f000 fe8d 	bl	80157bc <vPortExitCritical>

	return xReturn;
 8014aa2:	69fb      	ldr	r3, [r7, #28]
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3720      	adds	r7, #32
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	24071c28 	.word	0x24071c28
 8014ab0:	24071c3c 	.word	0x24071c3c

08014ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014ab8:	4b03      	ldr	r3, [pc, #12]	@ (8014ac8 <vTaskMissedYield+0x14>)
 8014aba:	2201      	movs	r2, #1
 8014abc:	601a      	str	r2, [r3, #0]
}
 8014abe:	bf00      	nop
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr
 8014ac8:	24071c38 	.word	0x24071c38

08014acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ad4:	f000 f852 	bl	8014b7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014ad8:	4b06      	ldr	r3, [pc, #24]	@ (8014af4 <prvIdleTask+0x28>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b01      	cmp	r3, #1
 8014ade:	d9f9      	bls.n	8014ad4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ae0:	4b05      	ldr	r3, [pc, #20]	@ (8014af8 <prvIdleTask+0x2c>)
 8014ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ae6:	601a      	str	r2, [r3, #0]
 8014ae8:	f3bf 8f4f 	dsb	sy
 8014aec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014af0:	e7f0      	b.n	8014ad4 <prvIdleTask+0x8>
 8014af2:	bf00      	nop
 8014af4:	24071754 	.word	0x24071754
 8014af8:	e000ed04 	.word	0xe000ed04

08014afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b02:	2300      	movs	r3, #0
 8014b04:	607b      	str	r3, [r7, #4]
 8014b06:	e00c      	b.n	8014b22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	4613      	mov	r3, r2
 8014b0c:	009b      	lsls	r3, r3, #2
 8014b0e:	4413      	add	r3, r2
 8014b10:	009b      	lsls	r3, r3, #2
 8014b12:	4a12      	ldr	r2, [pc, #72]	@ (8014b5c <prvInitialiseTaskLists+0x60>)
 8014b14:	4413      	add	r3, r2
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fe fce4 	bl	80134e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	3301      	adds	r3, #1
 8014b20:	607b      	str	r3, [r7, #4]
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2b37      	cmp	r3, #55	@ 0x37
 8014b26:	d9ef      	bls.n	8014b08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b28:	480d      	ldr	r0, [pc, #52]	@ (8014b60 <prvInitialiseTaskLists+0x64>)
 8014b2a:	f7fe fcdb 	bl	80134e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b2e:	480d      	ldr	r0, [pc, #52]	@ (8014b64 <prvInitialiseTaskLists+0x68>)
 8014b30:	f7fe fcd8 	bl	80134e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b34:	480c      	ldr	r0, [pc, #48]	@ (8014b68 <prvInitialiseTaskLists+0x6c>)
 8014b36:	f7fe fcd5 	bl	80134e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b3a:	480c      	ldr	r0, [pc, #48]	@ (8014b6c <prvInitialiseTaskLists+0x70>)
 8014b3c:	f7fe fcd2 	bl	80134e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b40:	480b      	ldr	r0, [pc, #44]	@ (8014b70 <prvInitialiseTaskLists+0x74>)
 8014b42:	f7fe fccf 	bl	80134e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b46:	4b0b      	ldr	r3, [pc, #44]	@ (8014b74 <prvInitialiseTaskLists+0x78>)
 8014b48:	4a05      	ldr	r2, [pc, #20]	@ (8014b60 <prvInitialiseTaskLists+0x64>)
 8014b4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8014b78 <prvInitialiseTaskLists+0x7c>)
 8014b4e:	4a05      	ldr	r2, [pc, #20]	@ (8014b64 <prvInitialiseTaskLists+0x68>)
 8014b50:	601a      	str	r2, [r3, #0]
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	24071754 	.word	0x24071754
 8014b60:	24071bb4 	.word	0x24071bb4
 8014b64:	24071bc8 	.word	0x24071bc8
 8014b68:	24071be4 	.word	0x24071be4
 8014b6c:	24071bf8 	.word	0x24071bf8
 8014b70:	24071c10 	.word	0x24071c10
 8014b74:	24071bdc 	.word	0x24071bdc
 8014b78:	24071be0 	.word	0x24071be0

08014b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b82:	e019      	b.n	8014bb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014b84:	f000 fde8 	bl	8015758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b88:	4b10      	ldr	r3, [pc, #64]	@ (8014bcc <prvCheckTasksWaitingTermination+0x50>)
 8014b8a:	68db      	ldr	r3, [r3, #12]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	3304      	adds	r3, #4
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7fe fd2f 	bl	80135f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8014bd0 <prvCheckTasksWaitingTermination+0x54>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	3b01      	subs	r3, #1
 8014ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8014bd0 <prvCheckTasksWaitingTermination+0x54>)
 8014ba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8014bd4 <prvCheckTasksWaitingTermination+0x58>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	4a0a      	ldr	r2, [pc, #40]	@ (8014bd4 <prvCheckTasksWaitingTermination+0x58>)
 8014bac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014bae:	f000 fe05 	bl	80157bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f000 f810 	bl	8014bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014bb8:	4b06      	ldr	r3, [pc, #24]	@ (8014bd4 <prvCheckTasksWaitingTermination+0x58>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d1e1      	bne.n	8014b84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014bc0:	bf00      	nop
 8014bc2:	bf00      	nop
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	24071bf8 	.word	0x24071bf8
 8014bd0:	24071c24 	.word	0x24071c24
 8014bd4:	24071c0c 	.word	0x24071c0c

08014bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3354      	adds	r3, #84	@ 0x54
 8014be4:	4618      	mov	r0, r3
 8014be6:	f003 fae9 	bl	80181bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d108      	bne.n	8014c06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f000 ff9d 	bl	8015b38 <vPortFree>
				vPortFree( pxTCB );
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 ff9a 	bl	8015b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014c04:	e019      	b.n	8014c3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d103      	bne.n	8014c18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f000 ff91 	bl	8015b38 <vPortFree>
	}
 8014c16:	e010      	b.n	8014c3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014c1e:	2b02      	cmp	r3, #2
 8014c20:	d00b      	beq.n	8014c3a <prvDeleteTCB+0x62>
	__asm volatile
 8014c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c26:	f383 8811 	msr	BASEPRI, r3
 8014c2a:	f3bf 8f6f 	isb	sy
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	60fb      	str	r3, [r7, #12]
}
 8014c34:	bf00      	nop
 8014c36:	bf00      	nop
 8014c38:	e7fd      	b.n	8014c36 <prvDeleteTCB+0x5e>
	}
 8014c3a:	bf00      	nop
 8014c3c:	3710      	adds	r7, #16
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
	...

08014c44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c44:	b480      	push	{r7}
 8014c46:	b083      	sub	sp, #12
 8014c48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8014c7c <prvResetNextTaskUnblockTime+0x38>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d104      	bne.n	8014c5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014c54:	4b0a      	ldr	r3, [pc, #40]	@ (8014c80 <prvResetNextTaskUnblockTime+0x3c>)
 8014c56:	f04f 32ff 	mov.w	r2, #4294967295
 8014c5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014c5c:	e008      	b.n	8014c70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c5e:	4b07      	ldr	r3, [pc, #28]	@ (8014c7c <prvResetNextTaskUnblockTime+0x38>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	4a04      	ldr	r2, [pc, #16]	@ (8014c80 <prvResetNextTaskUnblockTime+0x3c>)
 8014c6e:	6013      	str	r3, [r2, #0]
}
 8014c70:	bf00      	nop
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr
 8014c7c:	24071bdc 	.word	0x24071bdc
 8014c80:	24071c44 	.word	0x24071c44

08014c84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014c84:	b480      	push	{r7}
 8014c86:	b083      	sub	sp, #12
 8014c88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8014cb8 <xTaskGetSchedulerState+0x34>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d102      	bne.n	8014c98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014c92:	2301      	movs	r3, #1
 8014c94:	607b      	str	r3, [r7, #4]
 8014c96:	e008      	b.n	8014caa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c98:	4b08      	ldr	r3, [pc, #32]	@ (8014cbc <xTaskGetSchedulerState+0x38>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d102      	bne.n	8014ca6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014ca0:	2302      	movs	r3, #2
 8014ca2:	607b      	str	r3, [r7, #4]
 8014ca4:	e001      	b.n	8014caa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014caa:	687b      	ldr	r3, [r7, #4]
	}
 8014cac:	4618      	mov	r0, r3
 8014cae:	370c      	adds	r7, #12
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb6:	4770      	bx	lr
 8014cb8:	24071c30 	.word	0x24071c30
 8014cbc:	24071c4c 	.word	0x24071c4c

08014cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d058      	beq.n	8014d88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8014d94 <xTaskPriorityDisinherit+0xd4>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	693a      	ldr	r2, [r7, #16]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	d00b      	beq.n	8014cf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ce4:	f383 8811 	msr	BASEPRI, r3
 8014ce8:	f3bf 8f6f 	isb	sy
 8014cec:	f3bf 8f4f 	dsb	sy
 8014cf0:	60fb      	str	r3, [r7, #12]
}
 8014cf2:	bf00      	nop
 8014cf4:	bf00      	nop
 8014cf6:	e7fd      	b.n	8014cf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d10b      	bne.n	8014d18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	60bb      	str	r3, [r7, #8]
}
 8014d12:	bf00      	nop
 8014d14:	bf00      	nop
 8014d16:	e7fd      	b.n	8014d14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d1c:	1e5a      	subs	r2, r3, #1
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d02c      	beq.n	8014d88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d128      	bne.n	8014d88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	3304      	adds	r3, #4
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7fe fc5c 	bl	80135f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d58:	4b0f      	ldr	r3, [pc, #60]	@ (8014d98 <xTaskPriorityDisinherit+0xd8>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	429a      	cmp	r2, r3
 8014d5e:	d903      	bls.n	8014d68 <xTaskPriorityDisinherit+0xa8>
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d64:	4a0c      	ldr	r2, [pc, #48]	@ (8014d98 <xTaskPriorityDisinherit+0xd8>)
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	4413      	add	r3, r2
 8014d72:	009b      	lsls	r3, r3, #2
 8014d74:	4a09      	ldr	r2, [pc, #36]	@ (8014d9c <xTaskPriorityDisinherit+0xdc>)
 8014d76:	441a      	add	r2, r3
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	3304      	adds	r3, #4
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	4610      	mov	r0, r2
 8014d80:	f7fe fbdd 	bl	801353e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014d84:	2301      	movs	r3, #1
 8014d86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d88:	697b      	ldr	r3, [r7, #20]
	}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3718      	adds	r7, #24
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}
 8014d92:	bf00      	nop
 8014d94:	24071750 	.word	0x24071750
 8014d98:	24071c2c 	.word	0x24071c2c
 8014d9c:	24071754 	.word	0x24071754

08014da0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b084      	sub	sp, #16
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014daa:	4b21      	ldr	r3, [pc, #132]	@ (8014e30 <prvAddCurrentTaskToDelayedList+0x90>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014db0:	4b20      	ldr	r3, [pc, #128]	@ (8014e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	3304      	adds	r3, #4
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7fe fc1e 	bl	80135f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dc2:	d10a      	bne.n	8014dda <prvAddCurrentTaskToDelayedList+0x3a>
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d007      	beq.n	8014dda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dca:	4b1a      	ldr	r3, [pc, #104]	@ (8014e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	3304      	adds	r3, #4
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	4819      	ldr	r0, [pc, #100]	@ (8014e38 <prvAddCurrentTaskToDelayedList+0x98>)
 8014dd4:	f7fe fbb3 	bl	801353e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014dd8:	e026      	b.n	8014e28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014dda:	68fa      	ldr	r2, [r7, #12]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	4413      	add	r3, r2
 8014de0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014de2:	4b14      	ldr	r3, [pc, #80]	@ (8014e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014dea:	68ba      	ldr	r2, [r7, #8]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d209      	bcs.n	8014e06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014df2:	4b12      	ldr	r3, [pc, #72]	@ (8014e3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8014df4:	681a      	ldr	r2, [r3, #0]
 8014df6:	4b0f      	ldr	r3, [pc, #60]	@ (8014e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	3304      	adds	r3, #4
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	4610      	mov	r0, r2
 8014e00:	f7fe fbc1 	bl	8013586 <vListInsert>
}
 8014e04:	e010      	b.n	8014e28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e06:	4b0e      	ldr	r3, [pc, #56]	@ (8014e40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8014e34 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	3304      	adds	r3, #4
 8014e10:	4619      	mov	r1, r3
 8014e12:	4610      	mov	r0, r2
 8014e14:	f7fe fbb7 	bl	8013586 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014e18:	4b0a      	ldr	r3, [pc, #40]	@ (8014e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	68ba      	ldr	r2, [r7, #8]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d202      	bcs.n	8014e28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014e22:	4a08      	ldr	r2, [pc, #32]	@ (8014e44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	6013      	str	r3, [r2, #0]
}
 8014e28:	bf00      	nop
 8014e2a:	3710      	adds	r7, #16
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	24071c28 	.word	0x24071c28
 8014e34:	24071750 	.word	0x24071750
 8014e38:	24071c10 	.word	0x24071c10
 8014e3c:	24071be0 	.word	0x24071be0
 8014e40:	24071bdc 	.word	0x24071bdc
 8014e44:	24071c44 	.word	0x24071c44

08014e48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b08a      	sub	sp, #40	@ 0x28
 8014e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014e52:	f000 fb13 	bl	801547c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014e56:	4b1d      	ldr	r3, [pc, #116]	@ (8014ecc <xTimerCreateTimerTask+0x84>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d021      	beq.n	8014ea2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014e66:	1d3a      	adds	r2, r7, #4
 8014e68:	f107 0108 	add.w	r1, r7, #8
 8014e6c:	f107 030c 	add.w	r3, r7, #12
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7fe fb1d 	bl	80134b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014e76:	6879      	ldr	r1, [r7, #4]
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	68fa      	ldr	r2, [r7, #12]
 8014e7c:	9202      	str	r2, [sp, #8]
 8014e7e:	9301      	str	r3, [sp, #4]
 8014e80:	2302      	movs	r3, #2
 8014e82:	9300      	str	r3, [sp, #0]
 8014e84:	2300      	movs	r3, #0
 8014e86:	460a      	mov	r2, r1
 8014e88:	4911      	ldr	r1, [pc, #68]	@ (8014ed0 <xTimerCreateTimerTask+0x88>)
 8014e8a:	4812      	ldr	r0, [pc, #72]	@ (8014ed4 <xTimerCreateTimerTask+0x8c>)
 8014e8c:	f7ff f8d8 	bl	8014040 <xTaskCreateStatic>
 8014e90:	4603      	mov	r3, r0
 8014e92:	4a11      	ldr	r2, [pc, #68]	@ (8014ed8 <xTimerCreateTimerTask+0x90>)
 8014e94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014e96:	4b10      	ldr	r3, [pc, #64]	@ (8014ed8 <xTimerCreateTimerTask+0x90>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d001      	beq.n	8014ea2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d10b      	bne.n	8014ec0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8014ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eac:	f383 8811 	msr	BASEPRI, r3
 8014eb0:	f3bf 8f6f 	isb	sy
 8014eb4:	f3bf 8f4f 	dsb	sy
 8014eb8:	613b      	str	r3, [r7, #16]
}
 8014eba:	bf00      	nop
 8014ebc:	bf00      	nop
 8014ebe:	e7fd      	b.n	8014ebc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014ec0:	697b      	ldr	r3, [r7, #20]
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3718      	adds	r7, #24
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	24071c80 	.word	0x24071c80
 8014ed0:	0801a844 	.word	0x0801a844
 8014ed4:	08015015 	.word	0x08015015
 8014ed8:	24071c84 	.word	0x24071c84

08014edc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b08a      	sub	sp, #40	@ 0x28
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	607a      	str	r2, [r7, #4]
 8014ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014eea:	2300      	movs	r3, #0
 8014eec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d10b      	bne.n	8014f0c <xTimerGenericCommand+0x30>
	__asm volatile
 8014ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ef8:	f383 8811 	msr	BASEPRI, r3
 8014efc:	f3bf 8f6f 	isb	sy
 8014f00:	f3bf 8f4f 	dsb	sy
 8014f04:	623b      	str	r3, [r7, #32]
}
 8014f06:	bf00      	nop
 8014f08:	bf00      	nop
 8014f0a:	e7fd      	b.n	8014f08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014f0c:	4b19      	ldr	r3, [pc, #100]	@ (8014f74 <xTimerGenericCommand+0x98>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d02a      	beq.n	8014f6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	2b05      	cmp	r3, #5
 8014f24:	dc18      	bgt.n	8014f58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014f26:	f7ff fead 	bl	8014c84 <xTaskGetSchedulerState>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b02      	cmp	r3, #2
 8014f2e:	d109      	bne.n	8014f44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014f30:	4b10      	ldr	r3, [pc, #64]	@ (8014f74 <xTimerGenericCommand+0x98>)
 8014f32:	6818      	ldr	r0, [r3, #0]
 8014f34:	f107 0110 	add.w	r1, r7, #16
 8014f38:	2300      	movs	r3, #0
 8014f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f3c:	f7fe fc90 	bl	8013860 <xQueueGenericSend>
 8014f40:	6278      	str	r0, [r7, #36]	@ 0x24
 8014f42:	e012      	b.n	8014f6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014f44:	4b0b      	ldr	r3, [pc, #44]	@ (8014f74 <xTimerGenericCommand+0x98>)
 8014f46:	6818      	ldr	r0, [r3, #0]
 8014f48:	f107 0110 	add.w	r1, r7, #16
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	2200      	movs	r2, #0
 8014f50:	f7fe fc86 	bl	8013860 <xQueueGenericSend>
 8014f54:	6278      	str	r0, [r7, #36]	@ 0x24
 8014f56:	e008      	b.n	8014f6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014f58:	4b06      	ldr	r3, [pc, #24]	@ (8014f74 <xTimerGenericCommand+0x98>)
 8014f5a:	6818      	ldr	r0, [r3, #0]
 8014f5c:	f107 0110 	add.w	r1, r7, #16
 8014f60:	2300      	movs	r3, #0
 8014f62:	683a      	ldr	r2, [r7, #0]
 8014f64:	f7fe fd7e 	bl	8013a64 <xQueueGenericSendFromISR>
 8014f68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3728      	adds	r7, #40	@ 0x28
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	24071c80 	.word	0x24071c80

08014f78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b088      	sub	sp, #32
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f82:	4b23      	ldr	r3, [pc, #140]	@ (8015010 <prvProcessExpiredTimer+0x98>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	3304      	adds	r3, #4
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7fe fb31 	bl	80135f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014f9c:	f003 0304 	and.w	r3, r3, #4
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d023      	beq.n	8014fec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	699a      	ldr	r2, [r3, #24]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	18d1      	adds	r1, r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	683a      	ldr	r2, [r7, #0]
 8014fb0:	6978      	ldr	r0, [r7, #20]
 8014fb2:	f000 f8d5 	bl	8015160 <prvInsertTimerInActiveList>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d020      	beq.n	8014ffe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	9300      	str	r3, [sp, #0]
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	6978      	ldr	r0, [r7, #20]
 8014fc8:	f7ff ff88 	bl	8014edc <xTimerGenericCommand>
 8014fcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d114      	bne.n	8014ffe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8014fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	60fb      	str	r3, [r7, #12]
}
 8014fe6:	bf00      	nop
 8014fe8:	bf00      	nop
 8014fea:	e7fd      	b.n	8014fe8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014ff2:	f023 0301 	bic.w	r3, r3, #1
 8014ff6:	b2da      	uxtb	r2, r3
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	6a1b      	ldr	r3, [r3, #32]
 8015002:	6978      	ldr	r0, [r7, #20]
 8015004:	4798      	blx	r3
}
 8015006:	bf00      	nop
 8015008:	3718      	adds	r7, #24
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	24071c78 	.word	0x24071c78

08015014 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801501c:	f107 0308 	add.w	r3, r7, #8
 8015020:	4618      	mov	r0, r3
 8015022:	f000 f859 	bl	80150d8 <prvGetNextExpireTime>
 8015026:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	4619      	mov	r1, r3
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f000 f805 	bl	801503c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015032:	f000 f8d7 	bl	80151e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015036:	bf00      	nop
 8015038:	e7f0      	b.n	801501c <prvTimerTask+0x8>
	...

0801503c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015046:	f7ff fa29 	bl	801449c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801504a:	f107 0308 	add.w	r3, r7, #8
 801504e:	4618      	mov	r0, r3
 8015050:	f000 f866 	bl	8015120 <prvSampleTimeNow>
 8015054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d130      	bne.n	80150be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d10a      	bne.n	8015078 <prvProcessTimerOrBlockTask+0x3c>
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	429a      	cmp	r2, r3
 8015068:	d806      	bhi.n	8015078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801506a:	f7ff fa25 	bl	80144b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801506e:	68f9      	ldr	r1, [r7, #12]
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f7ff ff81 	bl	8014f78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015076:	e024      	b.n	80150c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d008      	beq.n	8015090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801507e:	4b13      	ldr	r3, [pc, #76]	@ (80150cc <prvProcessTimerOrBlockTask+0x90>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d101      	bne.n	801508c <prvProcessTimerOrBlockTask+0x50>
 8015088:	2301      	movs	r3, #1
 801508a:	e000      	b.n	801508e <prvProcessTimerOrBlockTask+0x52>
 801508c:	2300      	movs	r3, #0
 801508e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015090:	4b0f      	ldr	r3, [pc, #60]	@ (80150d0 <prvProcessTimerOrBlockTask+0x94>)
 8015092:	6818      	ldr	r0, [r3, #0]
 8015094:	687a      	ldr	r2, [r7, #4]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	683a      	ldr	r2, [r7, #0]
 801509c:	4619      	mov	r1, r3
 801509e:	f7fe ff9b 	bl	8013fd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80150a2:	f7ff fa09 	bl	80144b8 <xTaskResumeAll>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d10a      	bne.n	80150c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80150ac:	4b09      	ldr	r3, [pc, #36]	@ (80150d4 <prvProcessTimerOrBlockTask+0x98>)
 80150ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80150b2:	601a      	str	r2, [r3, #0]
 80150b4:	f3bf 8f4f 	dsb	sy
 80150b8:	f3bf 8f6f 	isb	sy
}
 80150bc:	e001      	b.n	80150c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80150be:	f7ff f9fb 	bl	80144b8 <xTaskResumeAll>
}
 80150c2:	bf00      	nop
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	24071c7c 	.word	0x24071c7c
 80150d0:	24071c80 	.word	0x24071c80
 80150d4:	e000ed04 	.word	0xe000ed04

080150d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80150d8:	b480      	push	{r7}
 80150da:	b085      	sub	sp, #20
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80150e0:	4b0e      	ldr	r3, [pc, #56]	@ (801511c <prvGetNextExpireTime+0x44>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d101      	bne.n	80150ee <prvGetNextExpireTime+0x16>
 80150ea:	2201      	movs	r2, #1
 80150ec:	e000      	b.n	80150f0 <prvGetNextExpireTime+0x18>
 80150ee:	2200      	movs	r2, #0
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d105      	bne.n	8015108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80150fc:	4b07      	ldr	r3, [pc, #28]	@ (801511c <prvGetNextExpireTime+0x44>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	68db      	ldr	r3, [r3, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	60fb      	str	r3, [r7, #12]
 8015106:	e001      	b.n	801510c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015108:	2300      	movs	r3, #0
 801510a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801510c:	68fb      	ldr	r3, [r7, #12]
}
 801510e:	4618      	mov	r0, r3
 8015110:	3714      	adds	r7, #20
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
 801511a:	bf00      	nop
 801511c:	24071c78 	.word	0x24071c78

08015120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015128:	f7ff fa64 	bl	80145f4 <xTaskGetTickCount>
 801512c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801512e:	4b0b      	ldr	r3, [pc, #44]	@ (801515c <prvSampleTimeNow+0x3c>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	68fa      	ldr	r2, [r7, #12]
 8015134:	429a      	cmp	r2, r3
 8015136:	d205      	bcs.n	8015144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015138:	f000 f93a 	bl	80153b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2201      	movs	r2, #1
 8015140:	601a      	str	r2, [r3, #0]
 8015142:	e002      	b.n	801514a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2200      	movs	r2, #0
 8015148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801514a:	4a04      	ldr	r2, [pc, #16]	@ (801515c <prvSampleTimeNow+0x3c>)
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015150:	68fb      	ldr	r3, [r7, #12]
}
 8015152:	4618      	mov	r0, r3
 8015154:	3710      	adds	r7, #16
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	24071c88 	.word	0x24071c88

08015160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b086      	sub	sp, #24
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	607a      	str	r2, [r7, #4]
 801516c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801516e:	2300      	movs	r3, #0
 8015170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	68ba      	ldr	r2, [r7, #8]
 8015176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801517e:	68ba      	ldr	r2, [r7, #8]
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	429a      	cmp	r2, r3
 8015184:	d812      	bhi.n	80151ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015186:	687a      	ldr	r2, [r7, #4]
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	1ad2      	subs	r2, r2, r3
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	699b      	ldr	r3, [r3, #24]
 8015190:	429a      	cmp	r2, r3
 8015192:	d302      	bcc.n	801519a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015194:	2301      	movs	r3, #1
 8015196:	617b      	str	r3, [r7, #20]
 8015198:	e01b      	b.n	80151d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801519a:	4b10      	ldr	r3, [pc, #64]	@ (80151dc <prvInsertTimerInActiveList+0x7c>)
 801519c:	681a      	ldr	r2, [r3, #0]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	3304      	adds	r3, #4
 80151a2:	4619      	mov	r1, r3
 80151a4:	4610      	mov	r0, r2
 80151a6:	f7fe f9ee 	bl	8013586 <vListInsert>
 80151aa:	e012      	b.n	80151d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d206      	bcs.n	80151c2 <prvInsertTimerInActiveList+0x62>
 80151b4:	68ba      	ldr	r2, [r7, #8]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d302      	bcc.n	80151c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80151bc:	2301      	movs	r3, #1
 80151be:	617b      	str	r3, [r7, #20]
 80151c0:	e007      	b.n	80151d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80151c2:	4b07      	ldr	r3, [pc, #28]	@ (80151e0 <prvInsertTimerInActiveList+0x80>)
 80151c4:	681a      	ldr	r2, [r3, #0]
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	3304      	adds	r3, #4
 80151ca:	4619      	mov	r1, r3
 80151cc:	4610      	mov	r0, r2
 80151ce:	f7fe f9da 	bl	8013586 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80151d2:	697b      	ldr	r3, [r7, #20]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3718      	adds	r7, #24
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	24071c7c 	.word	0x24071c7c
 80151e0:	24071c78 	.word	0x24071c78

080151e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b08e      	sub	sp, #56	@ 0x38
 80151e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80151ea:	e0ce      	b.n	801538a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	da19      	bge.n	8015226 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80151f2:	1d3b      	adds	r3, r7, #4
 80151f4:	3304      	adds	r3, #4
 80151f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80151f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d10b      	bne.n	8015216 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80151fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015202:	f383 8811 	msr	BASEPRI, r3
 8015206:	f3bf 8f6f 	isb	sy
 801520a:	f3bf 8f4f 	dsb	sy
 801520e:	61fb      	str	r3, [r7, #28]
}
 8015210:	bf00      	nop
 8015212:	bf00      	nop
 8015214:	e7fd      	b.n	8015212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801521c:	6850      	ldr	r0, [r2, #4]
 801521e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015220:	6892      	ldr	r2, [r2, #8]
 8015222:	4611      	mov	r1, r2
 8015224:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	2b00      	cmp	r3, #0
 801522a:	f2c0 80ae 	blt.w	801538a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015234:	695b      	ldr	r3, [r3, #20]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d004      	beq.n	8015244 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801523c:	3304      	adds	r3, #4
 801523e:	4618      	mov	r0, r3
 8015240:	f7fe f9da 	bl	80135f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015244:	463b      	mov	r3, r7
 8015246:	4618      	mov	r0, r3
 8015248:	f7ff ff6a 	bl	8015120 <prvSampleTimeNow>
 801524c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	2b09      	cmp	r3, #9
 8015252:	f200 8097 	bhi.w	8015384 <prvProcessReceivedCommands+0x1a0>
 8015256:	a201      	add	r2, pc, #4	@ (adr r2, 801525c <prvProcessReceivedCommands+0x78>)
 8015258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801525c:	08015285 	.word	0x08015285
 8015260:	08015285 	.word	0x08015285
 8015264:	08015285 	.word	0x08015285
 8015268:	080152fb 	.word	0x080152fb
 801526c:	0801530f 	.word	0x0801530f
 8015270:	0801535b 	.word	0x0801535b
 8015274:	08015285 	.word	0x08015285
 8015278:	08015285 	.word	0x08015285
 801527c:	080152fb 	.word	0x080152fb
 8015280:	0801530f 	.word	0x0801530f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801528a:	f043 0301 	orr.w	r3, r3, #1
 801528e:	b2da      	uxtb	r2, r3
 8015290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529a:	699b      	ldr	r3, [r3, #24]
 801529c:	18d1      	adds	r1, r2, r3
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80152a4:	f7ff ff5c 	bl	8015160 <prvInsertTimerInActiveList>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d06c      	beq.n	8015388 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80152ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152b0:	6a1b      	ldr	r3, [r3, #32]
 80152b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80152b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80152bc:	f003 0304 	and.w	r3, r3, #4
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d061      	beq.n	8015388 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80152c4:	68ba      	ldr	r2, [r7, #8]
 80152c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c8:	699b      	ldr	r3, [r3, #24]
 80152ca:	441a      	add	r2, r3
 80152cc:	2300      	movs	r3, #0
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	2300      	movs	r3, #0
 80152d2:	2100      	movs	r1, #0
 80152d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80152d6:	f7ff fe01 	bl	8014edc <xTimerGenericCommand>
 80152da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80152dc:	6a3b      	ldr	r3, [r7, #32]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d152      	bne.n	8015388 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80152e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152e6:	f383 8811 	msr	BASEPRI, r3
 80152ea:	f3bf 8f6f 	isb	sy
 80152ee:	f3bf 8f4f 	dsb	sy
 80152f2:	61bb      	str	r3, [r7, #24]
}
 80152f4:	bf00      	nop
 80152f6:	bf00      	nop
 80152f8:	e7fd      	b.n	80152f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80152fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015300:	f023 0301 	bic.w	r3, r3, #1
 8015304:	b2da      	uxtb	r2, r3
 8015306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015308:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801530c:	e03d      	b.n	801538a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015314:	f043 0301 	orr.w	r3, r3, #1
 8015318:	b2da      	uxtb	r2, r3
 801531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801531c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015324:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015328:	699b      	ldr	r3, [r3, #24]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d10b      	bne.n	8015346 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015332:	f383 8811 	msr	BASEPRI, r3
 8015336:	f3bf 8f6f 	isb	sy
 801533a:	f3bf 8f4f 	dsb	sy
 801533e:	617b      	str	r3, [r7, #20]
}
 8015340:	bf00      	nop
 8015342:	bf00      	nop
 8015344:	e7fd      	b.n	8015342 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015348:	699a      	ldr	r2, [r3, #24]
 801534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801534c:	18d1      	adds	r1, r2, r3
 801534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015354:	f7ff ff04 	bl	8015160 <prvInsertTimerInActiveList>
					break;
 8015358:	e017      	b.n	801538a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801535c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015360:	f003 0302 	and.w	r3, r3, #2
 8015364:	2b00      	cmp	r3, #0
 8015366:	d103      	bne.n	8015370 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801536a:	f000 fbe5 	bl	8015b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801536e:	e00c      	b.n	801538a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015376:	f023 0301 	bic.w	r3, r3, #1
 801537a:	b2da      	uxtb	r2, r3
 801537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801537e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015382:	e002      	b.n	801538a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015384:	bf00      	nop
 8015386:	e000      	b.n	801538a <prvProcessReceivedCommands+0x1a6>
					break;
 8015388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801538a:	4b08      	ldr	r3, [pc, #32]	@ (80153ac <prvProcessReceivedCommands+0x1c8>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	1d39      	adds	r1, r7, #4
 8015390:	2200      	movs	r2, #0
 8015392:	4618      	mov	r0, r3
 8015394:	f7fe fc04 	bl	8013ba0 <xQueueReceive>
 8015398:	4603      	mov	r3, r0
 801539a:	2b00      	cmp	r3, #0
 801539c:	f47f af26 	bne.w	80151ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80153a0:	bf00      	nop
 80153a2:	bf00      	nop
 80153a4:	3730      	adds	r7, #48	@ 0x30
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	24071c80 	.word	0x24071c80

080153b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b088      	sub	sp, #32
 80153b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80153b6:	e049      	b.n	801544c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80153b8:	4b2e      	ldr	r3, [pc, #184]	@ (8015474 <prvSwitchTimerLists+0xc4>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153c2:	4b2c      	ldr	r3, [pc, #176]	@ (8015474 <prvSwitchTimerLists+0xc4>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	3304      	adds	r3, #4
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7fe f911 	bl	80135f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	6a1b      	ldr	r3, [r3, #32]
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153e4:	f003 0304 	and.w	r3, r3, #4
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d02f      	beq.n	801544c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	699b      	ldr	r3, [r3, #24]
 80153f0:	693a      	ldr	r2, [r7, #16]
 80153f2:	4413      	add	r3, r2
 80153f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80153f6:	68ba      	ldr	r2, [r7, #8]
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d90e      	bls.n	801541c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	68ba      	ldr	r2, [r7, #8]
 8015402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	68fa      	ldr	r2, [r7, #12]
 8015408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801540a:	4b1a      	ldr	r3, [pc, #104]	@ (8015474 <prvSwitchTimerLists+0xc4>)
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	3304      	adds	r3, #4
 8015412:	4619      	mov	r1, r3
 8015414:	4610      	mov	r0, r2
 8015416:	f7fe f8b6 	bl	8013586 <vListInsert>
 801541a:	e017      	b.n	801544c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801541c:	2300      	movs	r3, #0
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	2300      	movs	r3, #0
 8015422:	693a      	ldr	r2, [r7, #16]
 8015424:	2100      	movs	r1, #0
 8015426:	68f8      	ldr	r0, [r7, #12]
 8015428:	f7ff fd58 	bl	8014edc <xTimerGenericCommand>
 801542c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d10b      	bne.n	801544c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015438:	f383 8811 	msr	BASEPRI, r3
 801543c:	f3bf 8f6f 	isb	sy
 8015440:	f3bf 8f4f 	dsb	sy
 8015444:	603b      	str	r3, [r7, #0]
}
 8015446:	bf00      	nop
 8015448:	bf00      	nop
 801544a:	e7fd      	b.n	8015448 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801544c:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <prvSwitchTimerLists+0xc4>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1b0      	bne.n	80153b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015456:	4b07      	ldr	r3, [pc, #28]	@ (8015474 <prvSwitchTimerLists+0xc4>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801545c:	4b06      	ldr	r3, [pc, #24]	@ (8015478 <prvSwitchTimerLists+0xc8>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	4a04      	ldr	r2, [pc, #16]	@ (8015474 <prvSwitchTimerLists+0xc4>)
 8015462:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015464:	4a04      	ldr	r2, [pc, #16]	@ (8015478 <prvSwitchTimerLists+0xc8>)
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	6013      	str	r3, [r2, #0]
}
 801546a:	bf00      	nop
 801546c:	3718      	adds	r7, #24
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	24071c78 	.word	0x24071c78
 8015478:	24071c7c 	.word	0x24071c7c

0801547c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015482:	f000 f969 	bl	8015758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015486:	4b15      	ldr	r3, [pc, #84]	@ (80154dc <prvCheckForValidListAndQueue+0x60>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d120      	bne.n	80154d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801548e:	4814      	ldr	r0, [pc, #80]	@ (80154e0 <prvCheckForValidListAndQueue+0x64>)
 8015490:	f7fe f828 	bl	80134e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015494:	4813      	ldr	r0, [pc, #76]	@ (80154e4 <prvCheckForValidListAndQueue+0x68>)
 8015496:	f7fe f825 	bl	80134e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801549a:	4b13      	ldr	r3, [pc, #76]	@ (80154e8 <prvCheckForValidListAndQueue+0x6c>)
 801549c:	4a10      	ldr	r2, [pc, #64]	@ (80154e0 <prvCheckForValidListAndQueue+0x64>)
 801549e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80154a0:	4b12      	ldr	r3, [pc, #72]	@ (80154ec <prvCheckForValidListAndQueue+0x70>)
 80154a2:	4a10      	ldr	r2, [pc, #64]	@ (80154e4 <prvCheckForValidListAndQueue+0x68>)
 80154a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80154a6:	2300      	movs	r3, #0
 80154a8:	9300      	str	r3, [sp, #0]
 80154aa:	4b11      	ldr	r3, [pc, #68]	@ (80154f0 <prvCheckForValidListAndQueue+0x74>)
 80154ac:	4a11      	ldr	r2, [pc, #68]	@ (80154f4 <prvCheckForValidListAndQueue+0x78>)
 80154ae:	2110      	movs	r1, #16
 80154b0:	200a      	movs	r0, #10
 80154b2:	f7fe f935 	bl	8013720 <xQueueGenericCreateStatic>
 80154b6:	4603      	mov	r3, r0
 80154b8:	4a08      	ldr	r2, [pc, #32]	@ (80154dc <prvCheckForValidListAndQueue+0x60>)
 80154ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80154bc:	4b07      	ldr	r3, [pc, #28]	@ (80154dc <prvCheckForValidListAndQueue+0x60>)
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d005      	beq.n	80154d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80154c4:	4b05      	ldr	r3, [pc, #20]	@ (80154dc <prvCheckForValidListAndQueue+0x60>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	490b      	ldr	r1, [pc, #44]	@ (80154f8 <prvCheckForValidListAndQueue+0x7c>)
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7fe fd5a 	bl	8013f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80154d0:	f000 f974 	bl	80157bc <vPortExitCritical>
}
 80154d4:	bf00      	nop
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	24071c80 	.word	0x24071c80
 80154e0:	24071c50 	.word	0x24071c50
 80154e4:	24071c64 	.word	0x24071c64
 80154e8:	24071c78 	.word	0x24071c78
 80154ec:	24071c7c 	.word	0x24071c7c
 80154f0:	24071d2c 	.word	0x24071d2c
 80154f4:	24071c8c 	.word	0x24071c8c
 80154f8:	0801a84c 	.word	0x0801a84c

080154fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80154fc:	b480      	push	{r7}
 80154fe:	b085      	sub	sp, #20
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	3b04      	subs	r3, #4
 801550c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	3b04      	subs	r3, #4
 801551a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	f023 0201 	bic.w	r2, r3, #1
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	3b04      	subs	r3, #4
 801552a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801552c:	4a0c      	ldr	r2, [pc, #48]	@ (8015560 <pxPortInitialiseStack+0x64>)
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	3b14      	subs	r3, #20
 8015536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015538:	687a      	ldr	r2, [r7, #4]
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	3b04      	subs	r3, #4
 8015542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f06f 0202 	mvn.w	r2, #2
 801554a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	3b20      	subs	r3, #32
 8015550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015552:	68fb      	ldr	r3, [r7, #12]
}
 8015554:	4618      	mov	r0, r3
 8015556:	3714      	adds	r7, #20
 8015558:	46bd      	mov	sp, r7
 801555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555e:	4770      	bx	lr
 8015560:	08015565 	.word	0x08015565

08015564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801556e:	4b13      	ldr	r3, [pc, #76]	@ (80155bc <prvTaskExitError+0x58>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015576:	d00b      	beq.n	8015590 <prvTaskExitError+0x2c>
	__asm volatile
 8015578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801557c:	f383 8811 	msr	BASEPRI, r3
 8015580:	f3bf 8f6f 	isb	sy
 8015584:	f3bf 8f4f 	dsb	sy
 8015588:	60fb      	str	r3, [r7, #12]
}
 801558a:	bf00      	nop
 801558c:	bf00      	nop
 801558e:	e7fd      	b.n	801558c <prvTaskExitError+0x28>
	__asm volatile
 8015590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015594:	f383 8811 	msr	BASEPRI, r3
 8015598:	f3bf 8f6f 	isb	sy
 801559c:	f3bf 8f4f 	dsb	sy
 80155a0:	60bb      	str	r3, [r7, #8]
}
 80155a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80155a4:	bf00      	nop
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d0fc      	beq.n	80155a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80155ac:	bf00      	nop
 80155ae:	bf00      	nop
 80155b0:	3714      	adds	r7, #20
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr
 80155ba:	bf00      	nop
 80155bc:	2400009c 	.word	0x2400009c

080155c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80155c0:	4b07      	ldr	r3, [pc, #28]	@ (80155e0 <pxCurrentTCBConst2>)
 80155c2:	6819      	ldr	r1, [r3, #0]
 80155c4:	6808      	ldr	r0, [r1, #0]
 80155c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ca:	f380 8809 	msr	PSP, r0
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	f04f 0000 	mov.w	r0, #0
 80155d6:	f380 8811 	msr	BASEPRI, r0
 80155da:	4770      	bx	lr
 80155dc:	f3af 8000 	nop.w

080155e0 <pxCurrentTCBConst2>:
 80155e0:	24071750 	.word	0x24071750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80155e4:	bf00      	nop
 80155e6:	bf00      	nop

080155e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80155e8:	4808      	ldr	r0, [pc, #32]	@ (801560c <prvPortStartFirstTask+0x24>)
 80155ea:	6800      	ldr	r0, [r0, #0]
 80155ec:	6800      	ldr	r0, [r0, #0]
 80155ee:	f380 8808 	msr	MSP, r0
 80155f2:	f04f 0000 	mov.w	r0, #0
 80155f6:	f380 8814 	msr	CONTROL, r0
 80155fa:	b662      	cpsie	i
 80155fc:	b661      	cpsie	f
 80155fe:	f3bf 8f4f 	dsb	sy
 8015602:	f3bf 8f6f 	isb	sy
 8015606:	df00      	svc	0
 8015608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801560a:	bf00      	nop
 801560c:	e000ed08 	.word	0xe000ed08

08015610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b086      	sub	sp, #24
 8015614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015616:	4b47      	ldr	r3, [pc, #284]	@ (8015734 <xPortStartScheduler+0x124>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	4a47      	ldr	r2, [pc, #284]	@ (8015738 <xPortStartScheduler+0x128>)
 801561c:	4293      	cmp	r3, r2
 801561e:	d10b      	bne.n	8015638 <xPortStartScheduler+0x28>
	__asm volatile
 8015620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015624:	f383 8811 	msr	BASEPRI, r3
 8015628:	f3bf 8f6f 	isb	sy
 801562c:	f3bf 8f4f 	dsb	sy
 8015630:	613b      	str	r3, [r7, #16]
}
 8015632:	bf00      	nop
 8015634:	bf00      	nop
 8015636:	e7fd      	b.n	8015634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015638:	4b3e      	ldr	r3, [pc, #248]	@ (8015734 <xPortStartScheduler+0x124>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4a3f      	ldr	r2, [pc, #252]	@ (801573c <xPortStartScheduler+0x12c>)
 801563e:	4293      	cmp	r3, r2
 8015640:	d10b      	bne.n	801565a <xPortStartScheduler+0x4a>
	__asm volatile
 8015642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015646:	f383 8811 	msr	BASEPRI, r3
 801564a:	f3bf 8f6f 	isb	sy
 801564e:	f3bf 8f4f 	dsb	sy
 8015652:	60fb      	str	r3, [r7, #12]
}
 8015654:	bf00      	nop
 8015656:	bf00      	nop
 8015658:	e7fd      	b.n	8015656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801565a:	4b39      	ldr	r3, [pc, #228]	@ (8015740 <xPortStartScheduler+0x130>)
 801565c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	b2db      	uxtb	r3, r3
 8015664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	22ff      	movs	r2, #255	@ 0xff
 801566a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801566c:	697b      	ldr	r3, [r7, #20]
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	b2db      	uxtb	r3, r3
 8015672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015674:	78fb      	ldrb	r3, [r7, #3]
 8015676:	b2db      	uxtb	r3, r3
 8015678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801567c:	b2da      	uxtb	r2, r3
 801567e:	4b31      	ldr	r3, [pc, #196]	@ (8015744 <xPortStartScheduler+0x134>)
 8015680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015682:	4b31      	ldr	r3, [pc, #196]	@ (8015748 <xPortStartScheduler+0x138>)
 8015684:	2207      	movs	r2, #7
 8015686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015688:	e009      	b.n	801569e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801568a:	4b2f      	ldr	r3, [pc, #188]	@ (8015748 <xPortStartScheduler+0x138>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	3b01      	subs	r3, #1
 8015690:	4a2d      	ldr	r2, [pc, #180]	@ (8015748 <xPortStartScheduler+0x138>)
 8015692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015694:	78fb      	ldrb	r3, [r7, #3]
 8015696:	b2db      	uxtb	r3, r3
 8015698:	005b      	lsls	r3, r3, #1
 801569a:	b2db      	uxtb	r3, r3
 801569c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801569e:	78fb      	ldrb	r3, [r7, #3]
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80156a6:	2b80      	cmp	r3, #128	@ 0x80
 80156a8:	d0ef      	beq.n	801568a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80156aa:	4b27      	ldr	r3, [pc, #156]	@ (8015748 <xPortStartScheduler+0x138>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	f1c3 0307 	rsb	r3, r3, #7
 80156b2:	2b04      	cmp	r3, #4
 80156b4:	d00b      	beq.n	80156ce <xPortStartScheduler+0xbe>
	__asm volatile
 80156b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156ba:	f383 8811 	msr	BASEPRI, r3
 80156be:	f3bf 8f6f 	isb	sy
 80156c2:	f3bf 8f4f 	dsb	sy
 80156c6:	60bb      	str	r3, [r7, #8]
}
 80156c8:	bf00      	nop
 80156ca:	bf00      	nop
 80156cc:	e7fd      	b.n	80156ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80156ce:	4b1e      	ldr	r3, [pc, #120]	@ (8015748 <xPortStartScheduler+0x138>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	021b      	lsls	r3, r3, #8
 80156d4:	4a1c      	ldr	r2, [pc, #112]	@ (8015748 <xPortStartScheduler+0x138>)
 80156d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80156d8:	4b1b      	ldr	r3, [pc, #108]	@ (8015748 <xPortStartScheduler+0x138>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80156e0:	4a19      	ldr	r2, [pc, #100]	@ (8015748 <xPortStartScheduler+0x138>)
 80156e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	b2da      	uxtb	r2, r3
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80156ec:	4b17      	ldr	r3, [pc, #92]	@ (801574c <xPortStartScheduler+0x13c>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	4a16      	ldr	r2, [pc, #88]	@ (801574c <xPortStartScheduler+0x13c>)
 80156f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80156f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80156f8:	4b14      	ldr	r3, [pc, #80]	@ (801574c <xPortStartScheduler+0x13c>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4a13      	ldr	r2, [pc, #76]	@ (801574c <xPortStartScheduler+0x13c>)
 80156fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015704:	f000 f8da 	bl	80158bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015708:	4b11      	ldr	r3, [pc, #68]	@ (8015750 <xPortStartScheduler+0x140>)
 801570a:	2200      	movs	r2, #0
 801570c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801570e:	f000 f8f9 	bl	8015904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015712:	4b10      	ldr	r3, [pc, #64]	@ (8015754 <xPortStartScheduler+0x144>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	4a0f      	ldr	r2, [pc, #60]	@ (8015754 <xPortStartScheduler+0x144>)
 8015718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801571c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801571e:	f7ff ff63 	bl	80155e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015722:	f7ff f831 	bl	8014788 <vTaskSwitchContext>
	prvTaskExitError();
 8015726:	f7ff ff1d 	bl	8015564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801572a:	2300      	movs	r3, #0
}
 801572c:	4618      	mov	r0, r3
 801572e:	3718      	adds	r7, #24
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}
 8015734:	e000ed00 	.word	0xe000ed00
 8015738:	410fc271 	.word	0x410fc271
 801573c:	410fc270 	.word	0x410fc270
 8015740:	e000e400 	.word	0xe000e400
 8015744:	24071d7c 	.word	0x24071d7c
 8015748:	24071d80 	.word	0x24071d80
 801574c:	e000ed20 	.word	0xe000ed20
 8015750:	2400009c 	.word	0x2400009c
 8015754:	e000ef34 	.word	0xe000ef34

08015758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015758:	b480      	push	{r7}
 801575a:	b083      	sub	sp, #12
 801575c:	af00      	add	r7, sp, #0
	__asm volatile
 801575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015762:	f383 8811 	msr	BASEPRI, r3
 8015766:	f3bf 8f6f 	isb	sy
 801576a:	f3bf 8f4f 	dsb	sy
 801576e:	607b      	str	r3, [r7, #4]
}
 8015770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015772:	4b10      	ldr	r3, [pc, #64]	@ (80157b4 <vPortEnterCritical+0x5c>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	3301      	adds	r3, #1
 8015778:	4a0e      	ldr	r2, [pc, #56]	@ (80157b4 <vPortEnterCritical+0x5c>)
 801577a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801577c:	4b0d      	ldr	r3, [pc, #52]	@ (80157b4 <vPortEnterCritical+0x5c>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	2b01      	cmp	r3, #1
 8015782:	d110      	bne.n	80157a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015784:	4b0c      	ldr	r3, [pc, #48]	@ (80157b8 <vPortEnterCritical+0x60>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	b2db      	uxtb	r3, r3
 801578a:	2b00      	cmp	r3, #0
 801578c:	d00b      	beq.n	80157a6 <vPortEnterCritical+0x4e>
	__asm volatile
 801578e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015792:	f383 8811 	msr	BASEPRI, r3
 8015796:	f3bf 8f6f 	isb	sy
 801579a:	f3bf 8f4f 	dsb	sy
 801579e:	603b      	str	r3, [r7, #0]
}
 80157a0:	bf00      	nop
 80157a2:	bf00      	nop
 80157a4:	e7fd      	b.n	80157a2 <vPortEnterCritical+0x4a>
	}
}
 80157a6:	bf00      	nop
 80157a8:	370c      	adds	r7, #12
 80157aa:	46bd      	mov	sp, r7
 80157ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b0:	4770      	bx	lr
 80157b2:	bf00      	nop
 80157b4:	2400009c 	.word	0x2400009c
 80157b8:	e000ed04 	.word	0xe000ed04

080157bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80157bc:	b480      	push	{r7}
 80157be:	b083      	sub	sp, #12
 80157c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80157c2:	4b12      	ldr	r3, [pc, #72]	@ (801580c <vPortExitCritical+0x50>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d10b      	bne.n	80157e2 <vPortExitCritical+0x26>
	__asm volatile
 80157ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157ce:	f383 8811 	msr	BASEPRI, r3
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	f3bf 8f4f 	dsb	sy
 80157da:	607b      	str	r3, [r7, #4]
}
 80157dc:	bf00      	nop
 80157de:	bf00      	nop
 80157e0:	e7fd      	b.n	80157de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80157e2:	4b0a      	ldr	r3, [pc, #40]	@ (801580c <vPortExitCritical+0x50>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	3b01      	subs	r3, #1
 80157e8:	4a08      	ldr	r2, [pc, #32]	@ (801580c <vPortExitCritical+0x50>)
 80157ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80157ec:	4b07      	ldr	r3, [pc, #28]	@ (801580c <vPortExitCritical+0x50>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d105      	bne.n	8015800 <vPortExitCritical+0x44>
 80157f4:	2300      	movs	r3, #0
 80157f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	f383 8811 	msr	BASEPRI, r3
}
 80157fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015800:	bf00      	nop
 8015802:	370c      	adds	r7, #12
 8015804:	46bd      	mov	sp, r7
 8015806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580a:	4770      	bx	lr
 801580c:	2400009c 	.word	0x2400009c

08015810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015810:	f3ef 8009 	mrs	r0, PSP
 8015814:	f3bf 8f6f 	isb	sy
 8015818:	4b15      	ldr	r3, [pc, #84]	@ (8015870 <pxCurrentTCBConst>)
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	f01e 0f10 	tst.w	lr, #16
 8015820:	bf08      	it	eq
 8015822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801582a:	6010      	str	r0, [r2, #0]
 801582c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015834:	f380 8811 	msr	BASEPRI, r0
 8015838:	f3bf 8f4f 	dsb	sy
 801583c:	f3bf 8f6f 	isb	sy
 8015840:	f7fe ffa2 	bl	8014788 <vTaskSwitchContext>
 8015844:	f04f 0000 	mov.w	r0, #0
 8015848:	f380 8811 	msr	BASEPRI, r0
 801584c:	bc09      	pop	{r0, r3}
 801584e:	6819      	ldr	r1, [r3, #0]
 8015850:	6808      	ldr	r0, [r1, #0]
 8015852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015856:	f01e 0f10 	tst.w	lr, #16
 801585a:	bf08      	it	eq
 801585c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015860:	f380 8809 	msr	PSP, r0
 8015864:	f3bf 8f6f 	isb	sy
 8015868:	4770      	bx	lr
 801586a:	bf00      	nop
 801586c:	f3af 8000 	nop.w

08015870 <pxCurrentTCBConst>:
 8015870:	24071750 	.word	0x24071750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015874:	bf00      	nop
 8015876:	bf00      	nop

08015878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b082      	sub	sp, #8
 801587c:	af00      	add	r7, sp, #0
	__asm volatile
 801587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015882:	f383 8811 	msr	BASEPRI, r3
 8015886:	f3bf 8f6f 	isb	sy
 801588a:	f3bf 8f4f 	dsb	sy
 801588e:	607b      	str	r3, [r7, #4]
}
 8015890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015892:	f7fe febf 	bl	8014614 <xTaskIncrementTick>
 8015896:	4603      	mov	r3, r0
 8015898:	2b00      	cmp	r3, #0
 801589a:	d003      	beq.n	80158a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801589c:	4b06      	ldr	r3, [pc, #24]	@ (80158b8 <xPortSysTickHandler+0x40>)
 801589e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158a2:	601a      	str	r2, [r3, #0]
 80158a4:	2300      	movs	r3, #0
 80158a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	f383 8811 	msr	BASEPRI, r3
}
 80158ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80158b0:	bf00      	nop
 80158b2:	3708      	adds	r7, #8
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	e000ed04 	.word	0xe000ed04

080158bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80158bc:	b480      	push	{r7}
 80158be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80158c0:	4b0b      	ldr	r3, [pc, #44]	@ (80158f0 <vPortSetupTimerInterrupt+0x34>)
 80158c2:	2200      	movs	r2, #0
 80158c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80158c6:	4b0b      	ldr	r3, [pc, #44]	@ (80158f4 <vPortSetupTimerInterrupt+0x38>)
 80158c8:	2200      	movs	r2, #0
 80158ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80158cc:	4b0a      	ldr	r3, [pc, #40]	@ (80158f8 <vPortSetupTimerInterrupt+0x3c>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	4a0a      	ldr	r2, [pc, #40]	@ (80158fc <vPortSetupTimerInterrupt+0x40>)
 80158d2:	fba2 2303 	umull	r2, r3, r2, r3
 80158d6:	099b      	lsrs	r3, r3, #6
 80158d8:	4a09      	ldr	r2, [pc, #36]	@ (8015900 <vPortSetupTimerInterrupt+0x44>)
 80158da:	3b01      	subs	r3, #1
 80158dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80158de:	4b04      	ldr	r3, [pc, #16]	@ (80158f0 <vPortSetupTimerInterrupt+0x34>)
 80158e0:	2207      	movs	r2, #7
 80158e2:	601a      	str	r2, [r3, #0]
}
 80158e4:	bf00      	nop
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr
 80158ee:	bf00      	nop
 80158f0:	e000e010 	.word	0xe000e010
 80158f4:	e000e018 	.word	0xe000e018
 80158f8:	24000000 	.word	0x24000000
 80158fc:	10624dd3 	.word	0x10624dd3
 8015900:	e000e014 	.word	0xe000e014

08015904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015914 <vPortEnableVFP+0x10>
 8015908:	6801      	ldr	r1, [r0, #0]
 801590a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801590e:	6001      	str	r1, [r0, #0]
 8015910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015912:	bf00      	nop
 8015914:	e000ed88 	.word	0xe000ed88

08015918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015918:	b480      	push	{r7}
 801591a:	b085      	sub	sp, #20
 801591c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801591e:	f3ef 8305 	mrs	r3, IPSR
 8015922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2b0f      	cmp	r3, #15
 8015928:	d915      	bls.n	8015956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801592a:	4a18      	ldr	r2, [pc, #96]	@ (801598c <vPortValidateInterruptPriority+0x74>)
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	4413      	add	r3, r2
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015934:	4b16      	ldr	r3, [pc, #88]	@ (8015990 <vPortValidateInterruptPriority+0x78>)
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	7afa      	ldrb	r2, [r7, #11]
 801593a:	429a      	cmp	r2, r3
 801593c:	d20b      	bcs.n	8015956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015942:	f383 8811 	msr	BASEPRI, r3
 8015946:	f3bf 8f6f 	isb	sy
 801594a:	f3bf 8f4f 	dsb	sy
 801594e:	607b      	str	r3, [r7, #4]
}
 8015950:	bf00      	nop
 8015952:	bf00      	nop
 8015954:	e7fd      	b.n	8015952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015956:	4b0f      	ldr	r3, [pc, #60]	@ (8015994 <vPortValidateInterruptPriority+0x7c>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801595e:	4b0e      	ldr	r3, [pc, #56]	@ (8015998 <vPortValidateInterruptPriority+0x80>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	429a      	cmp	r2, r3
 8015964:	d90b      	bls.n	801597e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801596a:	f383 8811 	msr	BASEPRI, r3
 801596e:	f3bf 8f6f 	isb	sy
 8015972:	f3bf 8f4f 	dsb	sy
 8015976:	603b      	str	r3, [r7, #0]
}
 8015978:	bf00      	nop
 801597a:	bf00      	nop
 801597c:	e7fd      	b.n	801597a <vPortValidateInterruptPriority+0x62>
	}
 801597e:	bf00      	nop
 8015980:	3714      	adds	r7, #20
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	e000e3f0 	.word	0xe000e3f0
 8015990:	24071d7c 	.word	0x24071d7c
 8015994:	e000ed0c 	.word	0xe000ed0c
 8015998:	24071d80 	.word	0x24071d80

0801599c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b08a      	sub	sp, #40	@ 0x28
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80159a4:	2300      	movs	r3, #0
 80159a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80159a8:	f7fe fd78 	bl	801449c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80159ac:	4b5c      	ldr	r3, [pc, #368]	@ (8015b20 <pvPortMalloc+0x184>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d101      	bne.n	80159b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80159b4:	f000 f924 	bl	8015c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80159b8:	4b5a      	ldr	r3, [pc, #360]	@ (8015b24 <pvPortMalloc+0x188>)
 80159ba:	681a      	ldr	r2, [r3, #0]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	4013      	ands	r3, r2
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f040 8095 	bne.w	8015af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d01e      	beq.n	8015a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80159cc:	2208      	movs	r2, #8
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	4413      	add	r3, r2
 80159d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f003 0307 	and.w	r3, r3, #7
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d015      	beq.n	8015a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f023 0307 	bic.w	r3, r3, #7
 80159e4:	3308      	adds	r3, #8
 80159e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f003 0307 	and.w	r3, r3, #7
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00b      	beq.n	8015a0a <pvPortMalloc+0x6e>
	__asm volatile
 80159f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159f6:	f383 8811 	msr	BASEPRI, r3
 80159fa:	f3bf 8f6f 	isb	sy
 80159fe:	f3bf 8f4f 	dsb	sy
 8015a02:	617b      	str	r3, [r7, #20]
}
 8015a04:	bf00      	nop
 8015a06:	bf00      	nop
 8015a08:	e7fd      	b.n	8015a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d06f      	beq.n	8015af0 <pvPortMalloc+0x154>
 8015a10:	4b45      	ldr	r3, [pc, #276]	@ (8015b28 <pvPortMalloc+0x18c>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	687a      	ldr	r2, [r7, #4]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d86a      	bhi.n	8015af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015a1a:	4b44      	ldr	r3, [pc, #272]	@ (8015b2c <pvPortMalloc+0x190>)
 8015a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015a1e:	4b43      	ldr	r3, [pc, #268]	@ (8015b2c <pvPortMalloc+0x190>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a24:	e004      	b.n	8015a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	429a      	cmp	r2, r3
 8015a38:	d903      	bls.n	8015a42 <pvPortMalloc+0xa6>
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d1f1      	bne.n	8015a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015a42:	4b37      	ldr	r3, [pc, #220]	@ (8015b20 <pvPortMalloc+0x184>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d051      	beq.n	8015af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015a4c:	6a3b      	ldr	r3, [r7, #32]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	2208      	movs	r2, #8
 8015a52:	4413      	add	r3, r2
 8015a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a60:	685a      	ldr	r2, [r3, #4]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	1ad2      	subs	r2, r2, r3
 8015a66:	2308      	movs	r3, #8
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d920      	bls.n	8015ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	4413      	add	r3, r2
 8015a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a76:	69bb      	ldr	r3, [r7, #24]
 8015a78:	f003 0307 	and.w	r3, r3, #7
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00b      	beq.n	8015a98 <pvPortMalloc+0xfc>
	__asm volatile
 8015a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a84:	f383 8811 	msr	BASEPRI, r3
 8015a88:	f3bf 8f6f 	isb	sy
 8015a8c:	f3bf 8f4f 	dsb	sy
 8015a90:	613b      	str	r3, [r7, #16]
}
 8015a92:	bf00      	nop
 8015a94:	bf00      	nop
 8015a96:	e7fd      	b.n	8015a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9a:	685a      	ldr	r2, [r3, #4]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	1ad2      	subs	r2, r2, r3
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015aaa:	69b8      	ldr	r0, [r7, #24]
 8015aac:	f000 f90a 	bl	8015cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8015b28 <pvPortMalloc+0x18c>)
 8015ab2:	681a      	ldr	r2, [r3, #0]
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab6:	685b      	ldr	r3, [r3, #4]
 8015ab8:	1ad3      	subs	r3, r2, r3
 8015aba:	4a1b      	ldr	r2, [pc, #108]	@ (8015b28 <pvPortMalloc+0x18c>)
 8015abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015abe:	4b1a      	ldr	r3, [pc, #104]	@ (8015b28 <pvPortMalloc+0x18c>)
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8015b30 <pvPortMalloc+0x194>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d203      	bcs.n	8015ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015aca:	4b17      	ldr	r3, [pc, #92]	@ (8015b28 <pvPortMalloc+0x18c>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	4a18      	ldr	r2, [pc, #96]	@ (8015b30 <pvPortMalloc+0x194>)
 8015ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad4:	685a      	ldr	r2, [r3, #4]
 8015ad6:	4b13      	ldr	r3, [pc, #76]	@ (8015b24 <pvPortMalloc+0x188>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	431a      	orrs	r2, r3
 8015adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ae6:	4b13      	ldr	r3, [pc, #76]	@ (8015b34 <pvPortMalloc+0x198>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	3301      	adds	r3, #1
 8015aec:	4a11      	ldr	r2, [pc, #68]	@ (8015b34 <pvPortMalloc+0x198>)
 8015aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015af0:	f7fe fce2 	bl	80144b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015af4:	69fb      	ldr	r3, [r7, #28]
 8015af6:	f003 0307 	and.w	r3, r3, #7
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d00b      	beq.n	8015b16 <pvPortMalloc+0x17a>
	__asm volatile
 8015afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b02:	f383 8811 	msr	BASEPRI, r3
 8015b06:	f3bf 8f6f 	isb	sy
 8015b0a:	f3bf 8f4f 	dsb	sy
 8015b0e:	60fb      	str	r3, [r7, #12]
}
 8015b10:	bf00      	nop
 8015b12:	bf00      	nop
 8015b14:	e7fd      	b.n	8015b12 <pvPortMalloc+0x176>
	return pvReturn;
 8015b16:	69fb      	ldr	r3, [r7, #28]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3728      	adds	r7, #40	@ 0x28
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	2407598c 	.word	0x2407598c
 8015b24:	240759a0 	.word	0x240759a0
 8015b28:	24075990 	.word	0x24075990
 8015b2c:	24075984 	.word	0x24075984
 8015b30:	24075994 	.word	0x24075994
 8015b34:	24075998 	.word	0x24075998

08015b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b086      	sub	sp, #24
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d04f      	beq.n	8015bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015b4a:	2308      	movs	r3, #8
 8015b4c:	425b      	negs	r3, r3
 8015b4e:	697a      	ldr	r2, [r7, #20]
 8015b50:	4413      	add	r3, r2
 8015b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	685a      	ldr	r2, [r3, #4]
 8015b5c:	4b25      	ldr	r3, [pc, #148]	@ (8015bf4 <vPortFree+0xbc>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	4013      	ands	r3, r2
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d10b      	bne.n	8015b7e <vPortFree+0x46>
	__asm volatile
 8015b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b6a:	f383 8811 	msr	BASEPRI, r3
 8015b6e:	f3bf 8f6f 	isb	sy
 8015b72:	f3bf 8f4f 	dsb	sy
 8015b76:	60fb      	str	r3, [r7, #12]
}
 8015b78:	bf00      	nop
 8015b7a:	bf00      	nop
 8015b7c:	e7fd      	b.n	8015b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d00b      	beq.n	8015b9e <vPortFree+0x66>
	__asm volatile
 8015b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b8a:	f383 8811 	msr	BASEPRI, r3
 8015b8e:	f3bf 8f6f 	isb	sy
 8015b92:	f3bf 8f4f 	dsb	sy
 8015b96:	60bb      	str	r3, [r7, #8]
}
 8015b98:	bf00      	nop
 8015b9a:	bf00      	nop
 8015b9c:	e7fd      	b.n	8015b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015b9e:	693b      	ldr	r3, [r7, #16]
 8015ba0:	685a      	ldr	r2, [r3, #4]
 8015ba2:	4b14      	ldr	r3, [pc, #80]	@ (8015bf4 <vPortFree+0xbc>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	4013      	ands	r3, r2
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d01e      	beq.n	8015bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d11a      	bne.n	8015bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015bb4:	693b      	ldr	r3, [r7, #16]
 8015bb6:	685a      	ldr	r2, [r3, #4]
 8015bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8015bf4 <vPortFree+0xbc>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	43db      	mvns	r3, r3
 8015bbe:	401a      	ands	r2, r3
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015bc4:	f7fe fc6a 	bl	801449c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	685a      	ldr	r2, [r3, #4]
 8015bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8015bf8 <vPortFree+0xc0>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	4a09      	ldr	r2, [pc, #36]	@ (8015bf8 <vPortFree+0xc0>)
 8015bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015bd6:	6938      	ldr	r0, [r7, #16]
 8015bd8:	f000 f874 	bl	8015cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015bdc:	4b07      	ldr	r3, [pc, #28]	@ (8015bfc <vPortFree+0xc4>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	3301      	adds	r3, #1
 8015be2:	4a06      	ldr	r2, [pc, #24]	@ (8015bfc <vPortFree+0xc4>)
 8015be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015be6:	f7fe fc67 	bl	80144b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015bea:	bf00      	nop
 8015bec:	3718      	adds	r7, #24
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	240759a0 	.word	0x240759a0
 8015bf8:	24075990 	.word	0x24075990
 8015bfc:	2407599c 	.word	0x2407599c

08015c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015c00:	b480      	push	{r7}
 8015c02:	b085      	sub	sp, #20
 8015c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015c06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8015c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015c0c:	4b27      	ldr	r3, [pc, #156]	@ (8015cac <prvHeapInit+0xac>)
 8015c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f003 0307 	and.w	r3, r3, #7
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d00c      	beq.n	8015c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	3307      	adds	r3, #7
 8015c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	f023 0307 	bic.w	r3, r3, #7
 8015c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015c28:	68ba      	ldr	r2, [r7, #8]
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	1ad3      	subs	r3, r2, r3
 8015c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8015cac <prvHeapInit+0xac>)
 8015c30:	4413      	add	r3, r2
 8015c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015c38:	4a1d      	ldr	r2, [pc, #116]	@ (8015cb0 <prvHeapInit+0xb0>)
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8015cb0 <prvHeapInit+0xb0>)
 8015c40:	2200      	movs	r2, #0
 8015c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	68ba      	ldr	r2, [r7, #8]
 8015c48:	4413      	add	r3, r2
 8015c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015c4c:	2208      	movs	r2, #8
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	1a9b      	subs	r3, r3, r2
 8015c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	f023 0307 	bic.w	r3, r3, #7
 8015c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	4a15      	ldr	r2, [pc, #84]	@ (8015cb4 <prvHeapInit+0xb4>)
 8015c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015c62:	4b14      	ldr	r3, [pc, #80]	@ (8015cb4 <prvHeapInit+0xb4>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2200      	movs	r2, #0
 8015c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015c6a:	4b12      	ldr	r3, [pc, #72]	@ (8015cb4 <prvHeapInit+0xb4>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	68fa      	ldr	r2, [r7, #12]
 8015c7a:	1ad2      	subs	r2, r2, r3
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015c80:	4b0c      	ldr	r3, [pc, #48]	@ (8015cb4 <prvHeapInit+0xb4>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	683b      	ldr	r3, [r7, #0]
 8015c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8015cb8 <prvHeapInit+0xb8>)
 8015c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	4a09      	ldr	r2, [pc, #36]	@ (8015cbc <prvHeapInit+0xbc>)
 8015c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015c98:	4b09      	ldr	r3, [pc, #36]	@ (8015cc0 <prvHeapInit+0xc0>)
 8015c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015c9e:	601a      	str	r2, [r3, #0]
}
 8015ca0:	bf00      	nop
 8015ca2:	3714      	adds	r7, #20
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr
 8015cac:	24071d84 	.word	0x24071d84
 8015cb0:	24075984 	.word	0x24075984
 8015cb4:	2407598c 	.word	0x2407598c
 8015cb8:	24075994 	.word	0x24075994
 8015cbc:	24075990 	.word	0x24075990
 8015cc0:	240759a0 	.word	0x240759a0

08015cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b085      	sub	sp, #20
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015ccc:	4b28      	ldr	r3, [pc, #160]	@ (8015d70 <prvInsertBlockIntoFreeList+0xac>)
 8015cce:	60fb      	str	r3, [r7, #12]
 8015cd0:	e002      	b.n	8015cd8 <prvInsertBlockIntoFreeList+0x14>
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	60fb      	str	r3, [r7, #12]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	687a      	ldr	r2, [r7, #4]
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d8f7      	bhi.n	8015cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	685b      	ldr	r3, [r3, #4]
 8015cea:	68ba      	ldr	r2, [r7, #8]
 8015cec:	4413      	add	r3, r2
 8015cee:	687a      	ldr	r2, [r7, #4]
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d108      	bne.n	8015d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	685a      	ldr	r2, [r3, #4]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	441a      	add	r2, r3
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	441a      	add	r2, r3
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d118      	bne.n	8015d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	4b15      	ldr	r3, [pc, #84]	@ (8015d74 <prvInsertBlockIntoFreeList+0xb0>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d00d      	beq.n	8015d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	685a      	ldr	r2, [r3, #4]
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	441a      	add	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	681a      	ldr	r2, [r3, #0]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	601a      	str	r2, [r3, #0]
 8015d40:	e008      	b.n	8015d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015d42:	4b0c      	ldr	r3, [pc, #48]	@ (8015d74 <prvInsertBlockIntoFreeList+0xb0>)
 8015d44:	681a      	ldr	r2, [r3, #0]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	601a      	str	r2, [r3, #0]
 8015d4a:	e003      	b.n	8015d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	681a      	ldr	r2, [r3, #0]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015d54:	68fa      	ldr	r2, [r7, #12]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d002      	beq.n	8015d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	687a      	ldr	r2, [r7, #4]
 8015d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015d62:	bf00      	nop
 8015d64:	3714      	adds	r7, #20
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr
 8015d6e:	bf00      	nop
 8015d70:	24075984 	.word	0x24075984
 8015d74:	2407598c 	.word	0x2407598c

08015d78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	4913      	ldr	r1, [pc, #76]	@ (8015dcc <MX_USB_DEVICE_Init+0x54>)
 8015d80:	4813      	ldr	r0, [pc, #76]	@ (8015dd0 <MX_USB_DEVICE_Init+0x58>)
 8015d82:	f7fb ff2f 	bl	8011be4 <USBD_Init>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d001      	beq.n	8015d90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015d8c:	f7eb fe56 	bl	8001a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015d90:	4910      	ldr	r1, [pc, #64]	@ (8015dd4 <MX_USB_DEVICE_Init+0x5c>)
 8015d92:	480f      	ldr	r0, [pc, #60]	@ (8015dd0 <MX_USB_DEVICE_Init+0x58>)
 8015d94:	f7fb ff56 	bl	8011c44 <USBD_RegisterClass>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d001      	beq.n	8015da2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015d9e:	f7eb fe4d 	bl	8001a3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015da2:	490d      	ldr	r1, [pc, #52]	@ (8015dd8 <MX_USB_DEVICE_Init+0x60>)
 8015da4:	480a      	ldr	r0, [pc, #40]	@ (8015dd0 <MX_USB_DEVICE_Init+0x58>)
 8015da6:	f7fb fe4d 	bl	8011a44 <USBD_CDC_RegisterInterface>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d001      	beq.n	8015db4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015db0:	f7eb fe44 	bl	8001a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015db4:	4806      	ldr	r0, [pc, #24]	@ (8015dd0 <MX_USB_DEVICE_Init+0x58>)
 8015db6:	f7fb ff7b 	bl	8011cb0 <USBD_Start>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015dc0:	f7eb fe3c 	bl	8001a3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015dc4:	f7f2 fd1e 	bl	8008804 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015dc8:	bf00      	nop
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	240000b4 	.word	0x240000b4
 8015dd0:	240759a4 	.word	0x240759a4
 8015dd4:	2400001c 	.word	0x2400001c
 8015dd8:	240000a0 	.word	0x240000a0

08015ddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015de0:	2200      	movs	r2, #0
 8015de2:	4905      	ldr	r1, [pc, #20]	@ (8015df8 <CDC_Init_FS+0x1c>)
 8015de4:	4805      	ldr	r0, [pc, #20]	@ (8015dfc <CDC_Init_FS+0x20>)
 8015de6:	f7fb fe47 	bl	8011a78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015dea:	4905      	ldr	r1, [pc, #20]	@ (8015e00 <CDC_Init_FS+0x24>)
 8015dec:	4803      	ldr	r0, [pc, #12]	@ (8015dfc <CDC_Init_FS+0x20>)
 8015dee:	f7fb fe65 	bl	8011abc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015df2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015df4:	4618      	mov	r0, r3
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	24076480 	.word	0x24076480
 8015dfc:	240759a4 	.word	0x240759a4
 8015e00:	24075c80 	.word	0x24075c80

08015e04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015e04:	b480      	push	{r7}
 8015e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015e08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	6039      	str	r1, [r7, #0]
 8015e1e:	71fb      	strb	r3, [r7, #7]
 8015e20:	4613      	mov	r3, r2
 8015e22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015e24:	79fb      	ldrb	r3, [r7, #7]
 8015e26:	2b23      	cmp	r3, #35	@ 0x23
 8015e28:	d84a      	bhi.n	8015ec0 <CDC_Control_FS+0xac>
 8015e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8015e30 <CDC_Control_FS+0x1c>)
 8015e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e30:	08015ec1 	.word	0x08015ec1
 8015e34:	08015ec1 	.word	0x08015ec1
 8015e38:	08015ec1 	.word	0x08015ec1
 8015e3c:	08015ec1 	.word	0x08015ec1
 8015e40:	08015ec1 	.word	0x08015ec1
 8015e44:	08015ec1 	.word	0x08015ec1
 8015e48:	08015ec1 	.word	0x08015ec1
 8015e4c:	08015ec1 	.word	0x08015ec1
 8015e50:	08015ec1 	.word	0x08015ec1
 8015e54:	08015ec1 	.word	0x08015ec1
 8015e58:	08015ec1 	.word	0x08015ec1
 8015e5c:	08015ec1 	.word	0x08015ec1
 8015e60:	08015ec1 	.word	0x08015ec1
 8015e64:	08015ec1 	.word	0x08015ec1
 8015e68:	08015ec1 	.word	0x08015ec1
 8015e6c:	08015ec1 	.word	0x08015ec1
 8015e70:	08015ec1 	.word	0x08015ec1
 8015e74:	08015ec1 	.word	0x08015ec1
 8015e78:	08015ec1 	.word	0x08015ec1
 8015e7c:	08015ec1 	.word	0x08015ec1
 8015e80:	08015ec1 	.word	0x08015ec1
 8015e84:	08015ec1 	.word	0x08015ec1
 8015e88:	08015ec1 	.word	0x08015ec1
 8015e8c:	08015ec1 	.word	0x08015ec1
 8015e90:	08015ec1 	.word	0x08015ec1
 8015e94:	08015ec1 	.word	0x08015ec1
 8015e98:	08015ec1 	.word	0x08015ec1
 8015e9c:	08015ec1 	.word	0x08015ec1
 8015ea0:	08015ec1 	.word	0x08015ec1
 8015ea4:	08015ec1 	.word	0x08015ec1
 8015ea8:	08015ec1 	.word	0x08015ec1
 8015eac:	08015ec1 	.word	0x08015ec1
 8015eb0:	08015ec1 	.word	0x08015ec1
 8015eb4:	08015ec1 	.word	0x08015ec1
 8015eb8:	08015ec1 	.word	0x08015ec1
 8015ebc:	08015ec1 	.word	0x08015ec1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015ec0:	bf00      	nop
  }

  return (USBD_OK);
 8015ec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	370c      	adds	r7, #12
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ece:	4770      	bx	lr

08015ed0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b082      	sub	sp, #8
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
 8015ed8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015eda:	6879      	ldr	r1, [r7, #4]
 8015edc:	4805      	ldr	r0, [pc, #20]	@ (8015ef4 <CDC_Receive_FS+0x24>)
 8015ede:	f7fb fded 	bl	8011abc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015ee2:	4804      	ldr	r0, [pc, #16]	@ (8015ef4 <CDC_Receive_FS+0x24>)
 8015ee4:	f7fb fe48 	bl	8011b78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015ee8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3708      	adds	r7, #8
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	240759a4 	.word	0x240759a4

08015ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	460b      	mov	r3, r1
 8015f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015f04:	2300      	movs	r3, #0
 8015f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015f08:	4b0d      	ldr	r3, [pc, #52]	@ (8015f40 <CDC_Transmit_FS+0x48>)
 8015f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d001      	beq.n	8015f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	e00b      	b.n	8015f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015f1e:	887b      	ldrh	r3, [r7, #2]
 8015f20:	461a      	mov	r2, r3
 8015f22:	6879      	ldr	r1, [r7, #4]
 8015f24:	4806      	ldr	r0, [pc, #24]	@ (8015f40 <CDC_Transmit_FS+0x48>)
 8015f26:	f7fb fda7 	bl	8011a78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015f2a:	4805      	ldr	r0, [pc, #20]	@ (8015f40 <CDC_Transmit_FS+0x48>)
 8015f2c:	f7fb fde4 	bl	8011af8 <USBD_CDC_TransmitPacket>
 8015f30:	4603      	mov	r3, r0
 8015f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3710      	adds	r7, #16
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	240759a4 	.word	0x240759a4

08015f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015f44:	b480      	push	{r7}
 8015f46:	b087      	sub	sp, #28
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	4613      	mov	r3, r2
 8015f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015f52:	2300      	movs	r3, #0
 8015f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	371c      	adds	r7, #28
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f64:	4770      	bx	lr
	...

08015f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f68:	b480      	push	{r7}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	4603      	mov	r3, r0
 8015f70:	6039      	str	r1, [r7, #0]
 8015f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	2212      	movs	r2, #18
 8015f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015f7a:	4b03      	ldr	r3, [pc, #12]	@ (8015f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	370c      	adds	r7, #12
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr
 8015f88:	240000d4 	.word	0x240000d4

08015f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b083      	sub	sp, #12
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	4603      	mov	r3, r0
 8015f94:	6039      	str	r1, [r7, #0]
 8015f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	2204      	movs	r2, #4
 8015f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015f9e:	4b03      	ldr	r3, [pc, #12]	@ (8015fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	370c      	adds	r7, #12
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr
 8015fac:	240000e8 	.word	0x240000e8

08015fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	6039      	str	r1, [r7, #0]
 8015fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015fbc:	79fb      	ldrb	r3, [r7, #7]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d105      	bne.n	8015fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015fc2:	683a      	ldr	r2, [r7, #0]
 8015fc4:	4907      	ldr	r1, [pc, #28]	@ (8015fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8015fc6:	4808      	ldr	r0, [pc, #32]	@ (8015fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8015fc8:	f7fd f84c 	bl	8013064 <USBD_GetString>
 8015fcc:	e004      	b.n	8015fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	4904      	ldr	r1, [pc, #16]	@ (8015fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8015fd2:	4805      	ldr	r0, [pc, #20]	@ (8015fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8015fd4:	f7fd f846 	bl	8013064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015fd8:	4b02      	ldr	r3, [pc, #8]	@ (8015fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015fda:	4618      	mov	r0, r3
 8015fdc:	3708      	adds	r7, #8
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	24076c80 	.word	0x24076c80
 8015fe8:	0801a854 	.word	0x0801a854

08015fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	6039      	str	r1, [r7, #0]
 8015ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015ff8:	683a      	ldr	r2, [r7, #0]
 8015ffa:	4904      	ldr	r1, [pc, #16]	@ (801600c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015ffc:	4804      	ldr	r0, [pc, #16]	@ (8016010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015ffe:	f7fd f831 	bl	8013064 <USBD_GetString>
  return USBD_StrDesc;
 8016002:	4b02      	ldr	r3, [pc, #8]	@ (801600c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016004:	4618      	mov	r0, r3
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	24076c80 	.word	0x24076c80
 8016010:	0801a86c 	.word	0x0801a86c

08016014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	4603      	mov	r3, r0
 801601c:	6039      	str	r1, [r7, #0]
 801601e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	221a      	movs	r2, #26
 8016024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016026:	f000 f843 	bl	80160b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801602a:	4b02      	ldr	r3, [pc, #8]	@ (8016034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	240000ec 	.word	0x240000ec

08016038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
 801603e:	4603      	mov	r3, r0
 8016040:	6039      	str	r1, [r7, #0]
 8016042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016044:	79fb      	ldrb	r3, [r7, #7]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d105      	bne.n	8016056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801604a:	683a      	ldr	r2, [r7, #0]
 801604c:	4907      	ldr	r1, [pc, #28]	@ (801606c <USBD_FS_ConfigStrDescriptor+0x34>)
 801604e:	4808      	ldr	r0, [pc, #32]	@ (8016070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016050:	f7fd f808 	bl	8013064 <USBD_GetString>
 8016054:	e004      	b.n	8016060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016056:	683a      	ldr	r2, [r7, #0]
 8016058:	4904      	ldr	r1, [pc, #16]	@ (801606c <USBD_FS_ConfigStrDescriptor+0x34>)
 801605a:	4805      	ldr	r0, [pc, #20]	@ (8016070 <USBD_FS_ConfigStrDescriptor+0x38>)
 801605c:	f7fd f802 	bl	8013064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016060:	4b02      	ldr	r3, [pc, #8]	@ (801606c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016062:	4618      	mov	r0, r3
 8016064:	3708      	adds	r7, #8
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}
 801606a:	bf00      	nop
 801606c:	24076c80 	.word	0x24076c80
 8016070:	0801a880 	.word	0x0801a880

08016074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	4603      	mov	r3, r0
 801607c:	6039      	str	r1, [r7, #0]
 801607e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016080:	79fb      	ldrb	r3, [r7, #7]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d105      	bne.n	8016092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016086:	683a      	ldr	r2, [r7, #0]
 8016088:	4907      	ldr	r1, [pc, #28]	@ (80160a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801608a:	4808      	ldr	r0, [pc, #32]	@ (80160ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 801608c:	f7fc ffea 	bl	8013064 <USBD_GetString>
 8016090:	e004      	b.n	801609c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016092:	683a      	ldr	r2, [r7, #0]
 8016094:	4904      	ldr	r1, [pc, #16]	@ (80160a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016096:	4805      	ldr	r0, [pc, #20]	@ (80160ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016098:	f7fc ffe4 	bl	8013064 <USBD_GetString>
  }
  return USBD_StrDesc;
 801609c:	4b02      	ldr	r3, [pc, #8]	@ (80160a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	24076c80 	.word	0x24076c80
 80160ac:	0801a88c 	.word	0x0801a88c

080160b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80160b6:	4b0f      	ldr	r3, [pc, #60]	@ (80160f4 <Get_SerialNum+0x44>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80160bc:	4b0e      	ldr	r3, [pc, #56]	@ (80160f8 <Get_SerialNum+0x48>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80160c2:	4b0e      	ldr	r3, [pc, #56]	@ (80160fc <Get_SerialNum+0x4c>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	4413      	add	r3, r2
 80160ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d009      	beq.n	80160ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80160d6:	2208      	movs	r2, #8
 80160d8:	4909      	ldr	r1, [pc, #36]	@ (8016100 <Get_SerialNum+0x50>)
 80160da:	68f8      	ldr	r0, [r7, #12]
 80160dc:	f000 f814 	bl	8016108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80160e0:	2204      	movs	r2, #4
 80160e2:	4908      	ldr	r1, [pc, #32]	@ (8016104 <Get_SerialNum+0x54>)
 80160e4:	68b8      	ldr	r0, [r7, #8]
 80160e6:	f000 f80f 	bl	8016108 <IntToUnicode>
  }
}
 80160ea:	bf00      	nop
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	1ff1e800 	.word	0x1ff1e800
 80160f8:	1ff1e804 	.word	0x1ff1e804
 80160fc:	1ff1e808 	.word	0x1ff1e808
 8016100:	240000ee 	.word	0x240000ee
 8016104:	240000fe 	.word	0x240000fe

08016108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016108:	b480      	push	{r7}
 801610a:	b087      	sub	sp, #28
 801610c:	af00      	add	r7, sp, #0
 801610e:	60f8      	str	r0, [r7, #12]
 8016110:	60b9      	str	r1, [r7, #8]
 8016112:	4613      	mov	r3, r2
 8016114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016116:	2300      	movs	r3, #0
 8016118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801611a:	2300      	movs	r3, #0
 801611c:	75fb      	strb	r3, [r7, #23]
 801611e:	e027      	b.n	8016170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	0f1b      	lsrs	r3, r3, #28
 8016124:	2b09      	cmp	r3, #9
 8016126:	d80b      	bhi.n	8016140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	0f1b      	lsrs	r3, r3, #28
 801612c:	b2da      	uxtb	r2, r3
 801612e:	7dfb      	ldrb	r3, [r7, #23]
 8016130:	005b      	lsls	r3, r3, #1
 8016132:	4619      	mov	r1, r3
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	440b      	add	r3, r1
 8016138:	3230      	adds	r2, #48	@ 0x30
 801613a:	b2d2      	uxtb	r2, r2
 801613c:	701a      	strb	r2, [r3, #0]
 801613e:	e00a      	b.n	8016156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	0f1b      	lsrs	r3, r3, #28
 8016144:	b2da      	uxtb	r2, r3
 8016146:	7dfb      	ldrb	r3, [r7, #23]
 8016148:	005b      	lsls	r3, r3, #1
 801614a:	4619      	mov	r1, r3
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	440b      	add	r3, r1
 8016150:	3237      	adds	r2, #55	@ 0x37
 8016152:	b2d2      	uxtb	r2, r2
 8016154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	011b      	lsls	r3, r3, #4
 801615a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801615c:	7dfb      	ldrb	r3, [r7, #23]
 801615e:	005b      	lsls	r3, r3, #1
 8016160:	3301      	adds	r3, #1
 8016162:	68ba      	ldr	r2, [r7, #8]
 8016164:	4413      	add	r3, r2
 8016166:	2200      	movs	r2, #0
 8016168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801616a:	7dfb      	ldrb	r3, [r7, #23]
 801616c:	3301      	adds	r3, #1
 801616e:	75fb      	strb	r3, [r7, #23]
 8016170:	7dfa      	ldrb	r2, [r7, #23]
 8016172:	79fb      	ldrb	r3, [r7, #7]
 8016174:	429a      	cmp	r2, r3
 8016176:	d3d3      	bcc.n	8016120 <IntToUnicode+0x18>
  }
}
 8016178:	bf00      	nop
 801617a:	bf00      	nop
 801617c:	371c      	adds	r7, #28
 801617e:	46bd      	mov	sp, r7
 8016180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016184:	4770      	bx	lr
	...

08016188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b0ba      	sub	sp, #232	@ 0xe8
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016190:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016194:	2200      	movs	r2, #0
 8016196:	601a      	str	r2, [r3, #0]
 8016198:	605a      	str	r2, [r3, #4]
 801619a:	609a      	str	r2, [r3, #8]
 801619c:	60da      	str	r2, [r3, #12]
 801619e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80161a0:	f107 0310 	add.w	r3, r7, #16
 80161a4:	22c0      	movs	r2, #192	@ 0xc0
 80161a6:	2100      	movs	r1, #0
 80161a8:	4618      	mov	r0, r3
 80161aa:	f001 ff65 	bl	8018078 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	4a34      	ldr	r2, [pc, #208]	@ (8016284 <HAL_PCD_MspInit+0xfc>)
 80161b4:	4293      	cmp	r3, r2
 80161b6:	d161      	bne.n	801627c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80161b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80161bc:	f04f 0300 	mov.w	r3, #0
 80161c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80161c4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80161c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80161cc:	f107 0310 	add.w	r3, r7, #16
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7f3 fc09 	bl	80099e8 <HAL_RCCEx_PeriphCLKConfig>
 80161d6:	4603      	mov	r3, r0
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d001      	beq.n	80161e0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80161dc:	f7eb fc2e 	bl	8001a3c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80161e0:	f7f2 fb10 	bl	8008804 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161e4:	4b28      	ldr	r3, [pc, #160]	@ (8016288 <HAL_PCD_MspInit+0x100>)
 80161e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80161ea:	4a27      	ldr	r2, [pc, #156]	@ (8016288 <HAL_PCD_MspInit+0x100>)
 80161ec:	f043 0301 	orr.w	r3, r3, #1
 80161f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80161f4:	4b24      	ldr	r3, [pc, #144]	@ (8016288 <HAL_PCD_MspInit+0x100>)
 80161f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80161fa:	f003 0301 	and.w	r3, r3, #1
 80161fe:	60fb      	str	r3, [r7, #12]
 8016200:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8016202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016206:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801620a:	2300      	movs	r3, #0
 801620c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016210:	2300      	movs	r3, #0
 8016212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016216:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801621a:	4619      	mov	r1, r3
 801621c:	481b      	ldr	r0, [pc, #108]	@ (801628c <HAL_PCD_MspInit+0x104>)
 801621e:	f7ee ff91 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016222:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801622a:	2302      	movs	r3, #2
 801622c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016230:	2300      	movs	r3, #0
 8016232:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016236:	2300      	movs	r3, #0
 8016238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801623c:	230a      	movs	r3, #10
 801623e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016242:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016246:	4619      	mov	r1, r3
 8016248:	4810      	ldr	r0, [pc, #64]	@ (801628c <HAL_PCD_MspInit+0x104>)
 801624a:	f7ee ff7b 	bl	8005144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801624e:	4b0e      	ldr	r3, [pc, #56]	@ (8016288 <HAL_PCD_MspInit+0x100>)
 8016250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016254:	4a0c      	ldr	r2, [pc, #48]	@ (8016288 <HAL_PCD_MspInit+0x100>)
 8016256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801625a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801625e:	4b0a      	ldr	r3, [pc, #40]	@ (8016288 <HAL_PCD_MspInit+0x100>)
 8016260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8016264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016268:	60bb      	str	r3, [r7, #8]
 801626a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801626c:	2200      	movs	r2, #0
 801626e:	2105      	movs	r1, #5
 8016270:	2065      	movs	r0, #101	@ 0x65
 8016272:	f7ec fc93 	bl	8002b9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016276:	2065      	movs	r0, #101	@ 0x65
 8016278:	f7ec fcaa 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801627c:	bf00      	nop
 801627e:	37e8      	adds	r7, #232	@ 0xe8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}
 8016284:	40080000 	.word	0x40080000
 8016288:	58024400 	.word	0x58024400
 801628c:	58020000 	.word	0x58020000

08016290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80162a4:	4619      	mov	r1, r3
 80162a6:	4610      	mov	r0, r2
 80162a8:	f7fb fd4f 	bl	8011d4a <USBD_LL_SetupStage>
}
 80162ac:	bf00      	nop
 80162ae:	3708      	adds	r7, #8
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b082      	sub	sp, #8
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
 80162bc:	460b      	mov	r3, r1
 80162be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80162c6:	78fa      	ldrb	r2, [r7, #3]
 80162c8:	6879      	ldr	r1, [r7, #4]
 80162ca:	4613      	mov	r3, r2
 80162cc:	00db      	lsls	r3, r3, #3
 80162ce:	4413      	add	r3, r2
 80162d0:	009b      	lsls	r3, r3, #2
 80162d2:	440b      	add	r3, r1
 80162d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	78fb      	ldrb	r3, [r7, #3]
 80162dc:	4619      	mov	r1, r3
 80162de:	f7fb fd89 	bl	8011df4 <USBD_LL_DataOutStage>
}
 80162e2:	bf00      	nop
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}

080162ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162ea:	b580      	push	{r7, lr}
 80162ec:	b082      	sub	sp, #8
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	6078      	str	r0, [r7, #4]
 80162f2:	460b      	mov	r3, r1
 80162f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80162fc:	78fa      	ldrb	r2, [r7, #3]
 80162fe:	6879      	ldr	r1, [r7, #4]
 8016300:	4613      	mov	r3, r2
 8016302:	00db      	lsls	r3, r3, #3
 8016304:	4413      	add	r3, r2
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	440b      	add	r3, r1
 801630a:	3320      	adds	r3, #32
 801630c:	681a      	ldr	r2, [r3, #0]
 801630e:	78fb      	ldrb	r3, [r7, #3]
 8016310:	4619      	mov	r1, r3
 8016312:	f7fb fe22 	bl	8011f5a <USBD_LL_DataInStage>
}
 8016316:	bf00      	nop
 8016318:	3708      	adds	r7, #8
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}

0801631e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801631e:	b580      	push	{r7, lr}
 8016320:	b082      	sub	sp, #8
 8016322:	af00      	add	r7, sp, #0
 8016324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801632c:	4618      	mov	r0, r3
 801632e:	f7fb ff5c 	bl	80121ea <USBD_LL_SOF>
}
 8016332:	bf00      	nop
 8016334:	3708      	adds	r7, #8
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}

0801633a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801633a:	b580      	push	{r7, lr}
 801633c:	b084      	sub	sp, #16
 801633e:	af00      	add	r7, sp, #0
 8016340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016342:	2301      	movs	r3, #1
 8016344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	79db      	ldrb	r3, [r3, #7]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d102      	bne.n	8016354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801634e:	2300      	movs	r3, #0
 8016350:	73fb      	strb	r3, [r7, #15]
 8016352:	e008      	b.n	8016366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	79db      	ldrb	r3, [r3, #7]
 8016358:	2b02      	cmp	r3, #2
 801635a:	d102      	bne.n	8016362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801635c:	2301      	movs	r3, #1
 801635e:	73fb      	strb	r3, [r7, #15]
 8016360:	e001      	b.n	8016366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016362:	f7eb fb6b 	bl	8001a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801636c:	7bfa      	ldrb	r2, [r7, #15]
 801636e:	4611      	mov	r1, r2
 8016370:	4618      	mov	r0, r3
 8016372:	f7fb fef6 	bl	8012162 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801637c:	4618      	mov	r0, r3
 801637e:	f7fb fe9e 	bl	80120be <USBD_LL_Reset>
}
 8016382:	bf00      	nop
 8016384:	3710      	adds	r7, #16
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
	...

0801638c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801639a:	4618      	mov	r0, r3
 801639c:	f7fb fef1 	bl	8012182 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	6812      	ldr	r2, [r2, #0]
 80163ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80163b2:	f043 0301 	orr.w	r3, r3, #1
 80163b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	7adb      	ldrb	r3, [r3, #11]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d005      	beq.n	80163cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80163c0:	4b04      	ldr	r3, [pc, #16]	@ (80163d4 <HAL_PCD_SuspendCallback+0x48>)
 80163c2:	691b      	ldr	r3, [r3, #16]
 80163c4:	4a03      	ldr	r2, [pc, #12]	@ (80163d4 <HAL_PCD_SuspendCallback+0x48>)
 80163c6:	f043 0306 	orr.w	r3, r3, #6
 80163ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80163cc:	bf00      	nop
 80163ce:	3708      	adds	r7, #8
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	e000ed00 	.word	0xe000ed00

080163d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b082      	sub	sp, #8
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7fb fee7 	bl	80121ba <USBD_LL_Resume>
}
 80163ec:	bf00      	nop
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
 80163fc:	460b      	mov	r3, r1
 80163fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016406:	78fa      	ldrb	r2, [r7, #3]
 8016408:	4611      	mov	r1, r2
 801640a:	4618      	mov	r0, r3
 801640c:	f7fb ff3f 	bl	801228e <USBD_LL_IsoOUTIncomplete>
}
 8016410:	bf00      	nop
 8016412:	3708      	adds	r7, #8
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	460b      	mov	r3, r1
 8016422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801642a:	78fa      	ldrb	r2, [r7, #3]
 801642c:	4611      	mov	r1, r2
 801642e:	4618      	mov	r0, r3
 8016430:	f7fb fefb 	bl	801222a <USBD_LL_IsoINIncomplete>
}
 8016434:	bf00      	nop
 8016436:	3708      	adds	r7, #8
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801644a:	4618      	mov	r0, r3
 801644c:	f7fb ff51 	bl	80122f2 <USBD_LL_DevConnected>
}
 8016450:	bf00      	nop
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016466:	4618      	mov	r0, r3
 8016468:	f7fb ff4e 	bl	8012308 <USBD_LL_DevDisconnected>
}
 801646c:	bf00      	nop
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d13e      	bne.n	8016502 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016484:	4a21      	ldr	r2, [pc, #132]	@ (801650c <USBD_LL_Init+0x98>)
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	4a1f      	ldr	r2, [pc, #124]	@ (801650c <USBD_LL_Init+0x98>)
 8016490:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016494:	4b1d      	ldr	r3, [pc, #116]	@ (801650c <USBD_LL_Init+0x98>)
 8016496:	4a1e      	ldr	r2, [pc, #120]	@ (8016510 <USBD_LL_Init+0x9c>)
 8016498:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801649a:	4b1c      	ldr	r3, [pc, #112]	@ (801650c <USBD_LL_Init+0x98>)
 801649c:	2209      	movs	r2, #9
 801649e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80164a0:	4b1a      	ldr	r3, [pc, #104]	@ (801650c <USBD_LL_Init+0x98>)
 80164a2:	2202      	movs	r2, #2
 80164a4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80164a6:	4b19      	ldr	r3, [pc, #100]	@ (801650c <USBD_LL_Init+0x98>)
 80164a8:	2200      	movs	r2, #0
 80164aa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80164ac:	4b17      	ldr	r3, [pc, #92]	@ (801650c <USBD_LL_Init+0x98>)
 80164ae:	2202      	movs	r2, #2
 80164b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80164b2:	4b16      	ldr	r3, [pc, #88]	@ (801650c <USBD_LL_Init+0x98>)
 80164b4:	2200      	movs	r2, #0
 80164b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80164b8:	4b14      	ldr	r3, [pc, #80]	@ (801650c <USBD_LL_Init+0x98>)
 80164ba:	2200      	movs	r2, #0
 80164bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80164be:	4b13      	ldr	r3, [pc, #76]	@ (801650c <USBD_LL_Init+0x98>)
 80164c0:	2200      	movs	r2, #0
 80164c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80164c4:	4b11      	ldr	r3, [pc, #68]	@ (801650c <USBD_LL_Init+0x98>)
 80164c6:	2201      	movs	r2, #1
 80164c8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80164ca:	4b10      	ldr	r3, [pc, #64]	@ (801650c <USBD_LL_Init+0x98>)
 80164cc:	2201      	movs	r2, #1
 80164ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80164d0:	4b0e      	ldr	r3, [pc, #56]	@ (801650c <USBD_LL_Init+0x98>)
 80164d2:	2200      	movs	r2, #0
 80164d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80164d6:	480d      	ldr	r0, [pc, #52]	@ (801650c <USBD_LL_Init+0x98>)
 80164d8:	f7f0 febc 	bl	8007254 <HAL_PCD_Init>
 80164dc:	4603      	mov	r3, r0
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d001      	beq.n	80164e6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80164e2:	f7eb faab 	bl	8001a3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80164e6:	2180      	movs	r1, #128	@ 0x80
 80164e8:	4808      	ldr	r0, [pc, #32]	@ (801650c <USBD_LL_Init+0x98>)
 80164ea:	f7f2 f910 	bl	800870e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80164ee:	2240      	movs	r2, #64	@ 0x40
 80164f0:	2100      	movs	r1, #0
 80164f2:	4806      	ldr	r0, [pc, #24]	@ (801650c <USBD_LL_Init+0x98>)
 80164f4:	f7f2 f8c4 	bl	8008680 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80164f8:	2280      	movs	r2, #128	@ 0x80
 80164fa:	2101      	movs	r1, #1
 80164fc:	4803      	ldr	r0, [pc, #12]	@ (801650c <USBD_LL_Init+0x98>)
 80164fe:	f7f2 f8bf 	bl	8008680 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016502:	2300      	movs	r3, #0
}
 8016504:	4618      	mov	r0, r3
 8016506:	3708      	adds	r7, #8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}
 801650c:	24076e80 	.word	0x24076e80
 8016510:	40080000 	.word	0x40080000

08016514 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b084      	sub	sp, #16
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801651c:	2300      	movs	r3, #0
 801651e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016520:	2300      	movs	r3, #0
 8016522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801652a:	4618      	mov	r0, r3
 801652c:	f7f0 ff9e 	bl	800746c <HAL_PCD_Start>
 8016530:	4603      	mov	r3, r0
 8016532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016534:	7bfb      	ldrb	r3, [r7, #15]
 8016536:	4618      	mov	r0, r3
 8016538:	f000 f942 	bl	80167c0 <USBD_Get_USB_Status>
 801653c:	4603      	mov	r3, r0
 801653e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016540:	7bbb      	ldrb	r3, [r7, #14]
}
 8016542:	4618      	mov	r0, r3
 8016544:	3710      	adds	r7, #16
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b084      	sub	sp, #16
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
 8016552:	4608      	mov	r0, r1
 8016554:	4611      	mov	r1, r2
 8016556:	461a      	mov	r2, r3
 8016558:	4603      	mov	r3, r0
 801655a:	70fb      	strb	r3, [r7, #3]
 801655c:	460b      	mov	r3, r1
 801655e:	70bb      	strb	r3, [r7, #2]
 8016560:	4613      	mov	r3, r2
 8016562:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016564:	2300      	movs	r3, #0
 8016566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016568:	2300      	movs	r3, #0
 801656a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016572:	78bb      	ldrb	r3, [r7, #2]
 8016574:	883a      	ldrh	r2, [r7, #0]
 8016576:	78f9      	ldrb	r1, [r7, #3]
 8016578:	f7f1 fc9f 	bl	8007eba <HAL_PCD_EP_Open>
 801657c:	4603      	mov	r3, r0
 801657e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016580:	7bfb      	ldrb	r3, [r7, #15]
 8016582:	4618      	mov	r0, r3
 8016584:	f000 f91c 	bl	80167c0 <USBD_Get_USB_Status>
 8016588:	4603      	mov	r3, r0
 801658a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801658c:	7bbb      	ldrb	r3, [r7, #14]
}
 801658e:	4618      	mov	r0, r3
 8016590:	3710      	adds	r7, #16
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}

08016596 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016596:	b580      	push	{r7, lr}
 8016598:	b084      	sub	sp, #16
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
 801659e:	460b      	mov	r3, r1
 80165a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165a2:	2300      	movs	r3, #0
 80165a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165a6:	2300      	movs	r3, #0
 80165a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80165b0:	78fa      	ldrb	r2, [r7, #3]
 80165b2:	4611      	mov	r1, r2
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7f1 fce8 	bl	8007f8a <HAL_PCD_EP_Close>
 80165ba:	4603      	mov	r3, r0
 80165bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165be:	7bfb      	ldrb	r3, [r7, #15]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f000 f8fd 	bl	80167c0 <USBD_Get_USB_Status>
 80165c6:	4603      	mov	r3, r0
 80165c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3710      	adds	r7, #16
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165e0:	2300      	movs	r3, #0
 80165e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80165ee:	78fa      	ldrb	r2, [r7, #3]
 80165f0:	4611      	mov	r1, r2
 80165f2:	4618      	mov	r0, r3
 80165f4:	f7f1 fda0 	bl	8008138 <HAL_PCD_EP_SetStall>
 80165f8:	4603      	mov	r3, r0
 80165fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165fc:	7bfb      	ldrb	r3, [r7, #15]
 80165fe:	4618      	mov	r0, r3
 8016600:	f000 f8de 	bl	80167c0 <USBD_Get_USB_Status>
 8016604:	4603      	mov	r3, r0
 8016606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016608:	7bbb      	ldrb	r3, [r7, #14]
}
 801660a:	4618      	mov	r0, r3
 801660c:	3710      	adds	r7, #16
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}

08016612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016612:	b580      	push	{r7, lr}
 8016614:	b084      	sub	sp, #16
 8016616:	af00      	add	r7, sp, #0
 8016618:	6078      	str	r0, [r7, #4]
 801661a:	460b      	mov	r3, r1
 801661c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801661e:	2300      	movs	r3, #0
 8016620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016622:	2300      	movs	r3, #0
 8016624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801662c:	78fa      	ldrb	r2, [r7, #3]
 801662e:	4611      	mov	r1, r2
 8016630:	4618      	mov	r0, r3
 8016632:	f7f1 fde4 	bl	80081fe <HAL_PCD_EP_ClrStall>
 8016636:	4603      	mov	r3, r0
 8016638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801663a:	7bfb      	ldrb	r3, [r7, #15]
 801663c:	4618      	mov	r0, r3
 801663e:	f000 f8bf 	bl	80167c0 <USBD_Get_USB_Status>
 8016642:	4603      	mov	r3, r0
 8016644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016646:	7bbb      	ldrb	r3, [r7, #14]
}
 8016648:	4618      	mov	r0, r3
 801664a:	3710      	adds	r7, #16
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}

08016650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016650:	b480      	push	{r7}
 8016652:	b085      	sub	sp, #20
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
 8016658:	460b      	mov	r3, r1
 801665a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016662:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016668:	2b00      	cmp	r3, #0
 801666a:	da0b      	bge.n	8016684 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801666c:	78fb      	ldrb	r3, [r7, #3]
 801666e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016672:	68f9      	ldr	r1, [r7, #12]
 8016674:	4613      	mov	r3, r2
 8016676:	00db      	lsls	r3, r3, #3
 8016678:	4413      	add	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	440b      	add	r3, r1
 801667e:	3316      	adds	r3, #22
 8016680:	781b      	ldrb	r3, [r3, #0]
 8016682:	e00b      	b.n	801669c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016684:	78fb      	ldrb	r3, [r7, #3]
 8016686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801668a:	68f9      	ldr	r1, [r7, #12]
 801668c:	4613      	mov	r3, r2
 801668e:	00db      	lsls	r3, r3, #3
 8016690:	4413      	add	r3, r2
 8016692:	009b      	lsls	r3, r3, #2
 8016694:	440b      	add	r3, r1
 8016696:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801669a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801669c:	4618      	mov	r0, r3
 801669e:	3714      	adds	r7, #20
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr

080166a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b084      	sub	sp, #16
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	460b      	mov	r3, r1
 80166b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166b4:	2300      	movs	r3, #0
 80166b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166b8:	2300      	movs	r3, #0
 80166ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80166c2:	78fa      	ldrb	r2, [r7, #3]
 80166c4:	4611      	mov	r1, r2
 80166c6:	4618      	mov	r0, r3
 80166c8:	f7f1 fbd3 	bl	8007e72 <HAL_PCD_SetAddress>
 80166cc:	4603      	mov	r3, r0
 80166ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166d0:	7bfb      	ldrb	r3, [r7, #15]
 80166d2:	4618      	mov	r0, r3
 80166d4:	f000 f874 	bl	80167c0 <USBD_Get_USB_Status>
 80166d8:	4603      	mov	r3, r0
 80166da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80166dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80166de:	4618      	mov	r0, r3
 80166e0:	3710      	adds	r7, #16
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}

080166e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80166e6:	b580      	push	{r7, lr}
 80166e8:	b086      	sub	sp, #24
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	60f8      	str	r0, [r7, #12]
 80166ee:	607a      	str	r2, [r7, #4]
 80166f0:	603b      	str	r3, [r7, #0]
 80166f2:	460b      	mov	r3, r1
 80166f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166f6:	2300      	movs	r3, #0
 80166f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166fa:	2300      	movs	r3, #0
 80166fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016704:	7af9      	ldrb	r1, [r7, #11]
 8016706:	683b      	ldr	r3, [r7, #0]
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	f7f1 fcdb 	bl	80080c4 <HAL_PCD_EP_Transmit>
 801670e:	4603      	mov	r3, r0
 8016710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016712:	7dfb      	ldrb	r3, [r7, #23]
 8016714:	4618      	mov	r0, r3
 8016716:	f000 f853 	bl	80167c0 <USBD_Get_USB_Status>
 801671a:	4603      	mov	r3, r0
 801671c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801671e:	7dbb      	ldrb	r3, [r7, #22]
}
 8016720:	4618      	mov	r0, r3
 8016722:	3718      	adds	r7, #24
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}

08016728 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b086      	sub	sp, #24
 801672c:	af00      	add	r7, sp, #0
 801672e:	60f8      	str	r0, [r7, #12]
 8016730:	607a      	str	r2, [r7, #4]
 8016732:	603b      	str	r3, [r7, #0]
 8016734:	460b      	mov	r3, r1
 8016736:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016738:	2300      	movs	r3, #0
 801673a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801673c:	2300      	movs	r3, #0
 801673e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016746:	7af9      	ldrb	r1, [r7, #11]
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	687a      	ldr	r2, [r7, #4]
 801674c:	f7f1 fc67 	bl	800801e <HAL_PCD_EP_Receive>
 8016750:	4603      	mov	r3, r0
 8016752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016754:	7dfb      	ldrb	r3, [r7, #23]
 8016756:	4618      	mov	r0, r3
 8016758:	f000 f832 	bl	80167c0 <USBD_Get_USB_Status>
 801675c:	4603      	mov	r3, r0
 801675e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016760:	7dbb      	ldrb	r3, [r7, #22]
}
 8016762:	4618      	mov	r0, r3
 8016764:	3718      	adds	r7, #24
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}

0801676a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801676a:	b580      	push	{r7, lr}
 801676c:	b082      	sub	sp, #8
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]
 8016772:	460b      	mov	r3, r1
 8016774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801677c:	78fa      	ldrb	r2, [r7, #3]
 801677e:	4611      	mov	r1, r2
 8016780:	4618      	mov	r0, r3
 8016782:	f7f1 fc87 	bl	8008094 <HAL_PCD_EP_GetRxCount>
 8016786:	4603      	mov	r3, r0
}
 8016788:	4618      	mov	r0, r3
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}

08016790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016790:	b480      	push	{r7}
 8016792:	b083      	sub	sp, #12
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016798:	4b03      	ldr	r3, [pc, #12]	@ (80167a8 <USBD_static_malloc+0x18>)
}
 801679a:	4618      	mov	r0, r3
 801679c:	370c      	adds	r7, #12
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop
 80167a8:	24077364 	.word	0x24077364

080167ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80167b4:	bf00      	nop
 80167b6:	370c      	adds	r7, #12
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr

080167c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80167c0:	b480      	push	{r7}
 80167c2:	b085      	sub	sp, #20
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	4603      	mov	r3, r0
 80167c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167ca:	2300      	movs	r3, #0
 80167cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80167ce:	79fb      	ldrb	r3, [r7, #7]
 80167d0:	2b03      	cmp	r3, #3
 80167d2:	d817      	bhi.n	8016804 <USBD_Get_USB_Status+0x44>
 80167d4:	a201      	add	r2, pc, #4	@ (adr r2, 80167dc <USBD_Get_USB_Status+0x1c>)
 80167d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167da:	bf00      	nop
 80167dc:	080167ed 	.word	0x080167ed
 80167e0:	080167f3 	.word	0x080167f3
 80167e4:	080167f9 	.word	0x080167f9
 80167e8:	080167ff 	.word	0x080167ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80167ec:	2300      	movs	r3, #0
 80167ee:	73fb      	strb	r3, [r7, #15]
    break;
 80167f0:	e00b      	b.n	801680a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80167f2:	2303      	movs	r3, #3
 80167f4:	73fb      	strb	r3, [r7, #15]
    break;
 80167f6:	e008      	b.n	801680a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80167f8:	2301      	movs	r3, #1
 80167fa:	73fb      	strb	r3, [r7, #15]
    break;
 80167fc:	e005      	b.n	801680a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80167fe:	2303      	movs	r3, #3
 8016800:	73fb      	strb	r3, [r7, #15]
    break;
 8016802:	e002      	b.n	801680a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016804:	2303      	movs	r3, #3
 8016806:	73fb      	strb	r3, [r7, #15]
    break;
 8016808:	bf00      	nop
  }
  return usb_status;
 801680a:	7bfb      	ldrb	r3, [r7, #15]
}
 801680c:	4618      	mov	r0, r3
 801680e:	3714      	adds	r7, #20
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr

08016818 <atof>:
 8016818:	2100      	movs	r1, #0
 801681a:	f000 be79 	b.w	8017510 <strtod>

0801681e <atoi>:
 801681e:	220a      	movs	r2, #10
 8016820:	2100      	movs	r1, #0
 8016822:	f000 befd 	b.w	8017620 <strtol>
	...

08016828 <malloc>:
 8016828:	4b02      	ldr	r3, [pc, #8]	@ (8016834 <malloc+0xc>)
 801682a:	4601      	mov	r1, r0
 801682c:	6818      	ldr	r0, [r3, #0]
 801682e:	f000 b82d 	b.w	801688c <_malloc_r>
 8016832:	bf00      	nop
 8016834:	24000280 	.word	0x24000280

08016838 <free>:
 8016838:	4b02      	ldr	r3, [pc, #8]	@ (8016844 <free+0xc>)
 801683a:	4601      	mov	r1, r0
 801683c:	6818      	ldr	r0, [r3, #0]
 801683e:	f001 bdc3 	b.w	80183c8 <_free_r>
 8016842:	bf00      	nop
 8016844:	24000280 	.word	0x24000280

08016848 <sbrk_aligned>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	4e0f      	ldr	r6, [pc, #60]	@ (8016888 <sbrk_aligned+0x40>)
 801684c:	460c      	mov	r4, r1
 801684e:	6831      	ldr	r1, [r6, #0]
 8016850:	4605      	mov	r5, r0
 8016852:	b911      	cbnz	r1, 801685a <sbrk_aligned+0x12>
 8016854:	f001 fd2c 	bl	80182b0 <_sbrk_r>
 8016858:	6030      	str	r0, [r6, #0]
 801685a:	4621      	mov	r1, r4
 801685c:	4628      	mov	r0, r5
 801685e:	f001 fd27 	bl	80182b0 <_sbrk_r>
 8016862:	1c43      	adds	r3, r0, #1
 8016864:	d103      	bne.n	801686e <sbrk_aligned+0x26>
 8016866:	f04f 34ff 	mov.w	r4, #4294967295
 801686a:	4620      	mov	r0, r4
 801686c:	bd70      	pop	{r4, r5, r6, pc}
 801686e:	1cc4      	adds	r4, r0, #3
 8016870:	f024 0403 	bic.w	r4, r4, #3
 8016874:	42a0      	cmp	r0, r4
 8016876:	d0f8      	beq.n	801686a <sbrk_aligned+0x22>
 8016878:	1a21      	subs	r1, r4, r0
 801687a:	4628      	mov	r0, r5
 801687c:	f001 fd18 	bl	80182b0 <_sbrk_r>
 8016880:	3001      	adds	r0, #1
 8016882:	d1f2      	bne.n	801686a <sbrk_aligned+0x22>
 8016884:	e7ef      	b.n	8016866 <sbrk_aligned+0x1e>
 8016886:	bf00      	nop
 8016888:	24077584 	.word	0x24077584

0801688c <_malloc_r>:
 801688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016890:	1ccd      	adds	r5, r1, #3
 8016892:	f025 0503 	bic.w	r5, r5, #3
 8016896:	3508      	adds	r5, #8
 8016898:	2d0c      	cmp	r5, #12
 801689a:	bf38      	it	cc
 801689c:	250c      	movcc	r5, #12
 801689e:	2d00      	cmp	r5, #0
 80168a0:	4606      	mov	r6, r0
 80168a2:	db01      	blt.n	80168a8 <_malloc_r+0x1c>
 80168a4:	42a9      	cmp	r1, r5
 80168a6:	d904      	bls.n	80168b2 <_malloc_r+0x26>
 80168a8:	230c      	movs	r3, #12
 80168aa:	6033      	str	r3, [r6, #0]
 80168ac:	2000      	movs	r0, #0
 80168ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016988 <_malloc_r+0xfc>
 80168b6:	f000 f869 	bl	801698c <__malloc_lock>
 80168ba:	f8d8 3000 	ldr.w	r3, [r8]
 80168be:	461c      	mov	r4, r3
 80168c0:	bb44      	cbnz	r4, 8016914 <_malloc_r+0x88>
 80168c2:	4629      	mov	r1, r5
 80168c4:	4630      	mov	r0, r6
 80168c6:	f7ff ffbf 	bl	8016848 <sbrk_aligned>
 80168ca:	1c43      	adds	r3, r0, #1
 80168cc:	4604      	mov	r4, r0
 80168ce:	d158      	bne.n	8016982 <_malloc_r+0xf6>
 80168d0:	f8d8 4000 	ldr.w	r4, [r8]
 80168d4:	4627      	mov	r7, r4
 80168d6:	2f00      	cmp	r7, #0
 80168d8:	d143      	bne.n	8016962 <_malloc_r+0xd6>
 80168da:	2c00      	cmp	r4, #0
 80168dc:	d04b      	beq.n	8016976 <_malloc_r+0xea>
 80168de:	6823      	ldr	r3, [r4, #0]
 80168e0:	4639      	mov	r1, r7
 80168e2:	4630      	mov	r0, r6
 80168e4:	eb04 0903 	add.w	r9, r4, r3
 80168e8:	f001 fce2 	bl	80182b0 <_sbrk_r>
 80168ec:	4581      	cmp	r9, r0
 80168ee:	d142      	bne.n	8016976 <_malloc_r+0xea>
 80168f0:	6821      	ldr	r1, [r4, #0]
 80168f2:	1a6d      	subs	r5, r5, r1
 80168f4:	4629      	mov	r1, r5
 80168f6:	4630      	mov	r0, r6
 80168f8:	f7ff ffa6 	bl	8016848 <sbrk_aligned>
 80168fc:	3001      	adds	r0, #1
 80168fe:	d03a      	beq.n	8016976 <_malloc_r+0xea>
 8016900:	6823      	ldr	r3, [r4, #0]
 8016902:	442b      	add	r3, r5
 8016904:	6023      	str	r3, [r4, #0]
 8016906:	f8d8 3000 	ldr.w	r3, [r8]
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	bb62      	cbnz	r2, 8016968 <_malloc_r+0xdc>
 801690e:	f8c8 7000 	str.w	r7, [r8]
 8016912:	e00f      	b.n	8016934 <_malloc_r+0xa8>
 8016914:	6822      	ldr	r2, [r4, #0]
 8016916:	1b52      	subs	r2, r2, r5
 8016918:	d420      	bmi.n	801695c <_malloc_r+0xd0>
 801691a:	2a0b      	cmp	r2, #11
 801691c:	d917      	bls.n	801694e <_malloc_r+0xc2>
 801691e:	1961      	adds	r1, r4, r5
 8016920:	42a3      	cmp	r3, r4
 8016922:	6025      	str	r5, [r4, #0]
 8016924:	bf18      	it	ne
 8016926:	6059      	strne	r1, [r3, #4]
 8016928:	6863      	ldr	r3, [r4, #4]
 801692a:	bf08      	it	eq
 801692c:	f8c8 1000 	streq.w	r1, [r8]
 8016930:	5162      	str	r2, [r4, r5]
 8016932:	604b      	str	r3, [r1, #4]
 8016934:	4630      	mov	r0, r6
 8016936:	f000 f82f 	bl	8016998 <__malloc_unlock>
 801693a:	f104 000b 	add.w	r0, r4, #11
 801693e:	1d23      	adds	r3, r4, #4
 8016940:	f020 0007 	bic.w	r0, r0, #7
 8016944:	1ac2      	subs	r2, r0, r3
 8016946:	bf1c      	itt	ne
 8016948:	1a1b      	subne	r3, r3, r0
 801694a:	50a3      	strne	r3, [r4, r2]
 801694c:	e7af      	b.n	80168ae <_malloc_r+0x22>
 801694e:	6862      	ldr	r2, [r4, #4]
 8016950:	42a3      	cmp	r3, r4
 8016952:	bf0c      	ite	eq
 8016954:	f8c8 2000 	streq.w	r2, [r8]
 8016958:	605a      	strne	r2, [r3, #4]
 801695a:	e7eb      	b.n	8016934 <_malloc_r+0xa8>
 801695c:	4623      	mov	r3, r4
 801695e:	6864      	ldr	r4, [r4, #4]
 8016960:	e7ae      	b.n	80168c0 <_malloc_r+0x34>
 8016962:	463c      	mov	r4, r7
 8016964:	687f      	ldr	r7, [r7, #4]
 8016966:	e7b6      	b.n	80168d6 <_malloc_r+0x4a>
 8016968:	461a      	mov	r2, r3
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	42a3      	cmp	r3, r4
 801696e:	d1fb      	bne.n	8016968 <_malloc_r+0xdc>
 8016970:	2300      	movs	r3, #0
 8016972:	6053      	str	r3, [r2, #4]
 8016974:	e7de      	b.n	8016934 <_malloc_r+0xa8>
 8016976:	230c      	movs	r3, #12
 8016978:	6033      	str	r3, [r6, #0]
 801697a:	4630      	mov	r0, r6
 801697c:	f000 f80c 	bl	8016998 <__malloc_unlock>
 8016980:	e794      	b.n	80168ac <_malloc_r+0x20>
 8016982:	6005      	str	r5, [r0, #0]
 8016984:	e7d6      	b.n	8016934 <_malloc_r+0xa8>
 8016986:	bf00      	nop
 8016988:	24077588 	.word	0x24077588

0801698c <__malloc_lock>:
 801698c:	4801      	ldr	r0, [pc, #4]	@ (8016994 <__malloc_lock+0x8>)
 801698e:	f001 bcdc 	b.w	801834a <__retarget_lock_acquire_recursive>
 8016992:	bf00      	nop
 8016994:	240776cc 	.word	0x240776cc

08016998 <__malloc_unlock>:
 8016998:	4801      	ldr	r0, [pc, #4]	@ (80169a0 <__malloc_unlock+0x8>)
 801699a:	f001 bcd7 	b.w	801834c <__retarget_lock_release_recursive>
 801699e:	bf00      	nop
 80169a0:	240776cc 	.word	0x240776cc

080169a4 <sulp>:
 80169a4:	b570      	push	{r4, r5, r6, lr}
 80169a6:	4604      	mov	r4, r0
 80169a8:	460d      	mov	r5, r1
 80169aa:	4616      	mov	r6, r2
 80169ac:	ec45 4b10 	vmov	d0, r4, r5
 80169b0:	f002 fc14 	bl	80191dc <__ulp>
 80169b4:	b17e      	cbz	r6, 80169d6 <sulp+0x32>
 80169b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80169ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80169be:	2b00      	cmp	r3, #0
 80169c0:	dd09      	ble.n	80169d6 <sulp+0x32>
 80169c2:	051b      	lsls	r3, r3, #20
 80169c4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80169c8:	2000      	movs	r0, #0
 80169ca:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80169ce:	ec41 0b17 	vmov	d7, r0, r1
 80169d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80169d6:	bd70      	pop	{r4, r5, r6, pc}

080169d8 <_strtod_l>:
 80169d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169dc:	ed2d 8b0a 	vpush	{d8-d12}
 80169e0:	b097      	sub	sp, #92	@ 0x5c
 80169e2:	4688      	mov	r8, r1
 80169e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80169e6:	2200      	movs	r2, #0
 80169e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80169ea:	9005      	str	r0, [sp, #20]
 80169ec:	f04f 0a00 	mov.w	sl, #0
 80169f0:	f04f 0b00 	mov.w	fp, #0
 80169f4:	460a      	mov	r2, r1
 80169f6:	9211      	str	r2, [sp, #68]	@ 0x44
 80169f8:	7811      	ldrb	r1, [r2, #0]
 80169fa:	292b      	cmp	r1, #43	@ 0x2b
 80169fc:	d04c      	beq.n	8016a98 <_strtod_l+0xc0>
 80169fe:	d839      	bhi.n	8016a74 <_strtod_l+0x9c>
 8016a00:	290d      	cmp	r1, #13
 8016a02:	d833      	bhi.n	8016a6c <_strtod_l+0x94>
 8016a04:	2908      	cmp	r1, #8
 8016a06:	d833      	bhi.n	8016a70 <_strtod_l+0x98>
 8016a08:	2900      	cmp	r1, #0
 8016a0a:	d03c      	beq.n	8016a86 <_strtod_l+0xae>
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	9208      	str	r2, [sp, #32]
 8016a10:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016a12:	782a      	ldrb	r2, [r5, #0]
 8016a14:	2a30      	cmp	r2, #48	@ 0x30
 8016a16:	f040 80b5 	bne.w	8016b84 <_strtod_l+0x1ac>
 8016a1a:	786a      	ldrb	r2, [r5, #1]
 8016a1c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016a20:	2a58      	cmp	r2, #88	@ 0x58
 8016a22:	d170      	bne.n	8016b06 <_strtod_l+0x12e>
 8016a24:	9302      	str	r3, [sp, #8]
 8016a26:	9b08      	ldr	r3, [sp, #32]
 8016a28:	9301      	str	r3, [sp, #4]
 8016a2a:	ab12      	add	r3, sp, #72	@ 0x48
 8016a2c:	9300      	str	r3, [sp, #0]
 8016a2e:	4a8b      	ldr	r2, [pc, #556]	@ (8016c5c <_strtod_l+0x284>)
 8016a30:	9805      	ldr	r0, [sp, #20]
 8016a32:	ab13      	add	r3, sp, #76	@ 0x4c
 8016a34:	a911      	add	r1, sp, #68	@ 0x44
 8016a36:	f001 fd79 	bl	801852c <__gethex>
 8016a3a:	f010 060f 	ands.w	r6, r0, #15
 8016a3e:	4604      	mov	r4, r0
 8016a40:	d005      	beq.n	8016a4e <_strtod_l+0x76>
 8016a42:	2e06      	cmp	r6, #6
 8016a44:	d12a      	bne.n	8016a9c <_strtod_l+0xc4>
 8016a46:	3501      	adds	r5, #1
 8016a48:	2300      	movs	r3, #0
 8016a4a:	9511      	str	r5, [sp, #68]	@ 0x44
 8016a4c:	9308      	str	r3, [sp, #32]
 8016a4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	f040 852f 	bne.w	80174b4 <_strtod_l+0xadc>
 8016a56:	9b08      	ldr	r3, [sp, #32]
 8016a58:	ec4b ab10 	vmov	d0, sl, fp
 8016a5c:	b1cb      	cbz	r3, 8016a92 <_strtod_l+0xba>
 8016a5e:	eeb1 0b40 	vneg.f64	d0, d0
 8016a62:	b017      	add	sp, #92	@ 0x5c
 8016a64:	ecbd 8b0a 	vpop	{d8-d12}
 8016a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a6c:	2920      	cmp	r1, #32
 8016a6e:	d1cd      	bne.n	8016a0c <_strtod_l+0x34>
 8016a70:	3201      	adds	r2, #1
 8016a72:	e7c0      	b.n	80169f6 <_strtod_l+0x1e>
 8016a74:	292d      	cmp	r1, #45	@ 0x2d
 8016a76:	d1c9      	bne.n	8016a0c <_strtod_l+0x34>
 8016a78:	2101      	movs	r1, #1
 8016a7a:	9108      	str	r1, [sp, #32]
 8016a7c:	1c51      	adds	r1, r2, #1
 8016a7e:	9111      	str	r1, [sp, #68]	@ 0x44
 8016a80:	7852      	ldrb	r2, [r2, #1]
 8016a82:	2a00      	cmp	r2, #0
 8016a84:	d1c4      	bne.n	8016a10 <_strtod_l+0x38>
 8016a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a88:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f040 850f 	bne.w	80174b0 <_strtod_l+0xad8>
 8016a92:	ec4b ab10 	vmov	d0, sl, fp
 8016a96:	e7e4      	b.n	8016a62 <_strtod_l+0x8a>
 8016a98:	2100      	movs	r1, #0
 8016a9a:	e7ee      	b.n	8016a7a <_strtod_l+0xa2>
 8016a9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016a9e:	b13a      	cbz	r2, 8016ab0 <_strtod_l+0xd8>
 8016aa0:	2135      	movs	r1, #53	@ 0x35
 8016aa2:	a814      	add	r0, sp, #80	@ 0x50
 8016aa4:	f002 fc91 	bl	80193ca <__copybits>
 8016aa8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016aaa:	9805      	ldr	r0, [sp, #20]
 8016aac:	f002 f862 	bl	8018b74 <_Bfree>
 8016ab0:	1e73      	subs	r3, r6, #1
 8016ab2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016ab4:	2b04      	cmp	r3, #4
 8016ab6:	d806      	bhi.n	8016ac6 <_strtod_l+0xee>
 8016ab8:	e8df f003 	tbb	[pc, r3]
 8016abc:	201d0314 	.word	0x201d0314
 8016ac0:	14          	.byte	0x14
 8016ac1:	00          	.byte	0x00
 8016ac2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016ac6:	05e3      	lsls	r3, r4, #23
 8016ac8:	bf48      	it	mi
 8016aca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016ace:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016ad2:	0d1b      	lsrs	r3, r3, #20
 8016ad4:	051b      	lsls	r3, r3, #20
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d1b9      	bne.n	8016a4e <_strtod_l+0x76>
 8016ada:	f001 fc0b 	bl	80182f4 <__errno>
 8016ade:	2322      	movs	r3, #34	@ 0x22
 8016ae0:	6003      	str	r3, [r0, #0]
 8016ae2:	e7b4      	b.n	8016a4e <_strtod_l+0x76>
 8016ae4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016ae8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016aec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016af0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016af4:	e7e7      	b.n	8016ac6 <_strtod_l+0xee>
 8016af6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016c64 <_strtod_l+0x28c>
 8016afa:	e7e4      	b.n	8016ac6 <_strtod_l+0xee>
 8016afc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016b00:	f04f 3aff 	mov.w	sl, #4294967295
 8016b04:	e7df      	b.n	8016ac6 <_strtod_l+0xee>
 8016b06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b08:	1c5a      	adds	r2, r3, #1
 8016b0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016b0c:	785b      	ldrb	r3, [r3, #1]
 8016b0e:	2b30      	cmp	r3, #48	@ 0x30
 8016b10:	d0f9      	beq.n	8016b06 <_strtod_l+0x12e>
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d09b      	beq.n	8016a4e <_strtod_l+0x76>
 8016b16:	2301      	movs	r3, #1
 8016b18:	2600      	movs	r6, #0
 8016b1a:	9307      	str	r3, [sp, #28]
 8016b1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016b20:	46b1      	mov	r9, r6
 8016b22:	4635      	mov	r5, r6
 8016b24:	220a      	movs	r2, #10
 8016b26:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016b28:	7804      	ldrb	r4, [r0, #0]
 8016b2a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016b2e:	b2d9      	uxtb	r1, r3
 8016b30:	2909      	cmp	r1, #9
 8016b32:	d929      	bls.n	8016b88 <_strtod_l+0x1b0>
 8016b34:	494a      	ldr	r1, [pc, #296]	@ (8016c60 <_strtod_l+0x288>)
 8016b36:	2201      	movs	r2, #1
 8016b38:	f001 fac1 	bl	80180be <strncmp>
 8016b3c:	b378      	cbz	r0, 8016b9e <_strtod_l+0x1c6>
 8016b3e:	2000      	movs	r0, #0
 8016b40:	4622      	mov	r2, r4
 8016b42:	462b      	mov	r3, r5
 8016b44:	4607      	mov	r7, r0
 8016b46:	9006      	str	r0, [sp, #24]
 8016b48:	2a65      	cmp	r2, #101	@ 0x65
 8016b4a:	d001      	beq.n	8016b50 <_strtod_l+0x178>
 8016b4c:	2a45      	cmp	r2, #69	@ 0x45
 8016b4e:	d117      	bne.n	8016b80 <_strtod_l+0x1a8>
 8016b50:	b91b      	cbnz	r3, 8016b5a <_strtod_l+0x182>
 8016b52:	9b07      	ldr	r3, [sp, #28]
 8016b54:	4303      	orrs	r3, r0
 8016b56:	d096      	beq.n	8016a86 <_strtod_l+0xae>
 8016b58:	2300      	movs	r3, #0
 8016b5a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016b5e:	f108 0201 	add.w	r2, r8, #1
 8016b62:	9211      	str	r2, [sp, #68]	@ 0x44
 8016b64:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016b68:	2a2b      	cmp	r2, #43	@ 0x2b
 8016b6a:	d06b      	beq.n	8016c44 <_strtod_l+0x26c>
 8016b6c:	2a2d      	cmp	r2, #45	@ 0x2d
 8016b6e:	d071      	beq.n	8016c54 <_strtod_l+0x27c>
 8016b70:	f04f 0e00 	mov.w	lr, #0
 8016b74:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016b78:	2c09      	cmp	r4, #9
 8016b7a:	d979      	bls.n	8016c70 <_strtod_l+0x298>
 8016b7c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016b80:	2400      	movs	r4, #0
 8016b82:	e094      	b.n	8016cae <_strtod_l+0x2d6>
 8016b84:	2300      	movs	r3, #0
 8016b86:	e7c7      	b.n	8016b18 <_strtod_l+0x140>
 8016b88:	2d08      	cmp	r5, #8
 8016b8a:	f100 0001 	add.w	r0, r0, #1
 8016b8e:	bfd4      	ite	le
 8016b90:	fb02 3909 	mlale	r9, r2, r9, r3
 8016b94:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016b98:	3501      	adds	r5, #1
 8016b9a:	9011      	str	r0, [sp, #68]	@ 0x44
 8016b9c:	e7c3      	b.n	8016b26 <_strtod_l+0x14e>
 8016b9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ba0:	1c5a      	adds	r2, r3, #1
 8016ba2:	9211      	str	r2, [sp, #68]	@ 0x44
 8016ba4:	785a      	ldrb	r2, [r3, #1]
 8016ba6:	b375      	cbz	r5, 8016c06 <_strtod_l+0x22e>
 8016ba8:	4607      	mov	r7, r0
 8016baa:	462b      	mov	r3, r5
 8016bac:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016bb0:	2909      	cmp	r1, #9
 8016bb2:	d913      	bls.n	8016bdc <_strtod_l+0x204>
 8016bb4:	2101      	movs	r1, #1
 8016bb6:	9106      	str	r1, [sp, #24]
 8016bb8:	e7c6      	b.n	8016b48 <_strtod_l+0x170>
 8016bba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016bbc:	1c5a      	adds	r2, r3, #1
 8016bbe:	9211      	str	r2, [sp, #68]	@ 0x44
 8016bc0:	785a      	ldrb	r2, [r3, #1]
 8016bc2:	3001      	adds	r0, #1
 8016bc4:	2a30      	cmp	r2, #48	@ 0x30
 8016bc6:	d0f8      	beq.n	8016bba <_strtod_l+0x1e2>
 8016bc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016bcc:	2b08      	cmp	r3, #8
 8016bce:	f200 8476 	bhi.w	80174be <_strtod_l+0xae6>
 8016bd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8016bd6:	4607      	mov	r7, r0
 8016bd8:	2000      	movs	r0, #0
 8016bda:	4603      	mov	r3, r0
 8016bdc:	3a30      	subs	r2, #48	@ 0x30
 8016bde:	f100 0101 	add.w	r1, r0, #1
 8016be2:	d023      	beq.n	8016c2c <_strtod_l+0x254>
 8016be4:	440f      	add	r7, r1
 8016be6:	eb00 0c03 	add.w	ip, r0, r3
 8016bea:	4619      	mov	r1, r3
 8016bec:	240a      	movs	r4, #10
 8016bee:	4561      	cmp	r1, ip
 8016bf0:	d10b      	bne.n	8016c0a <_strtod_l+0x232>
 8016bf2:	1c5c      	adds	r4, r3, #1
 8016bf4:	4403      	add	r3, r0
 8016bf6:	2b08      	cmp	r3, #8
 8016bf8:	4404      	add	r4, r0
 8016bfa:	dc11      	bgt.n	8016c20 <_strtod_l+0x248>
 8016bfc:	230a      	movs	r3, #10
 8016bfe:	fb03 2909 	mla	r9, r3, r9, r2
 8016c02:	2100      	movs	r1, #0
 8016c04:	e013      	b.n	8016c2e <_strtod_l+0x256>
 8016c06:	4628      	mov	r0, r5
 8016c08:	e7dc      	b.n	8016bc4 <_strtod_l+0x1ec>
 8016c0a:	2908      	cmp	r1, #8
 8016c0c:	f101 0101 	add.w	r1, r1, #1
 8016c10:	dc02      	bgt.n	8016c18 <_strtod_l+0x240>
 8016c12:	fb04 f909 	mul.w	r9, r4, r9
 8016c16:	e7ea      	b.n	8016bee <_strtod_l+0x216>
 8016c18:	2910      	cmp	r1, #16
 8016c1a:	bfd8      	it	le
 8016c1c:	4366      	mulle	r6, r4
 8016c1e:	e7e6      	b.n	8016bee <_strtod_l+0x216>
 8016c20:	2b0f      	cmp	r3, #15
 8016c22:	dcee      	bgt.n	8016c02 <_strtod_l+0x22a>
 8016c24:	230a      	movs	r3, #10
 8016c26:	fb03 2606 	mla	r6, r3, r6, r2
 8016c2a:	e7ea      	b.n	8016c02 <_strtod_l+0x22a>
 8016c2c:	461c      	mov	r4, r3
 8016c2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c30:	1c5a      	adds	r2, r3, #1
 8016c32:	9211      	str	r2, [sp, #68]	@ 0x44
 8016c34:	785a      	ldrb	r2, [r3, #1]
 8016c36:	4608      	mov	r0, r1
 8016c38:	4623      	mov	r3, r4
 8016c3a:	e7b7      	b.n	8016bac <_strtod_l+0x1d4>
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	2700      	movs	r7, #0
 8016c40:	9306      	str	r3, [sp, #24]
 8016c42:	e786      	b.n	8016b52 <_strtod_l+0x17a>
 8016c44:	f04f 0e00 	mov.w	lr, #0
 8016c48:	f108 0202 	add.w	r2, r8, #2
 8016c4c:	9211      	str	r2, [sp, #68]	@ 0x44
 8016c4e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016c52:	e78f      	b.n	8016b74 <_strtod_l+0x19c>
 8016c54:	f04f 0e01 	mov.w	lr, #1
 8016c58:	e7f6      	b.n	8016c48 <_strtod_l+0x270>
 8016c5a:	bf00      	nop
 8016c5c:	0801a930 	.word	0x0801a930
 8016c60:	0801a90c 	.word	0x0801a90c
 8016c64:	7ff00000 	.word	0x7ff00000
 8016c68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016c6a:	1c54      	adds	r4, r2, #1
 8016c6c:	9411      	str	r4, [sp, #68]	@ 0x44
 8016c6e:	7852      	ldrb	r2, [r2, #1]
 8016c70:	2a30      	cmp	r2, #48	@ 0x30
 8016c72:	d0f9      	beq.n	8016c68 <_strtod_l+0x290>
 8016c74:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016c78:	2c08      	cmp	r4, #8
 8016c7a:	d881      	bhi.n	8016b80 <_strtod_l+0x1a8>
 8016c7c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016c80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016c86:	1c51      	adds	r1, r2, #1
 8016c88:	9111      	str	r1, [sp, #68]	@ 0x44
 8016c8a:	7852      	ldrb	r2, [r2, #1]
 8016c8c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016c90:	2c09      	cmp	r4, #9
 8016c92:	d938      	bls.n	8016d06 <_strtod_l+0x32e>
 8016c94:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016c96:	1b0c      	subs	r4, r1, r4
 8016c98:	2c08      	cmp	r4, #8
 8016c9a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8016c9e:	dc02      	bgt.n	8016ca6 <_strtod_l+0x2ce>
 8016ca0:	4564      	cmp	r4, ip
 8016ca2:	bfa8      	it	ge
 8016ca4:	4664      	movge	r4, ip
 8016ca6:	f1be 0f00 	cmp.w	lr, #0
 8016caa:	d000      	beq.n	8016cae <_strtod_l+0x2d6>
 8016cac:	4264      	negs	r4, r4
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d14e      	bne.n	8016d50 <_strtod_l+0x378>
 8016cb2:	9b07      	ldr	r3, [sp, #28]
 8016cb4:	4318      	orrs	r0, r3
 8016cb6:	f47f aeca 	bne.w	8016a4e <_strtod_l+0x76>
 8016cba:	9b06      	ldr	r3, [sp, #24]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	f47f aee2 	bne.w	8016a86 <_strtod_l+0xae>
 8016cc2:	2a69      	cmp	r2, #105	@ 0x69
 8016cc4:	d027      	beq.n	8016d16 <_strtod_l+0x33e>
 8016cc6:	dc24      	bgt.n	8016d12 <_strtod_l+0x33a>
 8016cc8:	2a49      	cmp	r2, #73	@ 0x49
 8016cca:	d024      	beq.n	8016d16 <_strtod_l+0x33e>
 8016ccc:	2a4e      	cmp	r2, #78	@ 0x4e
 8016cce:	f47f aeda 	bne.w	8016a86 <_strtod_l+0xae>
 8016cd2:	4997      	ldr	r1, [pc, #604]	@ (8016f30 <_strtod_l+0x558>)
 8016cd4:	a811      	add	r0, sp, #68	@ 0x44
 8016cd6:	f001 fe4b 	bl	8018970 <__match>
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	f43f aed3 	beq.w	8016a86 <_strtod_l+0xae>
 8016ce0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	2b28      	cmp	r3, #40	@ 0x28
 8016ce6:	d12d      	bne.n	8016d44 <_strtod_l+0x36c>
 8016ce8:	4992      	ldr	r1, [pc, #584]	@ (8016f34 <_strtod_l+0x55c>)
 8016cea:	aa14      	add	r2, sp, #80	@ 0x50
 8016cec:	a811      	add	r0, sp, #68	@ 0x44
 8016cee:	f001 fe53 	bl	8018998 <__hexnan>
 8016cf2:	2805      	cmp	r0, #5
 8016cf4:	d126      	bne.n	8016d44 <_strtod_l+0x36c>
 8016cf6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016cf8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016cfc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016d00:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016d04:	e6a3      	b.n	8016a4e <_strtod_l+0x76>
 8016d06:	240a      	movs	r4, #10
 8016d08:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016d0c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016d10:	e7b8      	b.n	8016c84 <_strtod_l+0x2ac>
 8016d12:	2a6e      	cmp	r2, #110	@ 0x6e
 8016d14:	e7db      	b.n	8016cce <_strtod_l+0x2f6>
 8016d16:	4988      	ldr	r1, [pc, #544]	@ (8016f38 <_strtod_l+0x560>)
 8016d18:	a811      	add	r0, sp, #68	@ 0x44
 8016d1a:	f001 fe29 	bl	8018970 <__match>
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f43f aeb1 	beq.w	8016a86 <_strtod_l+0xae>
 8016d24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d26:	4985      	ldr	r1, [pc, #532]	@ (8016f3c <_strtod_l+0x564>)
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	a811      	add	r0, sp, #68	@ 0x44
 8016d2c:	9311      	str	r3, [sp, #68]	@ 0x44
 8016d2e:	f001 fe1f 	bl	8018970 <__match>
 8016d32:	b910      	cbnz	r0, 8016d3a <_strtod_l+0x362>
 8016d34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d36:	3301      	adds	r3, #1
 8016d38:	9311      	str	r3, [sp, #68]	@ 0x44
 8016d3a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016f50 <_strtod_l+0x578>
 8016d3e:	f04f 0a00 	mov.w	sl, #0
 8016d42:	e684      	b.n	8016a4e <_strtod_l+0x76>
 8016d44:	487e      	ldr	r0, [pc, #504]	@ (8016f40 <_strtod_l+0x568>)
 8016d46:	f001 fb13 	bl	8018370 <nan>
 8016d4a:	ec5b ab10 	vmov	sl, fp, d0
 8016d4e:	e67e      	b.n	8016a4e <_strtod_l+0x76>
 8016d50:	ee07 9a90 	vmov	s15, r9
 8016d54:	1be2      	subs	r2, r4, r7
 8016d56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016d5a:	2d00      	cmp	r5, #0
 8016d5c:	bf08      	it	eq
 8016d5e:	461d      	moveq	r5, r3
 8016d60:	2b10      	cmp	r3, #16
 8016d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d64:	461a      	mov	r2, r3
 8016d66:	bfa8      	it	ge
 8016d68:	2210      	movge	r2, #16
 8016d6a:	2b09      	cmp	r3, #9
 8016d6c:	ec5b ab17 	vmov	sl, fp, d7
 8016d70:	dc15      	bgt.n	8016d9e <_strtod_l+0x3c6>
 8016d72:	1be1      	subs	r1, r4, r7
 8016d74:	2900      	cmp	r1, #0
 8016d76:	f43f ae6a 	beq.w	8016a4e <_strtod_l+0x76>
 8016d7a:	eba4 0107 	sub.w	r1, r4, r7
 8016d7e:	dd72      	ble.n	8016e66 <_strtod_l+0x48e>
 8016d80:	2916      	cmp	r1, #22
 8016d82:	dc59      	bgt.n	8016e38 <_strtod_l+0x460>
 8016d84:	4b6f      	ldr	r3, [pc, #444]	@ (8016f44 <_strtod_l+0x56c>)
 8016d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d8c:	ed93 7b00 	vldr	d7, [r3]
 8016d90:	ec4b ab16 	vmov	d6, sl, fp
 8016d94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016d98:	ec5b ab17 	vmov	sl, fp, d7
 8016d9c:	e657      	b.n	8016a4e <_strtod_l+0x76>
 8016d9e:	4969      	ldr	r1, [pc, #420]	@ (8016f44 <_strtod_l+0x56c>)
 8016da0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016da4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016da8:	ee06 6a90 	vmov	s13, r6
 8016dac:	2b0f      	cmp	r3, #15
 8016dae:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016db2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016db6:	ec5b ab16 	vmov	sl, fp, d6
 8016dba:	ddda      	ble.n	8016d72 <_strtod_l+0x39a>
 8016dbc:	1a9a      	subs	r2, r3, r2
 8016dbe:	1be1      	subs	r1, r4, r7
 8016dc0:	440a      	add	r2, r1
 8016dc2:	2a00      	cmp	r2, #0
 8016dc4:	f340 8094 	ble.w	8016ef0 <_strtod_l+0x518>
 8016dc8:	f012 000f 	ands.w	r0, r2, #15
 8016dcc:	d00a      	beq.n	8016de4 <_strtod_l+0x40c>
 8016dce:	495d      	ldr	r1, [pc, #372]	@ (8016f44 <_strtod_l+0x56c>)
 8016dd0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016dd4:	ed91 7b00 	vldr	d7, [r1]
 8016dd8:	ec4b ab16 	vmov	d6, sl, fp
 8016ddc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016de0:	ec5b ab17 	vmov	sl, fp, d7
 8016de4:	f032 020f 	bics.w	r2, r2, #15
 8016de8:	d073      	beq.n	8016ed2 <_strtod_l+0x4fa>
 8016dea:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016dee:	dd47      	ble.n	8016e80 <_strtod_l+0x4a8>
 8016df0:	2400      	movs	r4, #0
 8016df2:	4625      	mov	r5, r4
 8016df4:	9407      	str	r4, [sp, #28]
 8016df6:	4626      	mov	r6, r4
 8016df8:	9a05      	ldr	r2, [sp, #20]
 8016dfa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016f50 <_strtod_l+0x578>
 8016dfe:	2322      	movs	r3, #34	@ 0x22
 8016e00:	6013      	str	r3, [r2, #0]
 8016e02:	f04f 0a00 	mov.w	sl, #0
 8016e06:	9b07      	ldr	r3, [sp, #28]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	f43f ae20 	beq.w	8016a4e <_strtod_l+0x76>
 8016e0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e10:	9805      	ldr	r0, [sp, #20]
 8016e12:	f001 feaf 	bl	8018b74 <_Bfree>
 8016e16:	9805      	ldr	r0, [sp, #20]
 8016e18:	4631      	mov	r1, r6
 8016e1a:	f001 feab 	bl	8018b74 <_Bfree>
 8016e1e:	9805      	ldr	r0, [sp, #20]
 8016e20:	4629      	mov	r1, r5
 8016e22:	f001 fea7 	bl	8018b74 <_Bfree>
 8016e26:	9907      	ldr	r1, [sp, #28]
 8016e28:	9805      	ldr	r0, [sp, #20]
 8016e2a:	f001 fea3 	bl	8018b74 <_Bfree>
 8016e2e:	9805      	ldr	r0, [sp, #20]
 8016e30:	4621      	mov	r1, r4
 8016e32:	f001 fe9f 	bl	8018b74 <_Bfree>
 8016e36:	e60a      	b.n	8016a4e <_strtod_l+0x76>
 8016e38:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016e3c:	1be0      	subs	r0, r4, r7
 8016e3e:	4281      	cmp	r1, r0
 8016e40:	dbbc      	blt.n	8016dbc <_strtod_l+0x3e4>
 8016e42:	4a40      	ldr	r2, [pc, #256]	@ (8016f44 <_strtod_l+0x56c>)
 8016e44:	f1c3 030f 	rsb	r3, r3, #15
 8016e48:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016e4c:	ed91 7b00 	vldr	d7, [r1]
 8016e50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016e52:	ec4b ab16 	vmov	d6, sl, fp
 8016e56:	1acb      	subs	r3, r1, r3
 8016e58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016e5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e60:	ed92 6b00 	vldr	d6, [r2]
 8016e64:	e796      	b.n	8016d94 <_strtod_l+0x3bc>
 8016e66:	3116      	adds	r1, #22
 8016e68:	dba8      	blt.n	8016dbc <_strtod_l+0x3e4>
 8016e6a:	4b36      	ldr	r3, [pc, #216]	@ (8016f44 <_strtod_l+0x56c>)
 8016e6c:	1b3c      	subs	r4, r7, r4
 8016e6e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016e72:	ed94 7b00 	vldr	d7, [r4]
 8016e76:	ec4b ab16 	vmov	d6, sl, fp
 8016e7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016e7e:	e78b      	b.n	8016d98 <_strtod_l+0x3c0>
 8016e80:	2000      	movs	r0, #0
 8016e82:	ec4b ab17 	vmov	d7, sl, fp
 8016e86:	4e30      	ldr	r6, [pc, #192]	@ (8016f48 <_strtod_l+0x570>)
 8016e88:	1112      	asrs	r2, r2, #4
 8016e8a:	4601      	mov	r1, r0
 8016e8c:	2a01      	cmp	r2, #1
 8016e8e:	dc23      	bgt.n	8016ed8 <_strtod_l+0x500>
 8016e90:	b108      	cbz	r0, 8016e96 <_strtod_l+0x4be>
 8016e92:	ec5b ab17 	vmov	sl, fp, d7
 8016e96:	4a2c      	ldr	r2, [pc, #176]	@ (8016f48 <_strtod_l+0x570>)
 8016e98:	482c      	ldr	r0, [pc, #176]	@ (8016f4c <_strtod_l+0x574>)
 8016e9a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016e9e:	ed92 7b00 	vldr	d7, [r2]
 8016ea2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016ea6:	ec4b ab16 	vmov	d6, sl, fp
 8016eaa:	4a29      	ldr	r2, [pc, #164]	@ (8016f50 <_strtod_l+0x578>)
 8016eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016eb0:	ee17 1a90 	vmov	r1, s15
 8016eb4:	400a      	ands	r2, r1
 8016eb6:	4282      	cmp	r2, r0
 8016eb8:	ec5b ab17 	vmov	sl, fp, d7
 8016ebc:	d898      	bhi.n	8016df0 <_strtod_l+0x418>
 8016ebe:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8016ec2:	4282      	cmp	r2, r0
 8016ec4:	bf86      	itte	hi
 8016ec6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016f54 <_strtod_l+0x57c>
 8016eca:	f04f 3aff 	movhi.w	sl, #4294967295
 8016ece:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	9206      	str	r2, [sp, #24]
 8016ed6:	e076      	b.n	8016fc6 <_strtod_l+0x5ee>
 8016ed8:	f012 0f01 	tst.w	r2, #1
 8016edc:	d004      	beq.n	8016ee8 <_strtod_l+0x510>
 8016ede:	ed96 6b00 	vldr	d6, [r6]
 8016ee2:	2001      	movs	r0, #1
 8016ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ee8:	3101      	adds	r1, #1
 8016eea:	1052      	asrs	r2, r2, #1
 8016eec:	3608      	adds	r6, #8
 8016eee:	e7cd      	b.n	8016e8c <_strtod_l+0x4b4>
 8016ef0:	d0ef      	beq.n	8016ed2 <_strtod_l+0x4fa>
 8016ef2:	4252      	negs	r2, r2
 8016ef4:	f012 000f 	ands.w	r0, r2, #15
 8016ef8:	d00a      	beq.n	8016f10 <_strtod_l+0x538>
 8016efa:	4912      	ldr	r1, [pc, #72]	@ (8016f44 <_strtod_l+0x56c>)
 8016efc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016f00:	ed91 7b00 	vldr	d7, [r1]
 8016f04:	ec4b ab16 	vmov	d6, sl, fp
 8016f08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016f0c:	ec5b ab17 	vmov	sl, fp, d7
 8016f10:	1112      	asrs	r2, r2, #4
 8016f12:	d0de      	beq.n	8016ed2 <_strtod_l+0x4fa>
 8016f14:	2a1f      	cmp	r2, #31
 8016f16:	dd1f      	ble.n	8016f58 <_strtod_l+0x580>
 8016f18:	2400      	movs	r4, #0
 8016f1a:	4625      	mov	r5, r4
 8016f1c:	9407      	str	r4, [sp, #28]
 8016f1e:	4626      	mov	r6, r4
 8016f20:	9a05      	ldr	r2, [sp, #20]
 8016f22:	2322      	movs	r3, #34	@ 0x22
 8016f24:	f04f 0a00 	mov.w	sl, #0
 8016f28:	f04f 0b00 	mov.w	fp, #0
 8016f2c:	6013      	str	r3, [r2, #0]
 8016f2e:	e76a      	b.n	8016e06 <_strtod_l+0x42e>
 8016f30:	0801a917 	.word	0x0801a917
 8016f34:	0801a91c 	.word	0x0801a91c
 8016f38:	0801a90e 	.word	0x0801a90e
 8016f3c:	0801a911 	.word	0x0801a911
 8016f40:	0801ab2a 	.word	0x0801ab2a
 8016f44:	0801ac30 	.word	0x0801ac30
 8016f48:	0801ac08 	.word	0x0801ac08
 8016f4c:	7ca00000 	.word	0x7ca00000
 8016f50:	7ff00000 	.word	0x7ff00000
 8016f54:	7fefffff 	.word	0x7fefffff
 8016f58:	f012 0110 	ands.w	r1, r2, #16
 8016f5c:	bf18      	it	ne
 8016f5e:	216a      	movne	r1, #106	@ 0x6a
 8016f60:	9106      	str	r1, [sp, #24]
 8016f62:	ec4b ab17 	vmov	d7, sl, fp
 8016f66:	49b0      	ldr	r1, [pc, #704]	@ (8017228 <_strtod_l+0x850>)
 8016f68:	2000      	movs	r0, #0
 8016f6a:	07d6      	lsls	r6, r2, #31
 8016f6c:	d504      	bpl.n	8016f78 <_strtod_l+0x5a0>
 8016f6e:	ed91 6b00 	vldr	d6, [r1]
 8016f72:	2001      	movs	r0, #1
 8016f74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f78:	1052      	asrs	r2, r2, #1
 8016f7a:	f101 0108 	add.w	r1, r1, #8
 8016f7e:	d1f4      	bne.n	8016f6a <_strtod_l+0x592>
 8016f80:	b108      	cbz	r0, 8016f86 <_strtod_l+0x5ae>
 8016f82:	ec5b ab17 	vmov	sl, fp, d7
 8016f86:	9a06      	ldr	r2, [sp, #24]
 8016f88:	b1b2      	cbz	r2, 8016fb8 <_strtod_l+0x5e0>
 8016f8a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8016f8e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8016f92:	2a00      	cmp	r2, #0
 8016f94:	4658      	mov	r0, fp
 8016f96:	dd0f      	ble.n	8016fb8 <_strtod_l+0x5e0>
 8016f98:	2a1f      	cmp	r2, #31
 8016f9a:	dd55      	ble.n	8017048 <_strtod_l+0x670>
 8016f9c:	2a34      	cmp	r2, #52	@ 0x34
 8016f9e:	bfde      	ittt	le
 8016fa0:	f04f 32ff 	movle.w	r2, #4294967295
 8016fa4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8016fa8:	408a      	lslle	r2, r1
 8016faa:	f04f 0a00 	mov.w	sl, #0
 8016fae:	bfcc      	ite	gt
 8016fb0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016fb4:	ea02 0b00 	andle.w	fp, r2, r0
 8016fb8:	ec4b ab17 	vmov	d7, sl, fp
 8016fbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc4:	d0a8      	beq.n	8016f18 <_strtod_l+0x540>
 8016fc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016fc8:	9805      	ldr	r0, [sp, #20]
 8016fca:	f8cd 9000 	str.w	r9, [sp]
 8016fce:	462a      	mov	r2, r5
 8016fd0:	f001 fe38 	bl	8018c44 <__s2b>
 8016fd4:	9007      	str	r0, [sp, #28]
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	f43f af0a 	beq.w	8016df0 <_strtod_l+0x418>
 8016fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fde:	1b3f      	subs	r7, r7, r4
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	bfb4      	ite	lt
 8016fe4:	463b      	movlt	r3, r7
 8016fe6:	2300      	movge	r3, #0
 8016fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fec:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017218 <_strtod_l+0x840>
 8016ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ff4:	2400      	movs	r4, #0
 8016ff6:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ff8:	4625      	mov	r5, r4
 8016ffa:	9b07      	ldr	r3, [sp, #28]
 8016ffc:	9805      	ldr	r0, [sp, #20]
 8016ffe:	6859      	ldr	r1, [r3, #4]
 8017000:	f001 fd78 	bl	8018af4 <_Balloc>
 8017004:	4606      	mov	r6, r0
 8017006:	2800      	cmp	r0, #0
 8017008:	f43f aef6 	beq.w	8016df8 <_strtod_l+0x420>
 801700c:	9b07      	ldr	r3, [sp, #28]
 801700e:	691a      	ldr	r2, [r3, #16]
 8017010:	ec4b ab19 	vmov	d9, sl, fp
 8017014:	3202      	adds	r2, #2
 8017016:	f103 010c 	add.w	r1, r3, #12
 801701a:	0092      	lsls	r2, r2, #2
 801701c:	300c      	adds	r0, #12
 801701e:	f001 f996 	bl	801834e <memcpy>
 8017022:	eeb0 0b49 	vmov.f64	d0, d9
 8017026:	9805      	ldr	r0, [sp, #20]
 8017028:	aa14      	add	r2, sp, #80	@ 0x50
 801702a:	a913      	add	r1, sp, #76	@ 0x4c
 801702c:	f002 f946 	bl	80192bc <__d2b>
 8017030:	9012      	str	r0, [sp, #72]	@ 0x48
 8017032:	2800      	cmp	r0, #0
 8017034:	f43f aee0 	beq.w	8016df8 <_strtod_l+0x420>
 8017038:	9805      	ldr	r0, [sp, #20]
 801703a:	2101      	movs	r1, #1
 801703c:	f001 fe98 	bl	8018d70 <__i2b>
 8017040:	4605      	mov	r5, r0
 8017042:	b940      	cbnz	r0, 8017056 <_strtod_l+0x67e>
 8017044:	2500      	movs	r5, #0
 8017046:	e6d7      	b.n	8016df8 <_strtod_l+0x420>
 8017048:	f04f 31ff 	mov.w	r1, #4294967295
 801704c:	fa01 f202 	lsl.w	r2, r1, r2
 8017050:	ea02 0a0a 	and.w	sl, r2, sl
 8017054:	e7b0      	b.n	8016fb8 <_strtod_l+0x5e0>
 8017056:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8017058:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801705a:	2f00      	cmp	r7, #0
 801705c:	bfab      	itete	ge
 801705e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8017060:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8017062:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8017066:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801706a:	bfac      	ite	ge
 801706c:	eb07 0903 	addge.w	r9, r7, r3
 8017070:	eba3 0807 	sublt.w	r8, r3, r7
 8017074:	9b06      	ldr	r3, [sp, #24]
 8017076:	1aff      	subs	r7, r7, r3
 8017078:	4417      	add	r7, r2
 801707a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801707e:	4a6b      	ldr	r2, [pc, #428]	@ (801722c <_strtod_l+0x854>)
 8017080:	3f01      	subs	r7, #1
 8017082:	4297      	cmp	r7, r2
 8017084:	da51      	bge.n	801712a <_strtod_l+0x752>
 8017086:	1bd1      	subs	r1, r2, r7
 8017088:	291f      	cmp	r1, #31
 801708a:	eba3 0301 	sub.w	r3, r3, r1
 801708e:	f04f 0201 	mov.w	r2, #1
 8017092:	dc3e      	bgt.n	8017112 <_strtod_l+0x73a>
 8017094:	408a      	lsls	r2, r1
 8017096:	920c      	str	r2, [sp, #48]	@ 0x30
 8017098:	2200      	movs	r2, #0
 801709a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801709c:	eb09 0703 	add.w	r7, r9, r3
 80170a0:	4498      	add	r8, r3
 80170a2:	9b06      	ldr	r3, [sp, #24]
 80170a4:	45b9      	cmp	r9, r7
 80170a6:	4498      	add	r8, r3
 80170a8:	464b      	mov	r3, r9
 80170aa:	bfa8      	it	ge
 80170ac:	463b      	movge	r3, r7
 80170ae:	4543      	cmp	r3, r8
 80170b0:	bfa8      	it	ge
 80170b2:	4643      	movge	r3, r8
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	bfc2      	ittt	gt
 80170b8:	1aff      	subgt	r7, r7, r3
 80170ba:	eba8 0803 	subgt.w	r8, r8, r3
 80170be:	eba9 0903 	subgt.w	r9, r9, r3
 80170c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	dd16      	ble.n	80170f6 <_strtod_l+0x71e>
 80170c8:	4629      	mov	r1, r5
 80170ca:	9805      	ldr	r0, [sp, #20]
 80170cc:	461a      	mov	r2, r3
 80170ce:	f001 ff0f 	bl	8018ef0 <__pow5mult>
 80170d2:	4605      	mov	r5, r0
 80170d4:	2800      	cmp	r0, #0
 80170d6:	d0b5      	beq.n	8017044 <_strtod_l+0x66c>
 80170d8:	4601      	mov	r1, r0
 80170da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80170dc:	9805      	ldr	r0, [sp, #20]
 80170de:	f001 fe5d 	bl	8018d9c <__multiply>
 80170e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80170e4:	2800      	cmp	r0, #0
 80170e6:	f43f ae87 	beq.w	8016df8 <_strtod_l+0x420>
 80170ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80170ec:	9805      	ldr	r0, [sp, #20]
 80170ee:	f001 fd41 	bl	8018b74 <_Bfree>
 80170f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80170f6:	2f00      	cmp	r7, #0
 80170f8:	dc1b      	bgt.n	8017132 <_strtod_l+0x75a>
 80170fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	dd21      	ble.n	8017144 <_strtod_l+0x76c>
 8017100:	4631      	mov	r1, r6
 8017102:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017104:	9805      	ldr	r0, [sp, #20]
 8017106:	f001 fef3 	bl	8018ef0 <__pow5mult>
 801710a:	4606      	mov	r6, r0
 801710c:	b9d0      	cbnz	r0, 8017144 <_strtod_l+0x76c>
 801710e:	2600      	movs	r6, #0
 8017110:	e672      	b.n	8016df8 <_strtod_l+0x420>
 8017112:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8017116:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801711a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801711e:	37e2      	adds	r7, #226	@ 0xe2
 8017120:	fa02 f107 	lsl.w	r1, r2, r7
 8017124:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017126:	920c      	str	r2, [sp, #48]	@ 0x30
 8017128:	e7b8      	b.n	801709c <_strtod_l+0x6c4>
 801712a:	2200      	movs	r2, #0
 801712c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801712e:	2201      	movs	r2, #1
 8017130:	e7f9      	b.n	8017126 <_strtod_l+0x74e>
 8017132:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017134:	9805      	ldr	r0, [sp, #20]
 8017136:	463a      	mov	r2, r7
 8017138:	f001 ff34 	bl	8018fa4 <__lshift>
 801713c:	9012      	str	r0, [sp, #72]	@ 0x48
 801713e:	2800      	cmp	r0, #0
 8017140:	d1db      	bne.n	80170fa <_strtod_l+0x722>
 8017142:	e659      	b.n	8016df8 <_strtod_l+0x420>
 8017144:	f1b8 0f00 	cmp.w	r8, #0
 8017148:	dd07      	ble.n	801715a <_strtod_l+0x782>
 801714a:	4631      	mov	r1, r6
 801714c:	9805      	ldr	r0, [sp, #20]
 801714e:	4642      	mov	r2, r8
 8017150:	f001 ff28 	bl	8018fa4 <__lshift>
 8017154:	4606      	mov	r6, r0
 8017156:	2800      	cmp	r0, #0
 8017158:	d0d9      	beq.n	801710e <_strtod_l+0x736>
 801715a:	f1b9 0f00 	cmp.w	r9, #0
 801715e:	dd08      	ble.n	8017172 <_strtod_l+0x79a>
 8017160:	4629      	mov	r1, r5
 8017162:	9805      	ldr	r0, [sp, #20]
 8017164:	464a      	mov	r2, r9
 8017166:	f001 ff1d 	bl	8018fa4 <__lshift>
 801716a:	4605      	mov	r5, r0
 801716c:	2800      	cmp	r0, #0
 801716e:	f43f ae43 	beq.w	8016df8 <_strtod_l+0x420>
 8017172:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017174:	9805      	ldr	r0, [sp, #20]
 8017176:	4632      	mov	r2, r6
 8017178:	f001 ff9c 	bl	80190b4 <__mdiff>
 801717c:	4604      	mov	r4, r0
 801717e:	2800      	cmp	r0, #0
 8017180:	f43f ae3a 	beq.w	8016df8 <_strtod_l+0x420>
 8017184:	2300      	movs	r3, #0
 8017186:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801718a:	60c3      	str	r3, [r0, #12]
 801718c:	4629      	mov	r1, r5
 801718e:	f001 ff75 	bl	801907c <__mcmp>
 8017192:	2800      	cmp	r0, #0
 8017194:	da4e      	bge.n	8017234 <_strtod_l+0x85c>
 8017196:	ea58 080a 	orrs.w	r8, r8, sl
 801719a:	d174      	bne.n	8017286 <_strtod_l+0x8ae>
 801719c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d170      	bne.n	8017286 <_strtod_l+0x8ae>
 80171a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80171a8:	0d1b      	lsrs	r3, r3, #20
 80171aa:	051b      	lsls	r3, r3, #20
 80171ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80171b0:	d969      	bls.n	8017286 <_strtod_l+0x8ae>
 80171b2:	6963      	ldr	r3, [r4, #20]
 80171b4:	b913      	cbnz	r3, 80171bc <_strtod_l+0x7e4>
 80171b6:	6923      	ldr	r3, [r4, #16]
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	dd64      	ble.n	8017286 <_strtod_l+0x8ae>
 80171bc:	4621      	mov	r1, r4
 80171be:	2201      	movs	r2, #1
 80171c0:	9805      	ldr	r0, [sp, #20]
 80171c2:	f001 feef 	bl	8018fa4 <__lshift>
 80171c6:	4629      	mov	r1, r5
 80171c8:	4604      	mov	r4, r0
 80171ca:	f001 ff57 	bl	801907c <__mcmp>
 80171ce:	2800      	cmp	r0, #0
 80171d0:	dd59      	ble.n	8017286 <_strtod_l+0x8ae>
 80171d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80171d6:	9a06      	ldr	r2, [sp, #24]
 80171d8:	0d1b      	lsrs	r3, r3, #20
 80171da:	051b      	lsls	r3, r3, #20
 80171dc:	2a00      	cmp	r2, #0
 80171de:	d070      	beq.n	80172c2 <_strtod_l+0x8ea>
 80171e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80171e4:	d86d      	bhi.n	80172c2 <_strtod_l+0x8ea>
 80171e6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80171ea:	f67f ae99 	bls.w	8016f20 <_strtod_l+0x548>
 80171ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017220 <_strtod_l+0x848>
 80171f2:	ec4b ab16 	vmov	d6, sl, fp
 80171f6:	4b0e      	ldr	r3, [pc, #56]	@ (8017230 <_strtod_l+0x858>)
 80171f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80171fc:	ee17 2a90 	vmov	r2, s15
 8017200:	4013      	ands	r3, r2
 8017202:	ec5b ab17 	vmov	sl, fp, d7
 8017206:	2b00      	cmp	r3, #0
 8017208:	f47f ae01 	bne.w	8016e0e <_strtod_l+0x436>
 801720c:	9a05      	ldr	r2, [sp, #20]
 801720e:	2322      	movs	r3, #34	@ 0x22
 8017210:	6013      	str	r3, [r2, #0]
 8017212:	e5fc      	b.n	8016e0e <_strtod_l+0x436>
 8017214:	f3af 8000 	nop.w
 8017218:	ffc00000 	.word	0xffc00000
 801721c:	41dfffff 	.word	0x41dfffff
 8017220:	00000000 	.word	0x00000000
 8017224:	39500000 	.word	0x39500000
 8017228:	0801a948 	.word	0x0801a948
 801722c:	fffffc02 	.word	0xfffffc02
 8017230:	7ff00000 	.word	0x7ff00000
 8017234:	46d9      	mov	r9, fp
 8017236:	d15d      	bne.n	80172f4 <_strtod_l+0x91c>
 8017238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801723c:	f1b8 0f00 	cmp.w	r8, #0
 8017240:	d02a      	beq.n	8017298 <_strtod_l+0x8c0>
 8017242:	4aab      	ldr	r2, [pc, #684]	@ (80174f0 <_strtod_l+0xb18>)
 8017244:	4293      	cmp	r3, r2
 8017246:	d12a      	bne.n	801729e <_strtod_l+0x8c6>
 8017248:	9b06      	ldr	r3, [sp, #24]
 801724a:	4652      	mov	r2, sl
 801724c:	b1fb      	cbz	r3, 801728e <_strtod_l+0x8b6>
 801724e:	4ba9      	ldr	r3, [pc, #676]	@ (80174f4 <_strtod_l+0xb1c>)
 8017250:	ea0b 0303 	and.w	r3, fp, r3
 8017254:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017258:	f04f 31ff 	mov.w	r1, #4294967295
 801725c:	d81a      	bhi.n	8017294 <_strtod_l+0x8bc>
 801725e:	0d1b      	lsrs	r3, r3, #20
 8017260:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017264:	fa01 f303 	lsl.w	r3, r1, r3
 8017268:	429a      	cmp	r2, r3
 801726a:	d118      	bne.n	801729e <_strtod_l+0x8c6>
 801726c:	4ba2      	ldr	r3, [pc, #648]	@ (80174f8 <_strtod_l+0xb20>)
 801726e:	4599      	cmp	r9, r3
 8017270:	d102      	bne.n	8017278 <_strtod_l+0x8a0>
 8017272:	3201      	adds	r2, #1
 8017274:	f43f adc0 	beq.w	8016df8 <_strtod_l+0x420>
 8017278:	4b9e      	ldr	r3, [pc, #632]	@ (80174f4 <_strtod_l+0xb1c>)
 801727a:	ea09 0303 	and.w	r3, r9, r3
 801727e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8017282:	f04f 0a00 	mov.w	sl, #0
 8017286:	9b06      	ldr	r3, [sp, #24]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d1b0      	bne.n	80171ee <_strtod_l+0x816>
 801728c:	e5bf      	b.n	8016e0e <_strtod_l+0x436>
 801728e:	f04f 33ff 	mov.w	r3, #4294967295
 8017292:	e7e9      	b.n	8017268 <_strtod_l+0x890>
 8017294:	460b      	mov	r3, r1
 8017296:	e7e7      	b.n	8017268 <_strtod_l+0x890>
 8017298:	ea53 030a 	orrs.w	r3, r3, sl
 801729c:	d099      	beq.n	80171d2 <_strtod_l+0x7fa>
 801729e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172a0:	b1c3      	cbz	r3, 80172d4 <_strtod_l+0x8fc>
 80172a2:	ea13 0f09 	tst.w	r3, r9
 80172a6:	d0ee      	beq.n	8017286 <_strtod_l+0x8ae>
 80172a8:	9a06      	ldr	r2, [sp, #24]
 80172aa:	4650      	mov	r0, sl
 80172ac:	4659      	mov	r1, fp
 80172ae:	f1b8 0f00 	cmp.w	r8, #0
 80172b2:	d013      	beq.n	80172dc <_strtod_l+0x904>
 80172b4:	f7ff fb76 	bl	80169a4 <sulp>
 80172b8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80172bc:	ec5b ab17 	vmov	sl, fp, d7
 80172c0:	e7e1      	b.n	8017286 <_strtod_l+0x8ae>
 80172c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80172c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80172ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80172ce:	f04f 3aff 	mov.w	sl, #4294967295
 80172d2:	e7d8      	b.n	8017286 <_strtod_l+0x8ae>
 80172d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80172d6:	ea13 0f0a 	tst.w	r3, sl
 80172da:	e7e4      	b.n	80172a6 <_strtod_l+0x8ce>
 80172dc:	f7ff fb62 	bl	80169a4 <sulp>
 80172e0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80172e4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80172e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ec:	ec5b ab10 	vmov	sl, fp, d0
 80172f0:	d1c9      	bne.n	8017286 <_strtod_l+0x8ae>
 80172f2:	e615      	b.n	8016f20 <_strtod_l+0x548>
 80172f4:	4629      	mov	r1, r5
 80172f6:	4620      	mov	r0, r4
 80172f8:	f002 f838 	bl	801936c <__ratio>
 80172fc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017300:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017308:	d85d      	bhi.n	80173c6 <_strtod_l+0x9ee>
 801730a:	f1b8 0f00 	cmp.w	r8, #0
 801730e:	d164      	bne.n	80173da <_strtod_l+0xa02>
 8017310:	f1ba 0f00 	cmp.w	sl, #0
 8017314:	d14b      	bne.n	80173ae <_strtod_l+0x9d6>
 8017316:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801731a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801731e:	2b00      	cmp	r3, #0
 8017320:	d160      	bne.n	80173e4 <_strtod_l+0xa0c>
 8017322:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8017326:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801732e:	d401      	bmi.n	8017334 <_strtod_l+0x95c>
 8017330:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017334:	eeb1 ab48 	vneg.f64	d10, d8
 8017338:	486e      	ldr	r0, [pc, #440]	@ (80174f4 <_strtod_l+0xb1c>)
 801733a:	4970      	ldr	r1, [pc, #448]	@ (80174fc <_strtod_l+0xb24>)
 801733c:	ea09 0700 	and.w	r7, r9, r0
 8017340:	428f      	cmp	r7, r1
 8017342:	ec53 2b1a 	vmov	r2, r3, d10
 8017346:	d17d      	bne.n	8017444 <_strtod_l+0xa6c>
 8017348:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801734c:	ec4b ab1c 	vmov	d12, sl, fp
 8017350:	eeb0 0b4c 	vmov.f64	d0, d12
 8017354:	f001 ff42 	bl	80191dc <__ulp>
 8017358:	4866      	ldr	r0, [pc, #408]	@ (80174f4 <_strtod_l+0xb1c>)
 801735a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801735e:	ee1c 3a90 	vmov	r3, s25
 8017362:	4a67      	ldr	r2, [pc, #412]	@ (8017500 <_strtod_l+0xb28>)
 8017364:	ea03 0100 	and.w	r1, r3, r0
 8017368:	4291      	cmp	r1, r2
 801736a:	ec5b ab1c 	vmov	sl, fp, d12
 801736e:	d93c      	bls.n	80173ea <_strtod_l+0xa12>
 8017370:	ee19 2a90 	vmov	r2, s19
 8017374:	4b60      	ldr	r3, [pc, #384]	@ (80174f8 <_strtod_l+0xb20>)
 8017376:	429a      	cmp	r2, r3
 8017378:	d104      	bne.n	8017384 <_strtod_l+0x9ac>
 801737a:	ee19 3a10 	vmov	r3, s18
 801737e:	3301      	adds	r3, #1
 8017380:	f43f ad3a 	beq.w	8016df8 <_strtod_l+0x420>
 8017384:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80174f8 <_strtod_l+0xb20>
 8017388:	f04f 3aff 	mov.w	sl, #4294967295
 801738c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801738e:	9805      	ldr	r0, [sp, #20]
 8017390:	f001 fbf0 	bl	8018b74 <_Bfree>
 8017394:	9805      	ldr	r0, [sp, #20]
 8017396:	4631      	mov	r1, r6
 8017398:	f001 fbec 	bl	8018b74 <_Bfree>
 801739c:	9805      	ldr	r0, [sp, #20]
 801739e:	4629      	mov	r1, r5
 80173a0:	f001 fbe8 	bl	8018b74 <_Bfree>
 80173a4:	9805      	ldr	r0, [sp, #20]
 80173a6:	4621      	mov	r1, r4
 80173a8:	f001 fbe4 	bl	8018b74 <_Bfree>
 80173ac:	e625      	b.n	8016ffa <_strtod_l+0x622>
 80173ae:	f1ba 0f01 	cmp.w	sl, #1
 80173b2:	d103      	bne.n	80173bc <_strtod_l+0x9e4>
 80173b4:	f1bb 0f00 	cmp.w	fp, #0
 80173b8:	f43f adb2 	beq.w	8016f20 <_strtod_l+0x548>
 80173bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80173c0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80173c4:	e7b8      	b.n	8017338 <_strtod_l+0x960>
 80173c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80173ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 80173ce:	f1b8 0f00 	cmp.w	r8, #0
 80173d2:	d0af      	beq.n	8017334 <_strtod_l+0x95c>
 80173d4:	eeb0 ab48 	vmov.f64	d10, d8
 80173d8:	e7ae      	b.n	8017338 <_strtod_l+0x960>
 80173da:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80173de:	eeb0 8b4a 	vmov.f64	d8, d10
 80173e2:	e7a9      	b.n	8017338 <_strtod_l+0x960>
 80173e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80173e8:	e7a6      	b.n	8017338 <_strtod_l+0x960>
 80173ea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80173ee:	9b06      	ldr	r3, [sp, #24]
 80173f0:	46d9      	mov	r9, fp
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d1ca      	bne.n	801738c <_strtod_l+0x9b4>
 80173f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80173fa:	0d1b      	lsrs	r3, r3, #20
 80173fc:	051b      	lsls	r3, r3, #20
 80173fe:	429f      	cmp	r7, r3
 8017400:	d1c4      	bne.n	801738c <_strtod_l+0x9b4>
 8017402:	ec51 0b18 	vmov	r0, r1, d8
 8017406:	f7e9 f997 	bl	8000738 <__aeabi_d2lz>
 801740a:	f7e9 f94f 	bl	80006ac <__aeabi_l2d>
 801740e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8017412:	ec41 0b17 	vmov	d7, r0, r1
 8017416:	ea49 090a 	orr.w	r9, r9, sl
 801741a:	ea59 0908 	orrs.w	r9, r9, r8
 801741e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017422:	d03c      	beq.n	801749e <_strtod_l+0xac6>
 8017424:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80174d8 <_strtod_l+0xb00>
 8017428:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017430:	f53f aced 	bmi.w	8016e0e <_strtod_l+0x436>
 8017434:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80174e0 <_strtod_l+0xb08>
 8017438:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801743c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017440:	dda4      	ble.n	801738c <_strtod_l+0x9b4>
 8017442:	e4e4      	b.n	8016e0e <_strtod_l+0x436>
 8017444:	9906      	ldr	r1, [sp, #24]
 8017446:	b1e1      	cbz	r1, 8017482 <_strtod_l+0xaaa>
 8017448:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801744c:	d819      	bhi.n	8017482 <_strtod_l+0xaaa>
 801744e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017456:	d811      	bhi.n	801747c <_strtod_l+0xaa4>
 8017458:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801745c:	ee18 3a10 	vmov	r3, s16
 8017460:	2b01      	cmp	r3, #1
 8017462:	bf38      	it	cc
 8017464:	2301      	movcc	r3, #1
 8017466:	ee08 3a10 	vmov	s16, r3
 801746a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801746e:	f1b8 0f00 	cmp.w	r8, #0
 8017472:	d111      	bne.n	8017498 <_strtod_l+0xac0>
 8017474:	eeb1 7b48 	vneg.f64	d7, d8
 8017478:	ec53 2b17 	vmov	r2, r3, d7
 801747c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8017480:	1bcb      	subs	r3, r1, r7
 8017482:	eeb0 0b49 	vmov.f64	d0, d9
 8017486:	ec43 2b1a 	vmov	d10, r2, r3
 801748a:	f001 fea7 	bl	80191dc <__ulp>
 801748e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8017492:	ec5b ab19 	vmov	sl, fp, d9
 8017496:	e7aa      	b.n	80173ee <_strtod_l+0xa16>
 8017498:	eeb0 7b48 	vmov.f64	d7, d8
 801749c:	e7ec      	b.n	8017478 <_strtod_l+0xaa0>
 801749e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80174e8 <_strtod_l+0xb10>
 80174a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80174a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174aa:	f57f af6f 	bpl.w	801738c <_strtod_l+0x9b4>
 80174ae:	e4ae      	b.n	8016e0e <_strtod_l+0x436>
 80174b0:	2300      	movs	r3, #0
 80174b2:	9308      	str	r3, [sp, #32]
 80174b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80174b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80174b8:	6013      	str	r3, [r2, #0]
 80174ba:	f7ff bacc 	b.w	8016a56 <_strtod_l+0x7e>
 80174be:	2a65      	cmp	r2, #101	@ 0x65
 80174c0:	f43f abbc 	beq.w	8016c3c <_strtod_l+0x264>
 80174c4:	2a45      	cmp	r2, #69	@ 0x45
 80174c6:	f43f abb9 	beq.w	8016c3c <_strtod_l+0x264>
 80174ca:	2301      	movs	r3, #1
 80174cc:	9306      	str	r3, [sp, #24]
 80174ce:	f7ff bbf0 	b.w	8016cb2 <_strtod_l+0x2da>
 80174d2:	bf00      	nop
 80174d4:	f3af 8000 	nop.w
 80174d8:	94a03595 	.word	0x94a03595
 80174dc:	3fdfffff 	.word	0x3fdfffff
 80174e0:	35afe535 	.word	0x35afe535
 80174e4:	3fe00000 	.word	0x3fe00000
 80174e8:	94a03595 	.word	0x94a03595
 80174ec:	3fcfffff 	.word	0x3fcfffff
 80174f0:	000fffff 	.word	0x000fffff
 80174f4:	7ff00000 	.word	0x7ff00000
 80174f8:	7fefffff 	.word	0x7fefffff
 80174fc:	7fe00000 	.word	0x7fe00000
 8017500:	7c9fffff 	.word	0x7c9fffff

08017504 <_strtod_r>:
 8017504:	4b01      	ldr	r3, [pc, #4]	@ (801750c <_strtod_r+0x8>)
 8017506:	f7ff ba67 	b.w	80169d8 <_strtod_l>
 801750a:	bf00      	nop
 801750c:	24000114 	.word	0x24000114

08017510 <strtod>:
 8017510:	460a      	mov	r2, r1
 8017512:	4601      	mov	r1, r0
 8017514:	4802      	ldr	r0, [pc, #8]	@ (8017520 <strtod+0x10>)
 8017516:	4b03      	ldr	r3, [pc, #12]	@ (8017524 <strtod+0x14>)
 8017518:	6800      	ldr	r0, [r0, #0]
 801751a:	f7ff ba5d 	b.w	80169d8 <_strtod_l>
 801751e:	bf00      	nop
 8017520:	24000280 	.word	0x24000280
 8017524:	24000114 	.word	0x24000114

08017528 <_strtol_l.constprop.0>:
 8017528:	2b24      	cmp	r3, #36	@ 0x24
 801752a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801752e:	4686      	mov	lr, r0
 8017530:	4690      	mov	r8, r2
 8017532:	d801      	bhi.n	8017538 <_strtol_l.constprop.0+0x10>
 8017534:	2b01      	cmp	r3, #1
 8017536:	d106      	bne.n	8017546 <_strtol_l.constprop.0+0x1e>
 8017538:	f000 fedc 	bl	80182f4 <__errno>
 801753c:	2316      	movs	r3, #22
 801753e:	6003      	str	r3, [r0, #0]
 8017540:	2000      	movs	r0, #0
 8017542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017546:	4834      	ldr	r0, [pc, #208]	@ (8017618 <_strtol_l.constprop.0+0xf0>)
 8017548:	460d      	mov	r5, r1
 801754a:	462a      	mov	r2, r5
 801754c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017550:	5d06      	ldrb	r6, [r0, r4]
 8017552:	f016 0608 	ands.w	r6, r6, #8
 8017556:	d1f8      	bne.n	801754a <_strtol_l.constprop.0+0x22>
 8017558:	2c2d      	cmp	r4, #45	@ 0x2d
 801755a:	d12d      	bne.n	80175b8 <_strtol_l.constprop.0+0x90>
 801755c:	782c      	ldrb	r4, [r5, #0]
 801755e:	2601      	movs	r6, #1
 8017560:	1c95      	adds	r5, r2, #2
 8017562:	f033 0210 	bics.w	r2, r3, #16
 8017566:	d109      	bne.n	801757c <_strtol_l.constprop.0+0x54>
 8017568:	2c30      	cmp	r4, #48	@ 0x30
 801756a:	d12a      	bne.n	80175c2 <_strtol_l.constprop.0+0x9a>
 801756c:	782a      	ldrb	r2, [r5, #0]
 801756e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8017572:	2a58      	cmp	r2, #88	@ 0x58
 8017574:	d125      	bne.n	80175c2 <_strtol_l.constprop.0+0x9a>
 8017576:	786c      	ldrb	r4, [r5, #1]
 8017578:	2310      	movs	r3, #16
 801757a:	3502      	adds	r5, #2
 801757c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8017580:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017584:	2200      	movs	r2, #0
 8017586:	fbbc f9f3 	udiv	r9, ip, r3
 801758a:	4610      	mov	r0, r2
 801758c:	fb03 ca19 	mls	sl, r3, r9, ip
 8017590:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017594:	2f09      	cmp	r7, #9
 8017596:	d81b      	bhi.n	80175d0 <_strtol_l.constprop.0+0xa8>
 8017598:	463c      	mov	r4, r7
 801759a:	42a3      	cmp	r3, r4
 801759c:	dd27      	ble.n	80175ee <_strtol_l.constprop.0+0xc6>
 801759e:	1c57      	adds	r7, r2, #1
 80175a0:	d007      	beq.n	80175b2 <_strtol_l.constprop.0+0x8a>
 80175a2:	4581      	cmp	r9, r0
 80175a4:	d320      	bcc.n	80175e8 <_strtol_l.constprop.0+0xc0>
 80175a6:	d101      	bne.n	80175ac <_strtol_l.constprop.0+0x84>
 80175a8:	45a2      	cmp	sl, r4
 80175aa:	db1d      	blt.n	80175e8 <_strtol_l.constprop.0+0xc0>
 80175ac:	fb00 4003 	mla	r0, r0, r3, r4
 80175b0:	2201      	movs	r2, #1
 80175b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175b6:	e7eb      	b.n	8017590 <_strtol_l.constprop.0+0x68>
 80175b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80175ba:	bf04      	itt	eq
 80175bc:	782c      	ldrbeq	r4, [r5, #0]
 80175be:	1c95      	addeq	r5, r2, #2
 80175c0:	e7cf      	b.n	8017562 <_strtol_l.constprop.0+0x3a>
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d1da      	bne.n	801757c <_strtol_l.constprop.0+0x54>
 80175c6:	2c30      	cmp	r4, #48	@ 0x30
 80175c8:	bf0c      	ite	eq
 80175ca:	2308      	moveq	r3, #8
 80175cc:	230a      	movne	r3, #10
 80175ce:	e7d5      	b.n	801757c <_strtol_l.constprop.0+0x54>
 80175d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80175d4:	2f19      	cmp	r7, #25
 80175d6:	d801      	bhi.n	80175dc <_strtol_l.constprop.0+0xb4>
 80175d8:	3c37      	subs	r4, #55	@ 0x37
 80175da:	e7de      	b.n	801759a <_strtol_l.constprop.0+0x72>
 80175dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80175e0:	2f19      	cmp	r7, #25
 80175e2:	d804      	bhi.n	80175ee <_strtol_l.constprop.0+0xc6>
 80175e4:	3c57      	subs	r4, #87	@ 0x57
 80175e6:	e7d8      	b.n	801759a <_strtol_l.constprop.0+0x72>
 80175e8:	f04f 32ff 	mov.w	r2, #4294967295
 80175ec:	e7e1      	b.n	80175b2 <_strtol_l.constprop.0+0x8a>
 80175ee:	1c53      	adds	r3, r2, #1
 80175f0:	d108      	bne.n	8017604 <_strtol_l.constprop.0+0xdc>
 80175f2:	2322      	movs	r3, #34	@ 0x22
 80175f4:	f8ce 3000 	str.w	r3, [lr]
 80175f8:	4660      	mov	r0, ip
 80175fa:	f1b8 0f00 	cmp.w	r8, #0
 80175fe:	d0a0      	beq.n	8017542 <_strtol_l.constprop.0+0x1a>
 8017600:	1e69      	subs	r1, r5, #1
 8017602:	e006      	b.n	8017612 <_strtol_l.constprop.0+0xea>
 8017604:	b106      	cbz	r6, 8017608 <_strtol_l.constprop.0+0xe0>
 8017606:	4240      	negs	r0, r0
 8017608:	f1b8 0f00 	cmp.w	r8, #0
 801760c:	d099      	beq.n	8017542 <_strtol_l.constprop.0+0x1a>
 801760e:	2a00      	cmp	r2, #0
 8017610:	d1f6      	bne.n	8017600 <_strtol_l.constprop.0+0xd8>
 8017612:	f8c8 1000 	str.w	r1, [r8]
 8017616:	e794      	b.n	8017542 <_strtol_l.constprop.0+0x1a>
 8017618:	0801a971 	.word	0x0801a971

0801761c <_strtol_r>:
 801761c:	f7ff bf84 	b.w	8017528 <_strtol_l.constprop.0>

08017620 <strtol>:
 8017620:	4613      	mov	r3, r2
 8017622:	460a      	mov	r2, r1
 8017624:	4601      	mov	r1, r0
 8017626:	4802      	ldr	r0, [pc, #8]	@ (8017630 <strtol+0x10>)
 8017628:	6800      	ldr	r0, [r0, #0]
 801762a:	f7ff bf7d 	b.w	8017528 <_strtol_l.constprop.0>
 801762e:	bf00      	nop
 8017630:	24000280 	.word	0x24000280

08017634 <_scanf_float>:
 8017634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017638:	b087      	sub	sp, #28
 801763a:	4617      	mov	r7, r2
 801763c:	9303      	str	r3, [sp, #12]
 801763e:	688b      	ldr	r3, [r1, #8]
 8017640:	1e5a      	subs	r2, r3, #1
 8017642:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017646:	bf81      	itttt	hi
 8017648:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801764c:	eb03 0b05 	addhi.w	fp, r3, r5
 8017650:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017654:	608b      	strhi	r3, [r1, #8]
 8017656:	680b      	ldr	r3, [r1, #0]
 8017658:	460a      	mov	r2, r1
 801765a:	f04f 0500 	mov.w	r5, #0
 801765e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8017662:	f842 3b1c 	str.w	r3, [r2], #28
 8017666:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801766a:	4680      	mov	r8, r0
 801766c:	460c      	mov	r4, r1
 801766e:	bf98      	it	ls
 8017670:	f04f 0b00 	movls.w	fp, #0
 8017674:	9201      	str	r2, [sp, #4]
 8017676:	4616      	mov	r6, r2
 8017678:	46aa      	mov	sl, r5
 801767a:	46a9      	mov	r9, r5
 801767c:	9502      	str	r5, [sp, #8]
 801767e:	68a2      	ldr	r2, [r4, #8]
 8017680:	b152      	cbz	r2, 8017698 <_scanf_float+0x64>
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	2b4e      	cmp	r3, #78	@ 0x4e
 8017688:	d864      	bhi.n	8017754 <_scanf_float+0x120>
 801768a:	2b40      	cmp	r3, #64	@ 0x40
 801768c:	d83c      	bhi.n	8017708 <_scanf_float+0xd4>
 801768e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8017692:	b2c8      	uxtb	r0, r1
 8017694:	280e      	cmp	r0, #14
 8017696:	d93a      	bls.n	801770e <_scanf_float+0xda>
 8017698:	f1b9 0f00 	cmp.w	r9, #0
 801769c:	d003      	beq.n	80176a6 <_scanf_float+0x72>
 801769e:	6823      	ldr	r3, [r4, #0]
 80176a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80176a4:	6023      	str	r3, [r4, #0]
 80176a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176aa:	f1ba 0f01 	cmp.w	sl, #1
 80176ae:	f200 8117 	bhi.w	80178e0 <_scanf_float+0x2ac>
 80176b2:	9b01      	ldr	r3, [sp, #4]
 80176b4:	429e      	cmp	r6, r3
 80176b6:	f200 8108 	bhi.w	80178ca <_scanf_float+0x296>
 80176ba:	2001      	movs	r0, #1
 80176bc:	b007      	add	sp, #28
 80176be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80176c6:	2a0d      	cmp	r2, #13
 80176c8:	d8e6      	bhi.n	8017698 <_scanf_float+0x64>
 80176ca:	a101      	add	r1, pc, #4	@ (adr r1, 80176d0 <_scanf_float+0x9c>)
 80176cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80176d0:	08017817 	.word	0x08017817
 80176d4:	08017699 	.word	0x08017699
 80176d8:	08017699 	.word	0x08017699
 80176dc:	08017699 	.word	0x08017699
 80176e0:	08017877 	.word	0x08017877
 80176e4:	0801784f 	.word	0x0801784f
 80176e8:	08017699 	.word	0x08017699
 80176ec:	08017699 	.word	0x08017699
 80176f0:	08017825 	.word	0x08017825
 80176f4:	08017699 	.word	0x08017699
 80176f8:	08017699 	.word	0x08017699
 80176fc:	08017699 	.word	0x08017699
 8017700:	08017699 	.word	0x08017699
 8017704:	080177dd 	.word	0x080177dd
 8017708:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801770c:	e7db      	b.n	80176c6 <_scanf_float+0x92>
 801770e:	290e      	cmp	r1, #14
 8017710:	d8c2      	bhi.n	8017698 <_scanf_float+0x64>
 8017712:	a001      	add	r0, pc, #4	@ (adr r0, 8017718 <_scanf_float+0xe4>)
 8017714:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017718:	080177cd 	.word	0x080177cd
 801771c:	08017699 	.word	0x08017699
 8017720:	080177cd 	.word	0x080177cd
 8017724:	08017863 	.word	0x08017863
 8017728:	08017699 	.word	0x08017699
 801772c:	08017775 	.word	0x08017775
 8017730:	080177b3 	.word	0x080177b3
 8017734:	080177b3 	.word	0x080177b3
 8017738:	080177b3 	.word	0x080177b3
 801773c:	080177b3 	.word	0x080177b3
 8017740:	080177b3 	.word	0x080177b3
 8017744:	080177b3 	.word	0x080177b3
 8017748:	080177b3 	.word	0x080177b3
 801774c:	080177b3 	.word	0x080177b3
 8017750:	080177b3 	.word	0x080177b3
 8017754:	2b6e      	cmp	r3, #110	@ 0x6e
 8017756:	d809      	bhi.n	801776c <_scanf_float+0x138>
 8017758:	2b60      	cmp	r3, #96	@ 0x60
 801775a:	d8b2      	bhi.n	80176c2 <_scanf_float+0x8e>
 801775c:	2b54      	cmp	r3, #84	@ 0x54
 801775e:	d07b      	beq.n	8017858 <_scanf_float+0x224>
 8017760:	2b59      	cmp	r3, #89	@ 0x59
 8017762:	d199      	bne.n	8017698 <_scanf_float+0x64>
 8017764:	2d07      	cmp	r5, #7
 8017766:	d197      	bne.n	8017698 <_scanf_float+0x64>
 8017768:	2508      	movs	r5, #8
 801776a:	e02c      	b.n	80177c6 <_scanf_float+0x192>
 801776c:	2b74      	cmp	r3, #116	@ 0x74
 801776e:	d073      	beq.n	8017858 <_scanf_float+0x224>
 8017770:	2b79      	cmp	r3, #121	@ 0x79
 8017772:	e7f6      	b.n	8017762 <_scanf_float+0x12e>
 8017774:	6821      	ldr	r1, [r4, #0]
 8017776:	05c8      	lsls	r0, r1, #23
 8017778:	d51b      	bpl.n	80177b2 <_scanf_float+0x17e>
 801777a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801777e:	6021      	str	r1, [r4, #0]
 8017780:	f109 0901 	add.w	r9, r9, #1
 8017784:	f1bb 0f00 	cmp.w	fp, #0
 8017788:	d003      	beq.n	8017792 <_scanf_float+0x15e>
 801778a:	3201      	adds	r2, #1
 801778c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017790:	60a2      	str	r2, [r4, #8]
 8017792:	68a3      	ldr	r3, [r4, #8]
 8017794:	3b01      	subs	r3, #1
 8017796:	60a3      	str	r3, [r4, #8]
 8017798:	6923      	ldr	r3, [r4, #16]
 801779a:	3301      	adds	r3, #1
 801779c:	6123      	str	r3, [r4, #16]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	3b01      	subs	r3, #1
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	607b      	str	r3, [r7, #4]
 80177a6:	f340 8087 	ble.w	80178b8 <_scanf_float+0x284>
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	3301      	adds	r3, #1
 80177ae:	603b      	str	r3, [r7, #0]
 80177b0:	e765      	b.n	801767e <_scanf_float+0x4a>
 80177b2:	eb1a 0105 	adds.w	r1, sl, r5
 80177b6:	f47f af6f 	bne.w	8017698 <_scanf_float+0x64>
 80177ba:	6822      	ldr	r2, [r4, #0]
 80177bc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80177c0:	6022      	str	r2, [r4, #0]
 80177c2:	460d      	mov	r5, r1
 80177c4:	468a      	mov	sl, r1
 80177c6:	f806 3b01 	strb.w	r3, [r6], #1
 80177ca:	e7e2      	b.n	8017792 <_scanf_float+0x15e>
 80177cc:	6822      	ldr	r2, [r4, #0]
 80177ce:	0610      	lsls	r0, r2, #24
 80177d0:	f57f af62 	bpl.w	8017698 <_scanf_float+0x64>
 80177d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80177d8:	6022      	str	r2, [r4, #0]
 80177da:	e7f4      	b.n	80177c6 <_scanf_float+0x192>
 80177dc:	f1ba 0f00 	cmp.w	sl, #0
 80177e0:	d10e      	bne.n	8017800 <_scanf_float+0x1cc>
 80177e2:	f1b9 0f00 	cmp.w	r9, #0
 80177e6:	d10e      	bne.n	8017806 <_scanf_float+0x1d2>
 80177e8:	6822      	ldr	r2, [r4, #0]
 80177ea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80177ee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80177f2:	d108      	bne.n	8017806 <_scanf_float+0x1d2>
 80177f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80177f8:	6022      	str	r2, [r4, #0]
 80177fa:	f04f 0a01 	mov.w	sl, #1
 80177fe:	e7e2      	b.n	80177c6 <_scanf_float+0x192>
 8017800:	f1ba 0f02 	cmp.w	sl, #2
 8017804:	d055      	beq.n	80178b2 <_scanf_float+0x27e>
 8017806:	2d01      	cmp	r5, #1
 8017808:	d002      	beq.n	8017810 <_scanf_float+0x1dc>
 801780a:	2d04      	cmp	r5, #4
 801780c:	f47f af44 	bne.w	8017698 <_scanf_float+0x64>
 8017810:	3501      	adds	r5, #1
 8017812:	b2ed      	uxtb	r5, r5
 8017814:	e7d7      	b.n	80177c6 <_scanf_float+0x192>
 8017816:	f1ba 0f01 	cmp.w	sl, #1
 801781a:	f47f af3d 	bne.w	8017698 <_scanf_float+0x64>
 801781e:	f04f 0a02 	mov.w	sl, #2
 8017822:	e7d0      	b.n	80177c6 <_scanf_float+0x192>
 8017824:	b97d      	cbnz	r5, 8017846 <_scanf_float+0x212>
 8017826:	f1b9 0f00 	cmp.w	r9, #0
 801782a:	f47f af38 	bne.w	801769e <_scanf_float+0x6a>
 801782e:	6822      	ldr	r2, [r4, #0]
 8017830:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8017834:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8017838:	f040 8101 	bne.w	8017a3e <_scanf_float+0x40a>
 801783c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8017840:	6022      	str	r2, [r4, #0]
 8017842:	2501      	movs	r5, #1
 8017844:	e7bf      	b.n	80177c6 <_scanf_float+0x192>
 8017846:	2d03      	cmp	r5, #3
 8017848:	d0e2      	beq.n	8017810 <_scanf_float+0x1dc>
 801784a:	2d05      	cmp	r5, #5
 801784c:	e7de      	b.n	801780c <_scanf_float+0x1d8>
 801784e:	2d02      	cmp	r5, #2
 8017850:	f47f af22 	bne.w	8017698 <_scanf_float+0x64>
 8017854:	2503      	movs	r5, #3
 8017856:	e7b6      	b.n	80177c6 <_scanf_float+0x192>
 8017858:	2d06      	cmp	r5, #6
 801785a:	f47f af1d 	bne.w	8017698 <_scanf_float+0x64>
 801785e:	2507      	movs	r5, #7
 8017860:	e7b1      	b.n	80177c6 <_scanf_float+0x192>
 8017862:	6822      	ldr	r2, [r4, #0]
 8017864:	0591      	lsls	r1, r2, #22
 8017866:	f57f af17 	bpl.w	8017698 <_scanf_float+0x64>
 801786a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801786e:	6022      	str	r2, [r4, #0]
 8017870:	f8cd 9008 	str.w	r9, [sp, #8]
 8017874:	e7a7      	b.n	80177c6 <_scanf_float+0x192>
 8017876:	6822      	ldr	r2, [r4, #0]
 8017878:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801787c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8017880:	d006      	beq.n	8017890 <_scanf_float+0x25c>
 8017882:	0550      	lsls	r0, r2, #21
 8017884:	f57f af08 	bpl.w	8017698 <_scanf_float+0x64>
 8017888:	f1b9 0f00 	cmp.w	r9, #0
 801788c:	f000 80d7 	beq.w	8017a3e <_scanf_float+0x40a>
 8017890:	0591      	lsls	r1, r2, #22
 8017892:	bf58      	it	pl
 8017894:	9902      	ldrpl	r1, [sp, #8]
 8017896:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801789a:	bf58      	it	pl
 801789c:	eba9 0101 	subpl.w	r1, r9, r1
 80178a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80178a4:	bf58      	it	pl
 80178a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80178aa:	6022      	str	r2, [r4, #0]
 80178ac:	f04f 0900 	mov.w	r9, #0
 80178b0:	e789      	b.n	80177c6 <_scanf_float+0x192>
 80178b2:	f04f 0a03 	mov.w	sl, #3
 80178b6:	e786      	b.n	80177c6 <_scanf_float+0x192>
 80178b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80178bc:	4639      	mov	r1, r7
 80178be:	4640      	mov	r0, r8
 80178c0:	4798      	blx	r3
 80178c2:	2800      	cmp	r0, #0
 80178c4:	f43f aedb 	beq.w	801767e <_scanf_float+0x4a>
 80178c8:	e6e6      	b.n	8017698 <_scanf_float+0x64>
 80178ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80178ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80178d2:	463a      	mov	r2, r7
 80178d4:	4640      	mov	r0, r8
 80178d6:	4798      	blx	r3
 80178d8:	6923      	ldr	r3, [r4, #16]
 80178da:	3b01      	subs	r3, #1
 80178dc:	6123      	str	r3, [r4, #16]
 80178de:	e6e8      	b.n	80176b2 <_scanf_float+0x7e>
 80178e0:	1e6b      	subs	r3, r5, #1
 80178e2:	2b06      	cmp	r3, #6
 80178e4:	d824      	bhi.n	8017930 <_scanf_float+0x2fc>
 80178e6:	2d02      	cmp	r5, #2
 80178e8:	d836      	bhi.n	8017958 <_scanf_float+0x324>
 80178ea:	9b01      	ldr	r3, [sp, #4]
 80178ec:	429e      	cmp	r6, r3
 80178ee:	f67f aee4 	bls.w	80176ba <_scanf_float+0x86>
 80178f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80178f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80178fa:	463a      	mov	r2, r7
 80178fc:	4640      	mov	r0, r8
 80178fe:	4798      	blx	r3
 8017900:	6923      	ldr	r3, [r4, #16]
 8017902:	3b01      	subs	r3, #1
 8017904:	6123      	str	r3, [r4, #16]
 8017906:	e7f0      	b.n	80178ea <_scanf_float+0x2b6>
 8017908:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801790c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8017910:	463a      	mov	r2, r7
 8017912:	4640      	mov	r0, r8
 8017914:	4798      	blx	r3
 8017916:	6923      	ldr	r3, [r4, #16]
 8017918:	3b01      	subs	r3, #1
 801791a:	6123      	str	r3, [r4, #16]
 801791c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017920:	fa5f fa8a 	uxtb.w	sl, sl
 8017924:	f1ba 0f02 	cmp.w	sl, #2
 8017928:	d1ee      	bne.n	8017908 <_scanf_float+0x2d4>
 801792a:	3d03      	subs	r5, #3
 801792c:	b2ed      	uxtb	r5, r5
 801792e:	1b76      	subs	r6, r6, r5
 8017930:	6823      	ldr	r3, [r4, #0]
 8017932:	05da      	lsls	r2, r3, #23
 8017934:	d530      	bpl.n	8017998 <_scanf_float+0x364>
 8017936:	055b      	lsls	r3, r3, #21
 8017938:	d511      	bpl.n	801795e <_scanf_float+0x32a>
 801793a:	9b01      	ldr	r3, [sp, #4]
 801793c:	429e      	cmp	r6, r3
 801793e:	f67f aebc 	bls.w	80176ba <_scanf_float+0x86>
 8017942:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017946:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801794a:	463a      	mov	r2, r7
 801794c:	4640      	mov	r0, r8
 801794e:	4798      	blx	r3
 8017950:	6923      	ldr	r3, [r4, #16]
 8017952:	3b01      	subs	r3, #1
 8017954:	6123      	str	r3, [r4, #16]
 8017956:	e7f0      	b.n	801793a <_scanf_float+0x306>
 8017958:	46aa      	mov	sl, r5
 801795a:	46b3      	mov	fp, r6
 801795c:	e7de      	b.n	801791c <_scanf_float+0x2e8>
 801795e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017962:	6923      	ldr	r3, [r4, #16]
 8017964:	2965      	cmp	r1, #101	@ 0x65
 8017966:	f103 33ff 	add.w	r3, r3, #4294967295
 801796a:	f106 35ff 	add.w	r5, r6, #4294967295
 801796e:	6123      	str	r3, [r4, #16]
 8017970:	d00c      	beq.n	801798c <_scanf_float+0x358>
 8017972:	2945      	cmp	r1, #69	@ 0x45
 8017974:	d00a      	beq.n	801798c <_scanf_float+0x358>
 8017976:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801797a:	463a      	mov	r2, r7
 801797c:	4640      	mov	r0, r8
 801797e:	4798      	blx	r3
 8017980:	6923      	ldr	r3, [r4, #16]
 8017982:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017986:	3b01      	subs	r3, #1
 8017988:	1eb5      	subs	r5, r6, #2
 801798a:	6123      	str	r3, [r4, #16]
 801798c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017990:	463a      	mov	r2, r7
 8017992:	4640      	mov	r0, r8
 8017994:	4798      	blx	r3
 8017996:	462e      	mov	r6, r5
 8017998:	6822      	ldr	r2, [r4, #0]
 801799a:	f012 0210 	ands.w	r2, r2, #16
 801799e:	d001      	beq.n	80179a4 <_scanf_float+0x370>
 80179a0:	2000      	movs	r0, #0
 80179a2:	e68b      	b.n	80176bc <_scanf_float+0x88>
 80179a4:	7032      	strb	r2, [r6, #0]
 80179a6:	6823      	ldr	r3, [r4, #0]
 80179a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80179ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80179b0:	d11a      	bne.n	80179e8 <_scanf_float+0x3b4>
 80179b2:	9b02      	ldr	r3, [sp, #8]
 80179b4:	454b      	cmp	r3, r9
 80179b6:	eba3 0209 	sub.w	r2, r3, r9
 80179ba:	d121      	bne.n	8017a00 <_scanf_float+0x3cc>
 80179bc:	9901      	ldr	r1, [sp, #4]
 80179be:	2200      	movs	r2, #0
 80179c0:	4640      	mov	r0, r8
 80179c2:	f7ff fd9f 	bl	8017504 <_strtod_r>
 80179c6:	9b03      	ldr	r3, [sp, #12]
 80179c8:	6821      	ldr	r1, [r4, #0]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	f011 0f02 	tst.w	r1, #2
 80179d0:	f103 0204 	add.w	r2, r3, #4
 80179d4:	d01f      	beq.n	8017a16 <_scanf_float+0x3e2>
 80179d6:	9903      	ldr	r1, [sp, #12]
 80179d8:	600a      	str	r2, [r1, #0]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	ed83 0b00 	vstr	d0, [r3]
 80179e0:	68e3      	ldr	r3, [r4, #12]
 80179e2:	3301      	adds	r3, #1
 80179e4:	60e3      	str	r3, [r4, #12]
 80179e6:	e7db      	b.n	80179a0 <_scanf_float+0x36c>
 80179e8:	9b04      	ldr	r3, [sp, #16]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d0e6      	beq.n	80179bc <_scanf_float+0x388>
 80179ee:	9905      	ldr	r1, [sp, #20]
 80179f0:	230a      	movs	r3, #10
 80179f2:	3101      	adds	r1, #1
 80179f4:	4640      	mov	r0, r8
 80179f6:	f7ff fe11 	bl	801761c <_strtol_r>
 80179fa:	9b04      	ldr	r3, [sp, #16]
 80179fc:	9e05      	ldr	r6, [sp, #20]
 80179fe:	1ac2      	subs	r2, r0, r3
 8017a00:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8017a04:	429e      	cmp	r6, r3
 8017a06:	bf28      	it	cs
 8017a08:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8017a0c:	490d      	ldr	r1, [pc, #52]	@ (8017a44 <_scanf_float+0x410>)
 8017a0e:	4630      	mov	r0, r6
 8017a10:	f000 fa0e 	bl	8017e30 <siprintf>
 8017a14:	e7d2      	b.n	80179bc <_scanf_float+0x388>
 8017a16:	f011 0f04 	tst.w	r1, #4
 8017a1a:	9903      	ldr	r1, [sp, #12]
 8017a1c:	600a      	str	r2, [r1, #0]
 8017a1e:	d1dc      	bne.n	80179da <_scanf_float+0x3a6>
 8017a20:	eeb4 0b40 	vcmp.f64	d0, d0
 8017a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a28:	681d      	ldr	r5, [r3, #0]
 8017a2a:	d705      	bvc.n	8017a38 <_scanf_float+0x404>
 8017a2c:	4806      	ldr	r0, [pc, #24]	@ (8017a48 <_scanf_float+0x414>)
 8017a2e:	f000 fca7 	bl	8018380 <nanf>
 8017a32:	ed85 0a00 	vstr	s0, [r5]
 8017a36:	e7d3      	b.n	80179e0 <_scanf_float+0x3ac>
 8017a38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017a3c:	e7f9      	b.n	8017a32 <_scanf_float+0x3fe>
 8017a3e:	f04f 0900 	mov.w	r9, #0
 8017a42:	e630      	b.n	80176a6 <_scanf_float+0x72>
 8017a44:	0801aa71 	.word	0x0801aa71
 8017a48:	0801ab2a 	.word	0x0801ab2a

08017a4c <__sflush_r>:
 8017a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a54:	0716      	lsls	r6, r2, #28
 8017a56:	4605      	mov	r5, r0
 8017a58:	460c      	mov	r4, r1
 8017a5a:	d454      	bmi.n	8017b06 <__sflush_r+0xba>
 8017a5c:	684b      	ldr	r3, [r1, #4]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	dc02      	bgt.n	8017a68 <__sflush_r+0x1c>
 8017a62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	dd48      	ble.n	8017afa <__sflush_r+0xae>
 8017a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a6a:	2e00      	cmp	r6, #0
 8017a6c:	d045      	beq.n	8017afa <__sflush_r+0xae>
 8017a6e:	2300      	movs	r3, #0
 8017a70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017a74:	682f      	ldr	r7, [r5, #0]
 8017a76:	6a21      	ldr	r1, [r4, #32]
 8017a78:	602b      	str	r3, [r5, #0]
 8017a7a:	d030      	beq.n	8017ade <__sflush_r+0x92>
 8017a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a7e:	89a3      	ldrh	r3, [r4, #12]
 8017a80:	0759      	lsls	r1, r3, #29
 8017a82:	d505      	bpl.n	8017a90 <__sflush_r+0x44>
 8017a84:	6863      	ldr	r3, [r4, #4]
 8017a86:	1ad2      	subs	r2, r2, r3
 8017a88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a8a:	b10b      	cbz	r3, 8017a90 <__sflush_r+0x44>
 8017a8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017a8e:	1ad2      	subs	r2, r2, r3
 8017a90:	2300      	movs	r3, #0
 8017a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a94:	6a21      	ldr	r1, [r4, #32]
 8017a96:	4628      	mov	r0, r5
 8017a98:	47b0      	blx	r6
 8017a9a:	1c43      	adds	r3, r0, #1
 8017a9c:	89a3      	ldrh	r3, [r4, #12]
 8017a9e:	d106      	bne.n	8017aae <__sflush_r+0x62>
 8017aa0:	6829      	ldr	r1, [r5, #0]
 8017aa2:	291d      	cmp	r1, #29
 8017aa4:	d82b      	bhi.n	8017afe <__sflush_r+0xb2>
 8017aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8017b50 <__sflush_r+0x104>)
 8017aa8:	410a      	asrs	r2, r1
 8017aaa:	07d6      	lsls	r6, r2, #31
 8017aac:	d427      	bmi.n	8017afe <__sflush_r+0xb2>
 8017aae:	2200      	movs	r2, #0
 8017ab0:	6062      	str	r2, [r4, #4]
 8017ab2:	04d9      	lsls	r1, r3, #19
 8017ab4:	6922      	ldr	r2, [r4, #16]
 8017ab6:	6022      	str	r2, [r4, #0]
 8017ab8:	d504      	bpl.n	8017ac4 <__sflush_r+0x78>
 8017aba:	1c42      	adds	r2, r0, #1
 8017abc:	d101      	bne.n	8017ac2 <__sflush_r+0x76>
 8017abe:	682b      	ldr	r3, [r5, #0]
 8017ac0:	b903      	cbnz	r3, 8017ac4 <__sflush_r+0x78>
 8017ac2:	6560      	str	r0, [r4, #84]	@ 0x54
 8017ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ac6:	602f      	str	r7, [r5, #0]
 8017ac8:	b1b9      	cbz	r1, 8017afa <__sflush_r+0xae>
 8017aca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ace:	4299      	cmp	r1, r3
 8017ad0:	d002      	beq.n	8017ad8 <__sflush_r+0x8c>
 8017ad2:	4628      	mov	r0, r5
 8017ad4:	f000 fc78 	bl	80183c8 <_free_r>
 8017ad8:	2300      	movs	r3, #0
 8017ada:	6363      	str	r3, [r4, #52]	@ 0x34
 8017adc:	e00d      	b.n	8017afa <__sflush_r+0xae>
 8017ade:	2301      	movs	r3, #1
 8017ae0:	4628      	mov	r0, r5
 8017ae2:	47b0      	blx	r6
 8017ae4:	4602      	mov	r2, r0
 8017ae6:	1c50      	adds	r0, r2, #1
 8017ae8:	d1c9      	bne.n	8017a7e <__sflush_r+0x32>
 8017aea:	682b      	ldr	r3, [r5, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d0c6      	beq.n	8017a7e <__sflush_r+0x32>
 8017af0:	2b1d      	cmp	r3, #29
 8017af2:	d001      	beq.n	8017af8 <__sflush_r+0xac>
 8017af4:	2b16      	cmp	r3, #22
 8017af6:	d11e      	bne.n	8017b36 <__sflush_r+0xea>
 8017af8:	602f      	str	r7, [r5, #0]
 8017afa:	2000      	movs	r0, #0
 8017afc:	e022      	b.n	8017b44 <__sflush_r+0xf8>
 8017afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b02:	b21b      	sxth	r3, r3
 8017b04:	e01b      	b.n	8017b3e <__sflush_r+0xf2>
 8017b06:	690f      	ldr	r7, [r1, #16]
 8017b08:	2f00      	cmp	r7, #0
 8017b0a:	d0f6      	beq.n	8017afa <__sflush_r+0xae>
 8017b0c:	0793      	lsls	r3, r2, #30
 8017b0e:	680e      	ldr	r6, [r1, #0]
 8017b10:	bf08      	it	eq
 8017b12:	694b      	ldreq	r3, [r1, #20]
 8017b14:	600f      	str	r7, [r1, #0]
 8017b16:	bf18      	it	ne
 8017b18:	2300      	movne	r3, #0
 8017b1a:	eba6 0807 	sub.w	r8, r6, r7
 8017b1e:	608b      	str	r3, [r1, #8]
 8017b20:	f1b8 0f00 	cmp.w	r8, #0
 8017b24:	dde9      	ble.n	8017afa <__sflush_r+0xae>
 8017b26:	6a21      	ldr	r1, [r4, #32]
 8017b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017b2a:	4643      	mov	r3, r8
 8017b2c:	463a      	mov	r2, r7
 8017b2e:	4628      	mov	r0, r5
 8017b30:	47b0      	blx	r6
 8017b32:	2800      	cmp	r0, #0
 8017b34:	dc08      	bgt.n	8017b48 <__sflush_r+0xfc>
 8017b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b3e:	81a3      	strh	r3, [r4, #12]
 8017b40:	f04f 30ff 	mov.w	r0, #4294967295
 8017b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b48:	4407      	add	r7, r0
 8017b4a:	eba8 0800 	sub.w	r8, r8, r0
 8017b4e:	e7e7      	b.n	8017b20 <__sflush_r+0xd4>
 8017b50:	dfbffffe 	.word	0xdfbffffe

08017b54 <_fflush_r>:
 8017b54:	b538      	push	{r3, r4, r5, lr}
 8017b56:	690b      	ldr	r3, [r1, #16]
 8017b58:	4605      	mov	r5, r0
 8017b5a:	460c      	mov	r4, r1
 8017b5c:	b913      	cbnz	r3, 8017b64 <_fflush_r+0x10>
 8017b5e:	2500      	movs	r5, #0
 8017b60:	4628      	mov	r0, r5
 8017b62:	bd38      	pop	{r3, r4, r5, pc}
 8017b64:	b118      	cbz	r0, 8017b6e <_fflush_r+0x1a>
 8017b66:	6a03      	ldr	r3, [r0, #32]
 8017b68:	b90b      	cbnz	r3, 8017b6e <_fflush_r+0x1a>
 8017b6a:	f000 f8bb 	bl	8017ce4 <__sinit>
 8017b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d0f3      	beq.n	8017b5e <_fflush_r+0xa>
 8017b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017b78:	07d0      	lsls	r0, r2, #31
 8017b7a:	d404      	bmi.n	8017b86 <_fflush_r+0x32>
 8017b7c:	0599      	lsls	r1, r3, #22
 8017b7e:	d402      	bmi.n	8017b86 <_fflush_r+0x32>
 8017b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b82:	f000 fbe2 	bl	801834a <__retarget_lock_acquire_recursive>
 8017b86:	4628      	mov	r0, r5
 8017b88:	4621      	mov	r1, r4
 8017b8a:	f7ff ff5f 	bl	8017a4c <__sflush_r>
 8017b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017b90:	07da      	lsls	r2, r3, #31
 8017b92:	4605      	mov	r5, r0
 8017b94:	d4e4      	bmi.n	8017b60 <_fflush_r+0xc>
 8017b96:	89a3      	ldrh	r3, [r4, #12]
 8017b98:	059b      	lsls	r3, r3, #22
 8017b9a:	d4e1      	bmi.n	8017b60 <_fflush_r+0xc>
 8017b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b9e:	f000 fbd5 	bl	801834c <__retarget_lock_release_recursive>
 8017ba2:	e7dd      	b.n	8017b60 <_fflush_r+0xc>

08017ba4 <fflush>:
 8017ba4:	4601      	mov	r1, r0
 8017ba6:	b920      	cbnz	r0, 8017bb2 <fflush+0xe>
 8017ba8:	4a04      	ldr	r2, [pc, #16]	@ (8017bbc <fflush+0x18>)
 8017baa:	4905      	ldr	r1, [pc, #20]	@ (8017bc0 <fflush+0x1c>)
 8017bac:	4805      	ldr	r0, [pc, #20]	@ (8017bc4 <fflush+0x20>)
 8017bae:	f000 b8b1 	b.w	8017d14 <_fwalk_sglue>
 8017bb2:	4b05      	ldr	r3, [pc, #20]	@ (8017bc8 <fflush+0x24>)
 8017bb4:	6818      	ldr	r0, [r3, #0]
 8017bb6:	f7ff bfcd 	b.w	8017b54 <_fflush_r>
 8017bba:	bf00      	nop
 8017bbc:	24000108 	.word	0x24000108
 8017bc0:	08017b55 	.word	0x08017b55
 8017bc4:	24000284 	.word	0x24000284
 8017bc8:	24000280 	.word	0x24000280

08017bcc <std>:
 8017bcc:	2300      	movs	r3, #0
 8017bce:	b510      	push	{r4, lr}
 8017bd0:	4604      	mov	r4, r0
 8017bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8017bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017bda:	6083      	str	r3, [r0, #8]
 8017bdc:	8181      	strh	r1, [r0, #12]
 8017bde:	6643      	str	r3, [r0, #100]	@ 0x64
 8017be0:	81c2      	strh	r2, [r0, #14]
 8017be2:	6183      	str	r3, [r0, #24]
 8017be4:	4619      	mov	r1, r3
 8017be6:	2208      	movs	r2, #8
 8017be8:	305c      	adds	r0, #92	@ 0x5c
 8017bea:	f000 fa45 	bl	8018078 <memset>
 8017bee:	4b0d      	ldr	r3, [pc, #52]	@ (8017c24 <std+0x58>)
 8017bf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8017bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8017c28 <std+0x5c>)
 8017bf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8017c2c <std+0x60>)
 8017bf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8017c30 <std+0x64>)
 8017bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8017bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8017c34 <std+0x68>)
 8017c00:	6224      	str	r4, [r4, #32]
 8017c02:	429c      	cmp	r4, r3
 8017c04:	d006      	beq.n	8017c14 <std+0x48>
 8017c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017c0a:	4294      	cmp	r4, r2
 8017c0c:	d002      	beq.n	8017c14 <std+0x48>
 8017c0e:	33d0      	adds	r3, #208	@ 0xd0
 8017c10:	429c      	cmp	r4, r3
 8017c12:	d105      	bne.n	8017c20 <std+0x54>
 8017c14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c1c:	f000 bb94 	b.w	8018348 <__retarget_lock_init_recursive>
 8017c20:	bd10      	pop	{r4, pc}
 8017c22:	bf00      	nop
 8017c24:	08017ec5 	.word	0x08017ec5
 8017c28:	08017eeb 	.word	0x08017eeb
 8017c2c:	08017f23 	.word	0x08017f23
 8017c30:	08017f47 	.word	0x08017f47
 8017c34:	2407758c 	.word	0x2407758c

08017c38 <stdio_exit_handler>:
 8017c38:	4a02      	ldr	r2, [pc, #8]	@ (8017c44 <stdio_exit_handler+0xc>)
 8017c3a:	4903      	ldr	r1, [pc, #12]	@ (8017c48 <stdio_exit_handler+0x10>)
 8017c3c:	4803      	ldr	r0, [pc, #12]	@ (8017c4c <stdio_exit_handler+0x14>)
 8017c3e:	f000 b869 	b.w	8017d14 <_fwalk_sglue>
 8017c42:	bf00      	nop
 8017c44:	24000108 	.word	0x24000108
 8017c48:	08017b55 	.word	0x08017b55
 8017c4c:	24000284 	.word	0x24000284

08017c50 <cleanup_stdio>:
 8017c50:	6841      	ldr	r1, [r0, #4]
 8017c52:	4b0c      	ldr	r3, [pc, #48]	@ (8017c84 <cleanup_stdio+0x34>)
 8017c54:	4299      	cmp	r1, r3
 8017c56:	b510      	push	{r4, lr}
 8017c58:	4604      	mov	r4, r0
 8017c5a:	d001      	beq.n	8017c60 <cleanup_stdio+0x10>
 8017c5c:	f7ff ff7a 	bl	8017b54 <_fflush_r>
 8017c60:	68a1      	ldr	r1, [r4, #8]
 8017c62:	4b09      	ldr	r3, [pc, #36]	@ (8017c88 <cleanup_stdio+0x38>)
 8017c64:	4299      	cmp	r1, r3
 8017c66:	d002      	beq.n	8017c6e <cleanup_stdio+0x1e>
 8017c68:	4620      	mov	r0, r4
 8017c6a:	f7ff ff73 	bl	8017b54 <_fflush_r>
 8017c6e:	68e1      	ldr	r1, [r4, #12]
 8017c70:	4b06      	ldr	r3, [pc, #24]	@ (8017c8c <cleanup_stdio+0x3c>)
 8017c72:	4299      	cmp	r1, r3
 8017c74:	d004      	beq.n	8017c80 <cleanup_stdio+0x30>
 8017c76:	4620      	mov	r0, r4
 8017c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c7c:	f7ff bf6a 	b.w	8017b54 <_fflush_r>
 8017c80:	bd10      	pop	{r4, pc}
 8017c82:	bf00      	nop
 8017c84:	2407758c 	.word	0x2407758c
 8017c88:	240775f4 	.word	0x240775f4
 8017c8c:	2407765c 	.word	0x2407765c

08017c90 <global_stdio_init.part.0>:
 8017c90:	b510      	push	{r4, lr}
 8017c92:	4b0b      	ldr	r3, [pc, #44]	@ (8017cc0 <global_stdio_init.part.0+0x30>)
 8017c94:	4c0b      	ldr	r4, [pc, #44]	@ (8017cc4 <global_stdio_init.part.0+0x34>)
 8017c96:	4a0c      	ldr	r2, [pc, #48]	@ (8017cc8 <global_stdio_init.part.0+0x38>)
 8017c98:	601a      	str	r2, [r3, #0]
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	2104      	movs	r1, #4
 8017ca0:	f7ff ff94 	bl	8017bcc <std>
 8017ca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017ca8:	2201      	movs	r2, #1
 8017caa:	2109      	movs	r1, #9
 8017cac:	f7ff ff8e 	bl	8017bcc <std>
 8017cb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017cb4:	2202      	movs	r2, #2
 8017cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cba:	2112      	movs	r1, #18
 8017cbc:	f7ff bf86 	b.w	8017bcc <std>
 8017cc0:	240776c4 	.word	0x240776c4
 8017cc4:	2407758c 	.word	0x2407758c
 8017cc8:	08017c39 	.word	0x08017c39

08017ccc <__sfp_lock_acquire>:
 8017ccc:	4801      	ldr	r0, [pc, #4]	@ (8017cd4 <__sfp_lock_acquire+0x8>)
 8017cce:	f000 bb3c 	b.w	801834a <__retarget_lock_acquire_recursive>
 8017cd2:	bf00      	nop
 8017cd4:	240776cd 	.word	0x240776cd

08017cd8 <__sfp_lock_release>:
 8017cd8:	4801      	ldr	r0, [pc, #4]	@ (8017ce0 <__sfp_lock_release+0x8>)
 8017cda:	f000 bb37 	b.w	801834c <__retarget_lock_release_recursive>
 8017cde:	bf00      	nop
 8017ce0:	240776cd 	.word	0x240776cd

08017ce4 <__sinit>:
 8017ce4:	b510      	push	{r4, lr}
 8017ce6:	4604      	mov	r4, r0
 8017ce8:	f7ff fff0 	bl	8017ccc <__sfp_lock_acquire>
 8017cec:	6a23      	ldr	r3, [r4, #32]
 8017cee:	b11b      	cbz	r3, 8017cf8 <__sinit+0x14>
 8017cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cf4:	f7ff bff0 	b.w	8017cd8 <__sfp_lock_release>
 8017cf8:	4b04      	ldr	r3, [pc, #16]	@ (8017d0c <__sinit+0x28>)
 8017cfa:	6223      	str	r3, [r4, #32]
 8017cfc:	4b04      	ldr	r3, [pc, #16]	@ (8017d10 <__sinit+0x2c>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1f5      	bne.n	8017cf0 <__sinit+0xc>
 8017d04:	f7ff ffc4 	bl	8017c90 <global_stdio_init.part.0>
 8017d08:	e7f2      	b.n	8017cf0 <__sinit+0xc>
 8017d0a:	bf00      	nop
 8017d0c:	08017c51 	.word	0x08017c51
 8017d10:	240776c4 	.word	0x240776c4

08017d14 <_fwalk_sglue>:
 8017d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d18:	4607      	mov	r7, r0
 8017d1a:	4688      	mov	r8, r1
 8017d1c:	4614      	mov	r4, r2
 8017d1e:	2600      	movs	r6, #0
 8017d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017d24:	f1b9 0901 	subs.w	r9, r9, #1
 8017d28:	d505      	bpl.n	8017d36 <_fwalk_sglue+0x22>
 8017d2a:	6824      	ldr	r4, [r4, #0]
 8017d2c:	2c00      	cmp	r4, #0
 8017d2e:	d1f7      	bne.n	8017d20 <_fwalk_sglue+0xc>
 8017d30:	4630      	mov	r0, r6
 8017d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d36:	89ab      	ldrh	r3, [r5, #12]
 8017d38:	2b01      	cmp	r3, #1
 8017d3a:	d907      	bls.n	8017d4c <_fwalk_sglue+0x38>
 8017d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017d40:	3301      	adds	r3, #1
 8017d42:	d003      	beq.n	8017d4c <_fwalk_sglue+0x38>
 8017d44:	4629      	mov	r1, r5
 8017d46:	4638      	mov	r0, r7
 8017d48:	47c0      	blx	r8
 8017d4a:	4306      	orrs	r6, r0
 8017d4c:	3568      	adds	r5, #104	@ 0x68
 8017d4e:	e7e9      	b.n	8017d24 <_fwalk_sglue+0x10>

08017d50 <iprintf>:
 8017d50:	b40f      	push	{r0, r1, r2, r3}
 8017d52:	b507      	push	{r0, r1, r2, lr}
 8017d54:	4906      	ldr	r1, [pc, #24]	@ (8017d70 <iprintf+0x20>)
 8017d56:	ab04      	add	r3, sp, #16
 8017d58:	6808      	ldr	r0, [r1, #0]
 8017d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d5e:	6881      	ldr	r1, [r0, #8]
 8017d60:	9301      	str	r3, [sp, #4]
 8017d62:	f001 fed1 	bl	8019b08 <_vfiprintf_r>
 8017d66:	b003      	add	sp, #12
 8017d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d6c:	b004      	add	sp, #16
 8017d6e:	4770      	bx	lr
 8017d70:	24000280 	.word	0x24000280

08017d74 <_puts_r>:
 8017d74:	6a03      	ldr	r3, [r0, #32]
 8017d76:	b570      	push	{r4, r5, r6, lr}
 8017d78:	6884      	ldr	r4, [r0, #8]
 8017d7a:	4605      	mov	r5, r0
 8017d7c:	460e      	mov	r6, r1
 8017d7e:	b90b      	cbnz	r3, 8017d84 <_puts_r+0x10>
 8017d80:	f7ff ffb0 	bl	8017ce4 <__sinit>
 8017d84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017d86:	07db      	lsls	r3, r3, #31
 8017d88:	d405      	bmi.n	8017d96 <_puts_r+0x22>
 8017d8a:	89a3      	ldrh	r3, [r4, #12]
 8017d8c:	0598      	lsls	r0, r3, #22
 8017d8e:	d402      	bmi.n	8017d96 <_puts_r+0x22>
 8017d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d92:	f000 fada 	bl	801834a <__retarget_lock_acquire_recursive>
 8017d96:	89a3      	ldrh	r3, [r4, #12]
 8017d98:	0719      	lsls	r1, r3, #28
 8017d9a:	d502      	bpl.n	8017da2 <_puts_r+0x2e>
 8017d9c:	6923      	ldr	r3, [r4, #16]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d135      	bne.n	8017e0e <_puts_r+0x9a>
 8017da2:	4621      	mov	r1, r4
 8017da4:	4628      	mov	r0, r5
 8017da6:	f000 f911 	bl	8017fcc <__swsetup_r>
 8017daa:	b380      	cbz	r0, 8017e0e <_puts_r+0x9a>
 8017dac:	f04f 35ff 	mov.w	r5, #4294967295
 8017db0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017db2:	07da      	lsls	r2, r3, #31
 8017db4:	d405      	bmi.n	8017dc2 <_puts_r+0x4e>
 8017db6:	89a3      	ldrh	r3, [r4, #12]
 8017db8:	059b      	lsls	r3, r3, #22
 8017dba:	d402      	bmi.n	8017dc2 <_puts_r+0x4e>
 8017dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017dbe:	f000 fac5 	bl	801834c <__retarget_lock_release_recursive>
 8017dc2:	4628      	mov	r0, r5
 8017dc4:	bd70      	pop	{r4, r5, r6, pc}
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	da04      	bge.n	8017dd4 <_puts_r+0x60>
 8017dca:	69a2      	ldr	r2, [r4, #24]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	dc17      	bgt.n	8017e00 <_puts_r+0x8c>
 8017dd0:	290a      	cmp	r1, #10
 8017dd2:	d015      	beq.n	8017e00 <_puts_r+0x8c>
 8017dd4:	6823      	ldr	r3, [r4, #0]
 8017dd6:	1c5a      	adds	r2, r3, #1
 8017dd8:	6022      	str	r2, [r4, #0]
 8017dda:	7019      	strb	r1, [r3, #0]
 8017ddc:	68a3      	ldr	r3, [r4, #8]
 8017dde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017de2:	3b01      	subs	r3, #1
 8017de4:	60a3      	str	r3, [r4, #8]
 8017de6:	2900      	cmp	r1, #0
 8017de8:	d1ed      	bne.n	8017dc6 <_puts_r+0x52>
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	da11      	bge.n	8017e12 <_puts_r+0x9e>
 8017dee:	4622      	mov	r2, r4
 8017df0:	210a      	movs	r1, #10
 8017df2:	4628      	mov	r0, r5
 8017df4:	f000 f8ab 	bl	8017f4e <__swbuf_r>
 8017df8:	3001      	adds	r0, #1
 8017dfa:	d0d7      	beq.n	8017dac <_puts_r+0x38>
 8017dfc:	250a      	movs	r5, #10
 8017dfe:	e7d7      	b.n	8017db0 <_puts_r+0x3c>
 8017e00:	4622      	mov	r2, r4
 8017e02:	4628      	mov	r0, r5
 8017e04:	f000 f8a3 	bl	8017f4e <__swbuf_r>
 8017e08:	3001      	adds	r0, #1
 8017e0a:	d1e7      	bne.n	8017ddc <_puts_r+0x68>
 8017e0c:	e7ce      	b.n	8017dac <_puts_r+0x38>
 8017e0e:	3e01      	subs	r6, #1
 8017e10:	e7e4      	b.n	8017ddc <_puts_r+0x68>
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	1c5a      	adds	r2, r3, #1
 8017e16:	6022      	str	r2, [r4, #0]
 8017e18:	220a      	movs	r2, #10
 8017e1a:	701a      	strb	r2, [r3, #0]
 8017e1c:	e7ee      	b.n	8017dfc <_puts_r+0x88>
	...

08017e20 <puts>:
 8017e20:	4b02      	ldr	r3, [pc, #8]	@ (8017e2c <puts+0xc>)
 8017e22:	4601      	mov	r1, r0
 8017e24:	6818      	ldr	r0, [r3, #0]
 8017e26:	f7ff bfa5 	b.w	8017d74 <_puts_r>
 8017e2a:	bf00      	nop
 8017e2c:	24000280 	.word	0x24000280

08017e30 <siprintf>:
 8017e30:	b40e      	push	{r1, r2, r3}
 8017e32:	b500      	push	{lr}
 8017e34:	b09c      	sub	sp, #112	@ 0x70
 8017e36:	ab1d      	add	r3, sp, #116	@ 0x74
 8017e38:	9002      	str	r0, [sp, #8]
 8017e3a:	9006      	str	r0, [sp, #24]
 8017e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017e40:	4809      	ldr	r0, [pc, #36]	@ (8017e68 <siprintf+0x38>)
 8017e42:	9107      	str	r1, [sp, #28]
 8017e44:	9104      	str	r1, [sp, #16]
 8017e46:	4909      	ldr	r1, [pc, #36]	@ (8017e6c <siprintf+0x3c>)
 8017e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e4c:	9105      	str	r1, [sp, #20]
 8017e4e:	6800      	ldr	r0, [r0, #0]
 8017e50:	9301      	str	r3, [sp, #4]
 8017e52:	a902      	add	r1, sp, #8
 8017e54:	f001 fb66 	bl	8019524 <_svfiprintf_r>
 8017e58:	9b02      	ldr	r3, [sp, #8]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	701a      	strb	r2, [r3, #0]
 8017e5e:	b01c      	add	sp, #112	@ 0x70
 8017e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e64:	b003      	add	sp, #12
 8017e66:	4770      	bx	lr
 8017e68:	24000280 	.word	0x24000280
 8017e6c:	ffff0208 	.word	0xffff0208

08017e70 <siscanf>:
 8017e70:	b40e      	push	{r1, r2, r3}
 8017e72:	b530      	push	{r4, r5, lr}
 8017e74:	b09c      	sub	sp, #112	@ 0x70
 8017e76:	ac1f      	add	r4, sp, #124	@ 0x7c
 8017e78:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017e7c:	f854 5b04 	ldr.w	r5, [r4], #4
 8017e80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017e84:	9002      	str	r0, [sp, #8]
 8017e86:	9006      	str	r0, [sp, #24]
 8017e88:	f7e8 fa2a 	bl	80002e0 <strlen>
 8017e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8017ebc <siscanf+0x4c>)
 8017e8e:	9003      	str	r0, [sp, #12]
 8017e90:	9007      	str	r0, [sp, #28]
 8017e92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e94:	480a      	ldr	r0, [pc, #40]	@ (8017ec0 <siscanf+0x50>)
 8017e96:	9401      	str	r4, [sp, #4]
 8017e98:	2300      	movs	r3, #0
 8017e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017e9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8017e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ea2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ea6:	462a      	mov	r2, r5
 8017ea8:	4623      	mov	r3, r4
 8017eaa:	a902      	add	r1, sp, #8
 8017eac:	6800      	ldr	r0, [r0, #0]
 8017eae:	f001 fc8d 	bl	80197cc <__ssvfiscanf_r>
 8017eb2:	b01c      	add	sp, #112	@ 0x70
 8017eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017eb8:	b003      	add	sp, #12
 8017eba:	4770      	bx	lr
 8017ebc:	08017ee7 	.word	0x08017ee7
 8017ec0:	24000280 	.word	0x24000280

08017ec4 <__sread>:
 8017ec4:	b510      	push	{r4, lr}
 8017ec6:	460c      	mov	r4, r1
 8017ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ecc:	f000 f9de 	bl	801828c <_read_r>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	bfab      	itete	ge
 8017ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8017ed8:	181b      	addge	r3, r3, r0
 8017eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017ede:	bfac      	ite	ge
 8017ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017ee2:	81a3      	strhlt	r3, [r4, #12]
 8017ee4:	bd10      	pop	{r4, pc}

08017ee6 <__seofread>:
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	4770      	bx	lr

08017eea <__swrite>:
 8017eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eee:	461f      	mov	r7, r3
 8017ef0:	898b      	ldrh	r3, [r1, #12]
 8017ef2:	05db      	lsls	r3, r3, #23
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	460c      	mov	r4, r1
 8017ef8:	4616      	mov	r6, r2
 8017efa:	d505      	bpl.n	8017f08 <__swrite+0x1e>
 8017efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f00:	2302      	movs	r3, #2
 8017f02:	2200      	movs	r2, #0
 8017f04:	f000 f9b0 	bl	8018268 <_lseek_r>
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017f12:	81a3      	strh	r3, [r4, #12]
 8017f14:	4632      	mov	r2, r6
 8017f16:	463b      	mov	r3, r7
 8017f18:	4628      	mov	r0, r5
 8017f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1e:	f000 b9d7 	b.w	80182d0 <_write_r>

08017f22 <__sseek>:
 8017f22:	b510      	push	{r4, lr}
 8017f24:	460c      	mov	r4, r1
 8017f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f2a:	f000 f99d 	bl	8018268 <_lseek_r>
 8017f2e:	1c43      	adds	r3, r0, #1
 8017f30:	89a3      	ldrh	r3, [r4, #12]
 8017f32:	bf15      	itete	ne
 8017f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017f3e:	81a3      	strheq	r3, [r4, #12]
 8017f40:	bf18      	it	ne
 8017f42:	81a3      	strhne	r3, [r4, #12]
 8017f44:	bd10      	pop	{r4, pc}

08017f46 <__sclose>:
 8017f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f4a:	f000 b927 	b.w	801819c <_close_r>

08017f4e <__swbuf_r>:
 8017f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f50:	460e      	mov	r6, r1
 8017f52:	4614      	mov	r4, r2
 8017f54:	4605      	mov	r5, r0
 8017f56:	b118      	cbz	r0, 8017f60 <__swbuf_r+0x12>
 8017f58:	6a03      	ldr	r3, [r0, #32]
 8017f5a:	b90b      	cbnz	r3, 8017f60 <__swbuf_r+0x12>
 8017f5c:	f7ff fec2 	bl	8017ce4 <__sinit>
 8017f60:	69a3      	ldr	r3, [r4, #24]
 8017f62:	60a3      	str	r3, [r4, #8]
 8017f64:	89a3      	ldrh	r3, [r4, #12]
 8017f66:	071a      	lsls	r2, r3, #28
 8017f68:	d501      	bpl.n	8017f6e <__swbuf_r+0x20>
 8017f6a:	6923      	ldr	r3, [r4, #16]
 8017f6c:	b943      	cbnz	r3, 8017f80 <__swbuf_r+0x32>
 8017f6e:	4621      	mov	r1, r4
 8017f70:	4628      	mov	r0, r5
 8017f72:	f000 f82b 	bl	8017fcc <__swsetup_r>
 8017f76:	b118      	cbz	r0, 8017f80 <__swbuf_r+0x32>
 8017f78:	f04f 37ff 	mov.w	r7, #4294967295
 8017f7c:	4638      	mov	r0, r7
 8017f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f80:	6823      	ldr	r3, [r4, #0]
 8017f82:	6922      	ldr	r2, [r4, #16]
 8017f84:	1a98      	subs	r0, r3, r2
 8017f86:	6963      	ldr	r3, [r4, #20]
 8017f88:	b2f6      	uxtb	r6, r6
 8017f8a:	4283      	cmp	r3, r0
 8017f8c:	4637      	mov	r7, r6
 8017f8e:	dc05      	bgt.n	8017f9c <__swbuf_r+0x4e>
 8017f90:	4621      	mov	r1, r4
 8017f92:	4628      	mov	r0, r5
 8017f94:	f7ff fdde 	bl	8017b54 <_fflush_r>
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d1ed      	bne.n	8017f78 <__swbuf_r+0x2a>
 8017f9c:	68a3      	ldr	r3, [r4, #8]
 8017f9e:	3b01      	subs	r3, #1
 8017fa0:	60a3      	str	r3, [r4, #8]
 8017fa2:	6823      	ldr	r3, [r4, #0]
 8017fa4:	1c5a      	adds	r2, r3, #1
 8017fa6:	6022      	str	r2, [r4, #0]
 8017fa8:	701e      	strb	r6, [r3, #0]
 8017faa:	6962      	ldr	r2, [r4, #20]
 8017fac:	1c43      	adds	r3, r0, #1
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d004      	beq.n	8017fbc <__swbuf_r+0x6e>
 8017fb2:	89a3      	ldrh	r3, [r4, #12]
 8017fb4:	07db      	lsls	r3, r3, #31
 8017fb6:	d5e1      	bpl.n	8017f7c <__swbuf_r+0x2e>
 8017fb8:	2e0a      	cmp	r6, #10
 8017fba:	d1df      	bne.n	8017f7c <__swbuf_r+0x2e>
 8017fbc:	4621      	mov	r1, r4
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	f7ff fdc8 	bl	8017b54 <_fflush_r>
 8017fc4:	2800      	cmp	r0, #0
 8017fc6:	d0d9      	beq.n	8017f7c <__swbuf_r+0x2e>
 8017fc8:	e7d6      	b.n	8017f78 <__swbuf_r+0x2a>
	...

08017fcc <__swsetup_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4b29      	ldr	r3, [pc, #164]	@ (8018074 <__swsetup_r+0xa8>)
 8017fd0:	4605      	mov	r5, r0
 8017fd2:	6818      	ldr	r0, [r3, #0]
 8017fd4:	460c      	mov	r4, r1
 8017fd6:	b118      	cbz	r0, 8017fe0 <__swsetup_r+0x14>
 8017fd8:	6a03      	ldr	r3, [r0, #32]
 8017fda:	b90b      	cbnz	r3, 8017fe0 <__swsetup_r+0x14>
 8017fdc:	f7ff fe82 	bl	8017ce4 <__sinit>
 8017fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fe4:	0719      	lsls	r1, r3, #28
 8017fe6:	d422      	bmi.n	801802e <__swsetup_r+0x62>
 8017fe8:	06da      	lsls	r2, r3, #27
 8017fea:	d407      	bmi.n	8017ffc <__swsetup_r+0x30>
 8017fec:	2209      	movs	r2, #9
 8017fee:	602a      	str	r2, [r5, #0]
 8017ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ff4:	81a3      	strh	r3, [r4, #12]
 8017ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8017ffa:	e033      	b.n	8018064 <__swsetup_r+0x98>
 8017ffc:	0758      	lsls	r0, r3, #29
 8017ffe:	d512      	bpl.n	8018026 <__swsetup_r+0x5a>
 8018000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018002:	b141      	cbz	r1, 8018016 <__swsetup_r+0x4a>
 8018004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018008:	4299      	cmp	r1, r3
 801800a:	d002      	beq.n	8018012 <__swsetup_r+0x46>
 801800c:	4628      	mov	r0, r5
 801800e:	f000 f9db 	bl	80183c8 <_free_r>
 8018012:	2300      	movs	r3, #0
 8018014:	6363      	str	r3, [r4, #52]	@ 0x34
 8018016:	89a3      	ldrh	r3, [r4, #12]
 8018018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801801c:	81a3      	strh	r3, [r4, #12]
 801801e:	2300      	movs	r3, #0
 8018020:	6063      	str	r3, [r4, #4]
 8018022:	6923      	ldr	r3, [r4, #16]
 8018024:	6023      	str	r3, [r4, #0]
 8018026:	89a3      	ldrh	r3, [r4, #12]
 8018028:	f043 0308 	orr.w	r3, r3, #8
 801802c:	81a3      	strh	r3, [r4, #12]
 801802e:	6923      	ldr	r3, [r4, #16]
 8018030:	b94b      	cbnz	r3, 8018046 <__swsetup_r+0x7a>
 8018032:	89a3      	ldrh	r3, [r4, #12]
 8018034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801803c:	d003      	beq.n	8018046 <__swsetup_r+0x7a>
 801803e:	4621      	mov	r1, r4
 8018040:	4628      	mov	r0, r5
 8018042:	f002 f98d 	bl	801a360 <__smakebuf_r>
 8018046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801804a:	f013 0201 	ands.w	r2, r3, #1
 801804e:	d00a      	beq.n	8018066 <__swsetup_r+0x9a>
 8018050:	2200      	movs	r2, #0
 8018052:	60a2      	str	r2, [r4, #8]
 8018054:	6962      	ldr	r2, [r4, #20]
 8018056:	4252      	negs	r2, r2
 8018058:	61a2      	str	r2, [r4, #24]
 801805a:	6922      	ldr	r2, [r4, #16]
 801805c:	b942      	cbnz	r2, 8018070 <__swsetup_r+0xa4>
 801805e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018062:	d1c5      	bne.n	8017ff0 <__swsetup_r+0x24>
 8018064:	bd38      	pop	{r3, r4, r5, pc}
 8018066:	0799      	lsls	r1, r3, #30
 8018068:	bf58      	it	pl
 801806a:	6962      	ldrpl	r2, [r4, #20]
 801806c:	60a2      	str	r2, [r4, #8]
 801806e:	e7f4      	b.n	801805a <__swsetup_r+0x8e>
 8018070:	2000      	movs	r0, #0
 8018072:	e7f7      	b.n	8018064 <__swsetup_r+0x98>
 8018074:	24000280 	.word	0x24000280

08018078 <memset>:
 8018078:	4402      	add	r2, r0
 801807a:	4603      	mov	r3, r0
 801807c:	4293      	cmp	r3, r2
 801807e:	d100      	bne.n	8018082 <memset+0xa>
 8018080:	4770      	bx	lr
 8018082:	f803 1b01 	strb.w	r1, [r3], #1
 8018086:	e7f9      	b.n	801807c <memset+0x4>

08018088 <strdup>:
 8018088:	4b02      	ldr	r3, [pc, #8]	@ (8018094 <strdup+0xc>)
 801808a:	4601      	mov	r1, r0
 801808c:	6818      	ldr	r0, [r3, #0]
 801808e:	f000 b803 	b.w	8018098 <_strdup_r>
 8018092:	bf00      	nop
 8018094:	24000280 	.word	0x24000280

08018098 <_strdup_r>:
 8018098:	b570      	push	{r4, r5, r6, lr}
 801809a:	4604      	mov	r4, r0
 801809c:	4608      	mov	r0, r1
 801809e:	460d      	mov	r5, r1
 80180a0:	f7e8 f91e 	bl	80002e0 <strlen>
 80180a4:	1c46      	adds	r6, r0, #1
 80180a6:	4631      	mov	r1, r6
 80180a8:	4620      	mov	r0, r4
 80180aa:	f7fe fbef 	bl	801688c <_malloc_r>
 80180ae:	4604      	mov	r4, r0
 80180b0:	b118      	cbz	r0, 80180ba <_strdup_r+0x22>
 80180b2:	4632      	mov	r2, r6
 80180b4:	4629      	mov	r1, r5
 80180b6:	f000 f94a 	bl	801834e <memcpy>
 80180ba:	4620      	mov	r0, r4
 80180bc:	bd70      	pop	{r4, r5, r6, pc}

080180be <strncmp>:
 80180be:	b510      	push	{r4, lr}
 80180c0:	b16a      	cbz	r2, 80180de <strncmp+0x20>
 80180c2:	3901      	subs	r1, #1
 80180c4:	1884      	adds	r4, r0, r2
 80180c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d103      	bne.n	80180da <strncmp+0x1c>
 80180d2:	42a0      	cmp	r0, r4
 80180d4:	d001      	beq.n	80180da <strncmp+0x1c>
 80180d6:	2a00      	cmp	r2, #0
 80180d8:	d1f5      	bne.n	80180c6 <strncmp+0x8>
 80180da:	1ad0      	subs	r0, r2, r3
 80180dc:	bd10      	pop	{r4, pc}
 80180de:	4610      	mov	r0, r2
 80180e0:	e7fc      	b.n	80180dc <strncmp+0x1e>
	...

080180e4 <strtok>:
 80180e4:	4b16      	ldr	r3, [pc, #88]	@ (8018140 <strtok+0x5c>)
 80180e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180ea:	681f      	ldr	r7, [r3, #0]
 80180ec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80180ee:	4605      	mov	r5, r0
 80180f0:	460e      	mov	r6, r1
 80180f2:	b9ec      	cbnz	r4, 8018130 <strtok+0x4c>
 80180f4:	2050      	movs	r0, #80	@ 0x50
 80180f6:	f7fe fb97 	bl	8016828 <malloc>
 80180fa:	4602      	mov	r2, r0
 80180fc:	6478      	str	r0, [r7, #68]	@ 0x44
 80180fe:	b920      	cbnz	r0, 801810a <strtok+0x26>
 8018100:	4b10      	ldr	r3, [pc, #64]	@ (8018144 <strtok+0x60>)
 8018102:	4811      	ldr	r0, [pc, #68]	@ (8018148 <strtok+0x64>)
 8018104:	215b      	movs	r1, #91	@ 0x5b
 8018106:	f000 f941 	bl	801838c <__assert_func>
 801810a:	e9c0 4400 	strd	r4, r4, [r0]
 801810e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018112:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018116:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801811a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801811e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8018122:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8018126:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801812a:	6184      	str	r4, [r0, #24]
 801812c:	7704      	strb	r4, [r0, #28]
 801812e:	6244      	str	r4, [r0, #36]	@ 0x24
 8018130:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018132:	4631      	mov	r1, r6
 8018134:	4628      	mov	r0, r5
 8018136:	2301      	movs	r3, #1
 8018138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801813c:	f000 b806 	b.w	801814c <__strtok_r>
 8018140:	24000280 	.word	0x24000280
 8018144:	0801aa76 	.word	0x0801aa76
 8018148:	0801aa8d 	.word	0x0801aa8d

0801814c <__strtok_r>:
 801814c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801814e:	4604      	mov	r4, r0
 8018150:	b908      	cbnz	r0, 8018156 <__strtok_r+0xa>
 8018152:	6814      	ldr	r4, [r2, #0]
 8018154:	b144      	cbz	r4, 8018168 <__strtok_r+0x1c>
 8018156:	4620      	mov	r0, r4
 8018158:	f814 5b01 	ldrb.w	r5, [r4], #1
 801815c:	460f      	mov	r7, r1
 801815e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018162:	b91e      	cbnz	r6, 801816c <__strtok_r+0x20>
 8018164:	b965      	cbnz	r5, 8018180 <__strtok_r+0x34>
 8018166:	6015      	str	r5, [r2, #0]
 8018168:	2000      	movs	r0, #0
 801816a:	e005      	b.n	8018178 <__strtok_r+0x2c>
 801816c:	42b5      	cmp	r5, r6
 801816e:	d1f6      	bne.n	801815e <__strtok_r+0x12>
 8018170:	2b00      	cmp	r3, #0
 8018172:	d1f0      	bne.n	8018156 <__strtok_r+0xa>
 8018174:	6014      	str	r4, [r2, #0]
 8018176:	7003      	strb	r3, [r0, #0]
 8018178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801817a:	461c      	mov	r4, r3
 801817c:	e00c      	b.n	8018198 <__strtok_r+0x4c>
 801817e:	b915      	cbnz	r5, 8018186 <__strtok_r+0x3a>
 8018180:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018184:	460e      	mov	r6, r1
 8018186:	f816 5b01 	ldrb.w	r5, [r6], #1
 801818a:	42ab      	cmp	r3, r5
 801818c:	d1f7      	bne.n	801817e <__strtok_r+0x32>
 801818e:	2b00      	cmp	r3, #0
 8018190:	d0f3      	beq.n	801817a <__strtok_r+0x2e>
 8018192:	2300      	movs	r3, #0
 8018194:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018198:	6014      	str	r4, [r2, #0]
 801819a:	e7ed      	b.n	8018178 <__strtok_r+0x2c>

0801819c <_close_r>:
 801819c:	b538      	push	{r3, r4, r5, lr}
 801819e:	4d06      	ldr	r5, [pc, #24]	@ (80181b8 <_close_r+0x1c>)
 80181a0:	2300      	movs	r3, #0
 80181a2:	4604      	mov	r4, r0
 80181a4:	4608      	mov	r0, r1
 80181a6:	602b      	str	r3, [r5, #0]
 80181a8:	f7ea fa98 	bl	80026dc <_close>
 80181ac:	1c43      	adds	r3, r0, #1
 80181ae:	d102      	bne.n	80181b6 <_close_r+0x1a>
 80181b0:	682b      	ldr	r3, [r5, #0]
 80181b2:	b103      	cbz	r3, 80181b6 <_close_r+0x1a>
 80181b4:	6023      	str	r3, [r4, #0]
 80181b6:	bd38      	pop	{r3, r4, r5, pc}
 80181b8:	240776c8 	.word	0x240776c8

080181bc <_reclaim_reent>:
 80181bc:	4b29      	ldr	r3, [pc, #164]	@ (8018264 <_reclaim_reent+0xa8>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	4283      	cmp	r3, r0
 80181c2:	b570      	push	{r4, r5, r6, lr}
 80181c4:	4604      	mov	r4, r0
 80181c6:	d04b      	beq.n	8018260 <_reclaim_reent+0xa4>
 80181c8:	69c3      	ldr	r3, [r0, #28]
 80181ca:	b1ab      	cbz	r3, 80181f8 <_reclaim_reent+0x3c>
 80181cc:	68db      	ldr	r3, [r3, #12]
 80181ce:	b16b      	cbz	r3, 80181ec <_reclaim_reent+0x30>
 80181d0:	2500      	movs	r5, #0
 80181d2:	69e3      	ldr	r3, [r4, #28]
 80181d4:	68db      	ldr	r3, [r3, #12]
 80181d6:	5959      	ldr	r1, [r3, r5]
 80181d8:	2900      	cmp	r1, #0
 80181da:	d13b      	bne.n	8018254 <_reclaim_reent+0x98>
 80181dc:	3504      	adds	r5, #4
 80181de:	2d80      	cmp	r5, #128	@ 0x80
 80181e0:	d1f7      	bne.n	80181d2 <_reclaim_reent+0x16>
 80181e2:	69e3      	ldr	r3, [r4, #28]
 80181e4:	4620      	mov	r0, r4
 80181e6:	68d9      	ldr	r1, [r3, #12]
 80181e8:	f000 f8ee 	bl	80183c8 <_free_r>
 80181ec:	69e3      	ldr	r3, [r4, #28]
 80181ee:	6819      	ldr	r1, [r3, #0]
 80181f0:	b111      	cbz	r1, 80181f8 <_reclaim_reent+0x3c>
 80181f2:	4620      	mov	r0, r4
 80181f4:	f000 f8e8 	bl	80183c8 <_free_r>
 80181f8:	6961      	ldr	r1, [r4, #20]
 80181fa:	b111      	cbz	r1, 8018202 <_reclaim_reent+0x46>
 80181fc:	4620      	mov	r0, r4
 80181fe:	f000 f8e3 	bl	80183c8 <_free_r>
 8018202:	69e1      	ldr	r1, [r4, #28]
 8018204:	b111      	cbz	r1, 801820c <_reclaim_reent+0x50>
 8018206:	4620      	mov	r0, r4
 8018208:	f000 f8de 	bl	80183c8 <_free_r>
 801820c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801820e:	b111      	cbz	r1, 8018216 <_reclaim_reent+0x5a>
 8018210:	4620      	mov	r0, r4
 8018212:	f000 f8d9 	bl	80183c8 <_free_r>
 8018216:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018218:	b111      	cbz	r1, 8018220 <_reclaim_reent+0x64>
 801821a:	4620      	mov	r0, r4
 801821c:	f000 f8d4 	bl	80183c8 <_free_r>
 8018220:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018222:	b111      	cbz	r1, 801822a <_reclaim_reent+0x6e>
 8018224:	4620      	mov	r0, r4
 8018226:	f000 f8cf 	bl	80183c8 <_free_r>
 801822a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801822c:	b111      	cbz	r1, 8018234 <_reclaim_reent+0x78>
 801822e:	4620      	mov	r0, r4
 8018230:	f000 f8ca 	bl	80183c8 <_free_r>
 8018234:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018236:	b111      	cbz	r1, 801823e <_reclaim_reent+0x82>
 8018238:	4620      	mov	r0, r4
 801823a:	f000 f8c5 	bl	80183c8 <_free_r>
 801823e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018240:	b111      	cbz	r1, 8018248 <_reclaim_reent+0x8c>
 8018242:	4620      	mov	r0, r4
 8018244:	f000 f8c0 	bl	80183c8 <_free_r>
 8018248:	6a23      	ldr	r3, [r4, #32]
 801824a:	b14b      	cbz	r3, 8018260 <_reclaim_reent+0xa4>
 801824c:	4620      	mov	r0, r4
 801824e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018252:	4718      	bx	r3
 8018254:	680e      	ldr	r6, [r1, #0]
 8018256:	4620      	mov	r0, r4
 8018258:	f000 f8b6 	bl	80183c8 <_free_r>
 801825c:	4631      	mov	r1, r6
 801825e:	e7bb      	b.n	80181d8 <_reclaim_reent+0x1c>
 8018260:	bd70      	pop	{r4, r5, r6, pc}
 8018262:	bf00      	nop
 8018264:	24000280 	.word	0x24000280

08018268 <_lseek_r>:
 8018268:	b538      	push	{r3, r4, r5, lr}
 801826a:	4d07      	ldr	r5, [pc, #28]	@ (8018288 <_lseek_r+0x20>)
 801826c:	4604      	mov	r4, r0
 801826e:	4608      	mov	r0, r1
 8018270:	4611      	mov	r1, r2
 8018272:	2200      	movs	r2, #0
 8018274:	602a      	str	r2, [r5, #0]
 8018276:	461a      	mov	r2, r3
 8018278:	f7ea fa57 	bl	800272a <_lseek>
 801827c:	1c43      	adds	r3, r0, #1
 801827e:	d102      	bne.n	8018286 <_lseek_r+0x1e>
 8018280:	682b      	ldr	r3, [r5, #0]
 8018282:	b103      	cbz	r3, 8018286 <_lseek_r+0x1e>
 8018284:	6023      	str	r3, [r4, #0]
 8018286:	bd38      	pop	{r3, r4, r5, pc}
 8018288:	240776c8 	.word	0x240776c8

0801828c <_read_r>:
 801828c:	b538      	push	{r3, r4, r5, lr}
 801828e:	4d07      	ldr	r5, [pc, #28]	@ (80182ac <_read_r+0x20>)
 8018290:	4604      	mov	r4, r0
 8018292:	4608      	mov	r0, r1
 8018294:	4611      	mov	r1, r2
 8018296:	2200      	movs	r2, #0
 8018298:	602a      	str	r2, [r5, #0]
 801829a:	461a      	mov	r2, r3
 801829c:	f7ea fa01 	bl	80026a2 <_read>
 80182a0:	1c43      	adds	r3, r0, #1
 80182a2:	d102      	bne.n	80182aa <_read_r+0x1e>
 80182a4:	682b      	ldr	r3, [r5, #0]
 80182a6:	b103      	cbz	r3, 80182aa <_read_r+0x1e>
 80182a8:	6023      	str	r3, [r4, #0]
 80182aa:	bd38      	pop	{r3, r4, r5, pc}
 80182ac:	240776c8 	.word	0x240776c8

080182b0 <_sbrk_r>:
 80182b0:	b538      	push	{r3, r4, r5, lr}
 80182b2:	4d06      	ldr	r5, [pc, #24]	@ (80182cc <_sbrk_r+0x1c>)
 80182b4:	2300      	movs	r3, #0
 80182b6:	4604      	mov	r4, r0
 80182b8:	4608      	mov	r0, r1
 80182ba:	602b      	str	r3, [r5, #0]
 80182bc:	f7ea fa42 	bl	8002744 <_sbrk>
 80182c0:	1c43      	adds	r3, r0, #1
 80182c2:	d102      	bne.n	80182ca <_sbrk_r+0x1a>
 80182c4:	682b      	ldr	r3, [r5, #0]
 80182c6:	b103      	cbz	r3, 80182ca <_sbrk_r+0x1a>
 80182c8:	6023      	str	r3, [r4, #0]
 80182ca:	bd38      	pop	{r3, r4, r5, pc}
 80182cc:	240776c8 	.word	0x240776c8

080182d0 <_write_r>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	4d07      	ldr	r5, [pc, #28]	@ (80182f0 <_write_r+0x20>)
 80182d4:	4604      	mov	r4, r0
 80182d6:	4608      	mov	r0, r1
 80182d8:	4611      	mov	r1, r2
 80182da:	2200      	movs	r2, #0
 80182dc:	602a      	str	r2, [r5, #0]
 80182de:	461a      	mov	r2, r3
 80182e0:	f7e8 fd72 	bl	8000dc8 <_write>
 80182e4:	1c43      	adds	r3, r0, #1
 80182e6:	d102      	bne.n	80182ee <_write_r+0x1e>
 80182e8:	682b      	ldr	r3, [r5, #0]
 80182ea:	b103      	cbz	r3, 80182ee <_write_r+0x1e>
 80182ec:	6023      	str	r3, [r4, #0]
 80182ee:	bd38      	pop	{r3, r4, r5, pc}
 80182f0:	240776c8 	.word	0x240776c8

080182f4 <__errno>:
 80182f4:	4b01      	ldr	r3, [pc, #4]	@ (80182fc <__errno+0x8>)
 80182f6:	6818      	ldr	r0, [r3, #0]
 80182f8:	4770      	bx	lr
 80182fa:	bf00      	nop
 80182fc:	24000280 	.word	0x24000280

08018300 <__libc_init_array>:
 8018300:	b570      	push	{r4, r5, r6, lr}
 8018302:	4d0d      	ldr	r5, [pc, #52]	@ (8018338 <__libc_init_array+0x38>)
 8018304:	4c0d      	ldr	r4, [pc, #52]	@ (801833c <__libc_init_array+0x3c>)
 8018306:	1b64      	subs	r4, r4, r5
 8018308:	10a4      	asrs	r4, r4, #2
 801830a:	2600      	movs	r6, #0
 801830c:	42a6      	cmp	r6, r4
 801830e:	d109      	bne.n	8018324 <__libc_init_array+0x24>
 8018310:	4d0b      	ldr	r5, [pc, #44]	@ (8018340 <__libc_init_array+0x40>)
 8018312:	4c0c      	ldr	r4, [pc, #48]	@ (8018344 <__libc_init_array+0x44>)
 8018314:	f002 fa16 	bl	801a744 <_init>
 8018318:	1b64      	subs	r4, r4, r5
 801831a:	10a4      	asrs	r4, r4, #2
 801831c:	2600      	movs	r6, #0
 801831e:	42a6      	cmp	r6, r4
 8018320:	d105      	bne.n	801832e <__libc_init_array+0x2e>
 8018322:	bd70      	pop	{r4, r5, r6, pc}
 8018324:	f855 3b04 	ldr.w	r3, [r5], #4
 8018328:	4798      	blx	r3
 801832a:	3601      	adds	r6, #1
 801832c:	e7ee      	b.n	801830c <__libc_init_array+0xc>
 801832e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018332:	4798      	blx	r3
 8018334:	3601      	adds	r6, #1
 8018336:	e7f2      	b.n	801831e <__libc_init_array+0x1e>
 8018338:	0801ad50 	.word	0x0801ad50
 801833c:	0801ad50 	.word	0x0801ad50
 8018340:	0801ad50 	.word	0x0801ad50
 8018344:	0801ad54 	.word	0x0801ad54

08018348 <__retarget_lock_init_recursive>:
 8018348:	4770      	bx	lr

0801834a <__retarget_lock_acquire_recursive>:
 801834a:	4770      	bx	lr

0801834c <__retarget_lock_release_recursive>:
 801834c:	4770      	bx	lr

0801834e <memcpy>:
 801834e:	440a      	add	r2, r1
 8018350:	4291      	cmp	r1, r2
 8018352:	f100 33ff 	add.w	r3, r0, #4294967295
 8018356:	d100      	bne.n	801835a <memcpy+0xc>
 8018358:	4770      	bx	lr
 801835a:	b510      	push	{r4, lr}
 801835c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018364:	4291      	cmp	r1, r2
 8018366:	d1f9      	bne.n	801835c <memcpy+0xe>
 8018368:	bd10      	pop	{r4, pc}
 801836a:	0000      	movs	r0, r0
 801836c:	0000      	movs	r0, r0
	...

08018370 <nan>:
 8018370:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8018378 <nan+0x8>
 8018374:	4770      	bx	lr
 8018376:	bf00      	nop
 8018378:	00000000 	.word	0x00000000
 801837c:	7ff80000 	.word	0x7ff80000

08018380 <nanf>:
 8018380:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018388 <nanf+0x8>
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop
 8018388:	7fc00000 	.word	0x7fc00000

0801838c <__assert_func>:
 801838c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801838e:	4614      	mov	r4, r2
 8018390:	461a      	mov	r2, r3
 8018392:	4b09      	ldr	r3, [pc, #36]	@ (80183b8 <__assert_func+0x2c>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	4605      	mov	r5, r0
 8018398:	68d8      	ldr	r0, [r3, #12]
 801839a:	b954      	cbnz	r4, 80183b2 <__assert_func+0x26>
 801839c:	4b07      	ldr	r3, [pc, #28]	@ (80183bc <__assert_func+0x30>)
 801839e:	461c      	mov	r4, r3
 80183a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80183a4:	9100      	str	r1, [sp, #0]
 80183a6:	462b      	mov	r3, r5
 80183a8:	4905      	ldr	r1, [pc, #20]	@ (80183c0 <__assert_func+0x34>)
 80183aa:	f001 ffa1 	bl	801a2f0 <fiprintf>
 80183ae:	f002 f8c3 	bl	801a538 <abort>
 80183b2:	4b04      	ldr	r3, [pc, #16]	@ (80183c4 <__assert_func+0x38>)
 80183b4:	e7f4      	b.n	80183a0 <__assert_func+0x14>
 80183b6:	bf00      	nop
 80183b8:	24000280 	.word	0x24000280
 80183bc:	0801ab2a 	.word	0x0801ab2a
 80183c0:	0801aafc 	.word	0x0801aafc
 80183c4:	0801aaef 	.word	0x0801aaef

080183c8 <_free_r>:
 80183c8:	b538      	push	{r3, r4, r5, lr}
 80183ca:	4605      	mov	r5, r0
 80183cc:	2900      	cmp	r1, #0
 80183ce:	d041      	beq.n	8018454 <_free_r+0x8c>
 80183d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183d4:	1f0c      	subs	r4, r1, #4
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	bfb8      	it	lt
 80183da:	18e4      	addlt	r4, r4, r3
 80183dc:	f7fe fad6 	bl	801698c <__malloc_lock>
 80183e0:	4a1d      	ldr	r2, [pc, #116]	@ (8018458 <_free_r+0x90>)
 80183e2:	6813      	ldr	r3, [r2, #0]
 80183e4:	b933      	cbnz	r3, 80183f4 <_free_r+0x2c>
 80183e6:	6063      	str	r3, [r4, #4]
 80183e8:	6014      	str	r4, [r2, #0]
 80183ea:	4628      	mov	r0, r5
 80183ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183f0:	f7fe bad2 	b.w	8016998 <__malloc_unlock>
 80183f4:	42a3      	cmp	r3, r4
 80183f6:	d908      	bls.n	801840a <_free_r+0x42>
 80183f8:	6820      	ldr	r0, [r4, #0]
 80183fa:	1821      	adds	r1, r4, r0
 80183fc:	428b      	cmp	r3, r1
 80183fe:	bf01      	itttt	eq
 8018400:	6819      	ldreq	r1, [r3, #0]
 8018402:	685b      	ldreq	r3, [r3, #4]
 8018404:	1809      	addeq	r1, r1, r0
 8018406:	6021      	streq	r1, [r4, #0]
 8018408:	e7ed      	b.n	80183e6 <_free_r+0x1e>
 801840a:	461a      	mov	r2, r3
 801840c:	685b      	ldr	r3, [r3, #4]
 801840e:	b10b      	cbz	r3, 8018414 <_free_r+0x4c>
 8018410:	42a3      	cmp	r3, r4
 8018412:	d9fa      	bls.n	801840a <_free_r+0x42>
 8018414:	6811      	ldr	r1, [r2, #0]
 8018416:	1850      	adds	r0, r2, r1
 8018418:	42a0      	cmp	r0, r4
 801841a:	d10b      	bne.n	8018434 <_free_r+0x6c>
 801841c:	6820      	ldr	r0, [r4, #0]
 801841e:	4401      	add	r1, r0
 8018420:	1850      	adds	r0, r2, r1
 8018422:	4283      	cmp	r3, r0
 8018424:	6011      	str	r1, [r2, #0]
 8018426:	d1e0      	bne.n	80183ea <_free_r+0x22>
 8018428:	6818      	ldr	r0, [r3, #0]
 801842a:	685b      	ldr	r3, [r3, #4]
 801842c:	6053      	str	r3, [r2, #4]
 801842e:	4408      	add	r0, r1
 8018430:	6010      	str	r0, [r2, #0]
 8018432:	e7da      	b.n	80183ea <_free_r+0x22>
 8018434:	d902      	bls.n	801843c <_free_r+0x74>
 8018436:	230c      	movs	r3, #12
 8018438:	602b      	str	r3, [r5, #0]
 801843a:	e7d6      	b.n	80183ea <_free_r+0x22>
 801843c:	6820      	ldr	r0, [r4, #0]
 801843e:	1821      	adds	r1, r4, r0
 8018440:	428b      	cmp	r3, r1
 8018442:	bf04      	itt	eq
 8018444:	6819      	ldreq	r1, [r3, #0]
 8018446:	685b      	ldreq	r3, [r3, #4]
 8018448:	6063      	str	r3, [r4, #4]
 801844a:	bf04      	itt	eq
 801844c:	1809      	addeq	r1, r1, r0
 801844e:	6021      	streq	r1, [r4, #0]
 8018450:	6054      	str	r4, [r2, #4]
 8018452:	e7ca      	b.n	80183ea <_free_r+0x22>
 8018454:	bd38      	pop	{r3, r4, r5, pc}
 8018456:	bf00      	nop
 8018458:	24077588 	.word	0x24077588

0801845c <rshift>:
 801845c:	6903      	ldr	r3, [r0, #16]
 801845e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018466:	ea4f 1261 	mov.w	r2, r1, asr #5
 801846a:	f100 0414 	add.w	r4, r0, #20
 801846e:	dd45      	ble.n	80184fc <rshift+0xa0>
 8018470:	f011 011f 	ands.w	r1, r1, #31
 8018474:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018478:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801847c:	d10c      	bne.n	8018498 <rshift+0x3c>
 801847e:	f100 0710 	add.w	r7, r0, #16
 8018482:	4629      	mov	r1, r5
 8018484:	42b1      	cmp	r1, r6
 8018486:	d334      	bcc.n	80184f2 <rshift+0x96>
 8018488:	1a9b      	subs	r3, r3, r2
 801848a:	009b      	lsls	r3, r3, #2
 801848c:	1eea      	subs	r2, r5, #3
 801848e:	4296      	cmp	r6, r2
 8018490:	bf38      	it	cc
 8018492:	2300      	movcc	r3, #0
 8018494:	4423      	add	r3, r4
 8018496:	e015      	b.n	80184c4 <rshift+0x68>
 8018498:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801849c:	f1c1 0820 	rsb	r8, r1, #32
 80184a0:	40cf      	lsrs	r7, r1
 80184a2:	f105 0e04 	add.w	lr, r5, #4
 80184a6:	46a1      	mov	r9, r4
 80184a8:	4576      	cmp	r6, lr
 80184aa:	46f4      	mov	ip, lr
 80184ac:	d815      	bhi.n	80184da <rshift+0x7e>
 80184ae:	1a9a      	subs	r2, r3, r2
 80184b0:	0092      	lsls	r2, r2, #2
 80184b2:	3a04      	subs	r2, #4
 80184b4:	3501      	adds	r5, #1
 80184b6:	42ae      	cmp	r6, r5
 80184b8:	bf38      	it	cc
 80184ba:	2200      	movcc	r2, #0
 80184bc:	18a3      	adds	r3, r4, r2
 80184be:	50a7      	str	r7, [r4, r2]
 80184c0:	b107      	cbz	r7, 80184c4 <rshift+0x68>
 80184c2:	3304      	adds	r3, #4
 80184c4:	1b1a      	subs	r2, r3, r4
 80184c6:	42a3      	cmp	r3, r4
 80184c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80184cc:	bf08      	it	eq
 80184ce:	2300      	moveq	r3, #0
 80184d0:	6102      	str	r2, [r0, #16]
 80184d2:	bf08      	it	eq
 80184d4:	6143      	streq	r3, [r0, #20]
 80184d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184da:	f8dc c000 	ldr.w	ip, [ip]
 80184de:	fa0c fc08 	lsl.w	ip, ip, r8
 80184e2:	ea4c 0707 	orr.w	r7, ip, r7
 80184e6:	f849 7b04 	str.w	r7, [r9], #4
 80184ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80184ee:	40cf      	lsrs	r7, r1
 80184f0:	e7da      	b.n	80184a8 <rshift+0x4c>
 80184f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80184f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80184fa:	e7c3      	b.n	8018484 <rshift+0x28>
 80184fc:	4623      	mov	r3, r4
 80184fe:	e7e1      	b.n	80184c4 <rshift+0x68>

08018500 <__hexdig_fun>:
 8018500:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018504:	2b09      	cmp	r3, #9
 8018506:	d802      	bhi.n	801850e <__hexdig_fun+0xe>
 8018508:	3820      	subs	r0, #32
 801850a:	b2c0      	uxtb	r0, r0
 801850c:	4770      	bx	lr
 801850e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8018512:	2b05      	cmp	r3, #5
 8018514:	d801      	bhi.n	801851a <__hexdig_fun+0x1a>
 8018516:	3847      	subs	r0, #71	@ 0x47
 8018518:	e7f7      	b.n	801850a <__hexdig_fun+0xa>
 801851a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801851e:	2b05      	cmp	r3, #5
 8018520:	d801      	bhi.n	8018526 <__hexdig_fun+0x26>
 8018522:	3827      	subs	r0, #39	@ 0x27
 8018524:	e7f1      	b.n	801850a <__hexdig_fun+0xa>
 8018526:	2000      	movs	r0, #0
 8018528:	4770      	bx	lr
	...

0801852c <__gethex>:
 801852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018530:	b085      	sub	sp, #20
 8018532:	468a      	mov	sl, r1
 8018534:	9302      	str	r3, [sp, #8]
 8018536:	680b      	ldr	r3, [r1, #0]
 8018538:	9001      	str	r0, [sp, #4]
 801853a:	4690      	mov	r8, r2
 801853c:	1c9c      	adds	r4, r3, #2
 801853e:	46a1      	mov	r9, r4
 8018540:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018544:	2830      	cmp	r0, #48	@ 0x30
 8018546:	d0fa      	beq.n	801853e <__gethex+0x12>
 8018548:	eba9 0303 	sub.w	r3, r9, r3
 801854c:	f1a3 0b02 	sub.w	fp, r3, #2
 8018550:	f7ff ffd6 	bl	8018500 <__hexdig_fun>
 8018554:	4605      	mov	r5, r0
 8018556:	2800      	cmp	r0, #0
 8018558:	d168      	bne.n	801862c <__gethex+0x100>
 801855a:	49a0      	ldr	r1, [pc, #640]	@ (80187dc <__gethex+0x2b0>)
 801855c:	2201      	movs	r2, #1
 801855e:	4648      	mov	r0, r9
 8018560:	f7ff fdad 	bl	80180be <strncmp>
 8018564:	4607      	mov	r7, r0
 8018566:	2800      	cmp	r0, #0
 8018568:	d167      	bne.n	801863a <__gethex+0x10e>
 801856a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801856e:	4626      	mov	r6, r4
 8018570:	f7ff ffc6 	bl	8018500 <__hexdig_fun>
 8018574:	2800      	cmp	r0, #0
 8018576:	d062      	beq.n	801863e <__gethex+0x112>
 8018578:	4623      	mov	r3, r4
 801857a:	7818      	ldrb	r0, [r3, #0]
 801857c:	2830      	cmp	r0, #48	@ 0x30
 801857e:	4699      	mov	r9, r3
 8018580:	f103 0301 	add.w	r3, r3, #1
 8018584:	d0f9      	beq.n	801857a <__gethex+0x4e>
 8018586:	f7ff ffbb 	bl	8018500 <__hexdig_fun>
 801858a:	fab0 f580 	clz	r5, r0
 801858e:	096d      	lsrs	r5, r5, #5
 8018590:	f04f 0b01 	mov.w	fp, #1
 8018594:	464a      	mov	r2, r9
 8018596:	4616      	mov	r6, r2
 8018598:	3201      	adds	r2, #1
 801859a:	7830      	ldrb	r0, [r6, #0]
 801859c:	f7ff ffb0 	bl	8018500 <__hexdig_fun>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	d1f8      	bne.n	8018596 <__gethex+0x6a>
 80185a4:	498d      	ldr	r1, [pc, #564]	@ (80187dc <__gethex+0x2b0>)
 80185a6:	2201      	movs	r2, #1
 80185a8:	4630      	mov	r0, r6
 80185aa:	f7ff fd88 	bl	80180be <strncmp>
 80185ae:	2800      	cmp	r0, #0
 80185b0:	d13f      	bne.n	8018632 <__gethex+0x106>
 80185b2:	b944      	cbnz	r4, 80185c6 <__gethex+0x9a>
 80185b4:	1c74      	adds	r4, r6, #1
 80185b6:	4622      	mov	r2, r4
 80185b8:	4616      	mov	r6, r2
 80185ba:	3201      	adds	r2, #1
 80185bc:	7830      	ldrb	r0, [r6, #0]
 80185be:	f7ff ff9f 	bl	8018500 <__hexdig_fun>
 80185c2:	2800      	cmp	r0, #0
 80185c4:	d1f8      	bne.n	80185b8 <__gethex+0x8c>
 80185c6:	1ba4      	subs	r4, r4, r6
 80185c8:	00a7      	lsls	r7, r4, #2
 80185ca:	7833      	ldrb	r3, [r6, #0]
 80185cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80185d0:	2b50      	cmp	r3, #80	@ 0x50
 80185d2:	d13e      	bne.n	8018652 <__gethex+0x126>
 80185d4:	7873      	ldrb	r3, [r6, #1]
 80185d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80185d8:	d033      	beq.n	8018642 <__gethex+0x116>
 80185da:	2b2d      	cmp	r3, #45	@ 0x2d
 80185dc:	d034      	beq.n	8018648 <__gethex+0x11c>
 80185de:	1c71      	adds	r1, r6, #1
 80185e0:	2400      	movs	r4, #0
 80185e2:	7808      	ldrb	r0, [r1, #0]
 80185e4:	f7ff ff8c 	bl	8018500 <__hexdig_fun>
 80185e8:	1e43      	subs	r3, r0, #1
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	2b18      	cmp	r3, #24
 80185ee:	d830      	bhi.n	8018652 <__gethex+0x126>
 80185f0:	f1a0 0210 	sub.w	r2, r0, #16
 80185f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80185f8:	f7ff ff82 	bl	8018500 <__hexdig_fun>
 80185fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8018600:	fa5f fc8c 	uxtb.w	ip, ip
 8018604:	f1bc 0f18 	cmp.w	ip, #24
 8018608:	f04f 030a 	mov.w	r3, #10
 801860c:	d91e      	bls.n	801864c <__gethex+0x120>
 801860e:	b104      	cbz	r4, 8018612 <__gethex+0xe6>
 8018610:	4252      	negs	r2, r2
 8018612:	4417      	add	r7, r2
 8018614:	f8ca 1000 	str.w	r1, [sl]
 8018618:	b1ed      	cbz	r5, 8018656 <__gethex+0x12a>
 801861a:	f1bb 0f00 	cmp.w	fp, #0
 801861e:	bf0c      	ite	eq
 8018620:	2506      	moveq	r5, #6
 8018622:	2500      	movne	r5, #0
 8018624:	4628      	mov	r0, r5
 8018626:	b005      	add	sp, #20
 8018628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801862c:	2500      	movs	r5, #0
 801862e:	462c      	mov	r4, r5
 8018630:	e7b0      	b.n	8018594 <__gethex+0x68>
 8018632:	2c00      	cmp	r4, #0
 8018634:	d1c7      	bne.n	80185c6 <__gethex+0x9a>
 8018636:	4627      	mov	r7, r4
 8018638:	e7c7      	b.n	80185ca <__gethex+0x9e>
 801863a:	464e      	mov	r6, r9
 801863c:	462f      	mov	r7, r5
 801863e:	2501      	movs	r5, #1
 8018640:	e7c3      	b.n	80185ca <__gethex+0x9e>
 8018642:	2400      	movs	r4, #0
 8018644:	1cb1      	adds	r1, r6, #2
 8018646:	e7cc      	b.n	80185e2 <__gethex+0xb6>
 8018648:	2401      	movs	r4, #1
 801864a:	e7fb      	b.n	8018644 <__gethex+0x118>
 801864c:	fb03 0002 	mla	r0, r3, r2, r0
 8018650:	e7ce      	b.n	80185f0 <__gethex+0xc4>
 8018652:	4631      	mov	r1, r6
 8018654:	e7de      	b.n	8018614 <__gethex+0xe8>
 8018656:	eba6 0309 	sub.w	r3, r6, r9
 801865a:	3b01      	subs	r3, #1
 801865c:	4629      	mov	r1, r5
 801865e:	2b07      	cmp	r3, #7
 8018660:	dc0a      	bgt.n	8018678 <__gethex+0x14c>
 8018662:	9801      	ldr	r0, [sp, #4]
 8018664:	f000 fa46 	bl	8018af4 <_Balloc>
 8018668:	4604      	mov	r4, r0
 801866a:	b940      	cbnz	r0, 801867e <__gethex+0x152>
 801866c:	4b5c      	ldr	r3, [pc, #368]	@ (80187e0 <__gethex+0x2b4>)
 801866e:	4602      	mov	r2, r0
 8018670:	21e4      	movs	r1, #228	@ 0xe4
 8018672:	485c      	ldr	r0, [pc, #368]	@ (80187e4 <__gethex+0x2b8>)
 8018674:	f7ff fe8a 	bl	801838c <__assert_func>
 8018678:	3101      	adds	r1, #1
 801867a:	105b      	asrs	r3, r3, #1
 801867c:	e7ef      	b.n	801865e <__gethex+0x132>
 801867e:	f100 0a14 	add.w	sl, r0, #20
 8018682:	2300      	movs	r3, #0
 8018684:	4655      	mov	r5, sl
 8018686:	469b      	mov	fp, r3
 8018688:	45b1      	cmp	r9, r6
 801868a:	d337      	bcc.n	80186fc <__gethex+0x1d0>
 801868c:	f845 bb04 	str.w	fp, [r5], #4
 8018690:	eba5 050a 	sub.w	r5, r5, sl
 8018694:	10ad      	asrs	r5, r5, #2
 8018696:	6125      	str	r5, [r4, #16]
 8018698:	4658      	mov	r0, fp
 801869a:	f000 fb1d 	bl	8018cd8 <__hi0bits>
 801869e:	016d      	lsls	r5, r5, #5
 80186a0:	f8d8 6000 	ldr.w	r6, [r8]
 80186a4:	1a2d      	subs	r5, r5, r0
 80186a6:	42b5      	cmp	r5, r6
 80186a8:	dd54      	ble.n	8018754 <__gethex+0x228>
 80186aa:	1bad      	subs	r5, r5, r6
 80186ac:	4629      	mov	r1, r5
 80186ae:	4620      	mov	r0, r4
 80186b0:	f000 feae 	bl	8019410 <__any_on>
 80186b4:	4681      	mov	r9, r0
 80186b6:	b178      	cbz	r0, 80186d8 <__gethex+0x1ac>
 80186b8:	1e6b      	subs	r3, r5, #1
 80186ba:	1159      	asrs	r1, r3, #5
 80186bc:	f003 021f 	and.w	r2, r3, #31
 80186c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80186c4:	f04f 0901 	mov.w	r9, #1
 80186c8:	fa09 f202 	lsl.w	r2, r9, r2
 80186cc:	420a      	tst	r2, r1
 80186ce:	d003      	beq.n	80186d8 <__gethex+0x1ac>
 80186d0:	454b      	cmp	r3, r9
 80186d2:	dc36      	bgt.n	8018742 <__gethex+0x216>
 80186d4:	f04f 0902 	mov.w	r9, #2
 80186d8:	4629      	mov	r1, r5
 80186da:	4620      	mov	r0, r4
 80186dc:	f7ff febe 	bl	801845c <rshift>
 80186e0:	442f      	add	r7, r5
 80186e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186e6:	42bb      	cmp	r3, r7
 80186e8:	da42      	bge.n	8018770 <__gethex+0x244>
 80186ea:	9801      	ldr	r0, [sp, #4]
 80186ec:	4621      	mov	r1, r4
 80186ee:	f000 fa41 	bl	8018b74 <_Bfree>
 80186f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80186f4:	2300      	movs	r3, #0
 80186f6:	6013      	str	r3, [r2, #0]
 80186f8:	25a3      	movs	r5, #163	@ 0xa3
 80186fa:	e793      	b.n	8018624 <__gethex+0xf8>
 80186fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018700:	2a2e      	cmp	r2, #46	@ 0x2e
 8018702:	d012      	beq.n	801872a <__gethex+0x1fe>
 8018704:	2b20      	cmp	r3, #32
 8018706:	d104      	bne.n	8018712 <__gethex+0x1e6>
 8018708:	f845 bb04 	str.w	fp, [r5], #4
 801870c:	f04f 0b00 	mov.w	fp, #0
 8018710:	465b      	mov	r3, fp
 8018712:	7830      	ldrb	r0, [r6, #0]
 8018714:	9303      	str	r3, [sp, #12]
 8018716:	f7ff fef3 	bl	8018500 <__hexdig_fun>
 801871a:	9b03      	ldr	r3, [sp, #12]
 801871c:	f000 000f 	and.w	r0, r0, #15
 8018720:	4098      	lsls	r0, r3
 8018722:	ea4b 0b00 	orr.w	fp, fp, r0
 8018726:	3304      	adds	r3, #4
 8018728:	e7ae      	b.n	8018688 <__gethex+0x15c>
 801872a:	45b1      	cmp	r9, r6
 801872c:	d8ea      	bhi.n	8018704 <__gethex+0x1d8>
 801872e:	492b      	ldr	r1, [pc, #172]	@ (80187dc <__gethex+0x2b0>)
 8018730:	9303      	str	r3, [sp, #12]
 8018732:	2201      	movs	r2, #1
 8018734:	4630      	mov	r0, r6
 8018736:	f7ff fcc2 	bl	80180be <strncmp>
 801873a:	9b03      	ldr	r3, [sp, #12]
 801873c:	2800      	cmp	r0, #0
 801873e:	d1e1      	bne.n	8018704 <__gethex+0x1d8>
 8018740:	e7a2      	b.n	8018688 <__gethex+0x15c>
 8018742:	1ea9      	subs	r1, r5, #2
 8018744:	4620      	mov	r0, r4
 8018746:	f000 fe63 	bl	8019410 <__any_on>
 801874a:	2800      	cmp	r0, #0
 801874c:	d0c2      	beq.n	80186d4 <__gethex+0x1a8>
 801874e:	f04f 0903 	mov.w	r9, #3
 8018752:	e7c1      	b.n	80186d8 <__gethex+0x1ac>
 8018754:	da09      	bge.n	801876a <__gethex+0x23e>
 8018756:	1b75      	subs	r5, r6, r5
 8018758:	4621      	mov	r1, r4
 801875a:	9801      	ldr	r0, [sp, #4]
 801875c:	462a      	mov	r2, r5
 801875e:	f000 fc21 	bl	8018fa4 <__lshift>
 8018762:	1b7f      	subs	r7, r7, r5
 8018764:	4604      	mov	r4, r0
 8018766:	f100 0a14 	add.w	sl, r0, #20
 801876a:	f04f 0900 	mov.w	r9, #0
 801876e:	e7b8      	b.n	80186e2 <__gethex+0x1b6>
 8018770:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018774:	42bd      	cmp	r5, r7
 8018776:	dd6f      	ble.n	8018858 <__gethex+0x32c>
 8018778:	1bed      	subs	r5, r5, r7
 801877a:	42ae      	cmp	r6, r5
 801877c:	dc34      	bgt.n	80187e8 <__gethex+0x2bc>
 801877e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018782:	2b02      	cmp	r3, #2
 8018784:	d022      	beq.n	80187cc <__gethex+0x2a0>
 8018786:	2b03      	cmp	r3, #3
 8018788:	d024      	beq.n	80187d4 <__gethex+0x2a8>
 801878a:	2b01      	cmp	r3, #1
 801878c:	d115      	bne.n	80187ba <__gethex+0x28e>
 801878e:	42ae      	cmp	r6, r5
 8018790:	d113      	bne.n	80187ba <__gethex+0x28e>
 8018792:	2e01      	cmp	r6, #1
 8018794:	d10b      	bne.n	80187ae <__gethex+0x282>
 8018796:	9a02      	ldr	r2, [sp, #8]
 8018798:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801879c:	6013      	str	r3, [r2, #0]
 801879e:	2301      	movs	r3, #1
 80187a0:	6123      	str	r3, [r4, #16]
 80187a2:	f8ca 3000 	str.w	r3, [sl]
 80187a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80187a8:	2562      	movs	r5, #98	@ 0x62
 80187aa:	601c      	str	r4, [r3, #0]
 80187ac:	e73a      	b.n	8018624 <__gethex+0xf8>
 80187ae:	1e71      	subs	r1, r6, #1
 80187b0:	4620      	mov	r0, r4
 80187b2:	f000 fe2d 	bl	8019410 <__any_on>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	d1ed      	bne.n	8018796 <__gethex+0x26a>
 80187ba:	9801      	ldr	r0, [sp, #4]
 80187bc:	4621      	mov	r1, r4
 80187be:	f000 f9d9 	bl	8018b74 <_Bfree>
 80187c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80187c4:	2300      	movs	r3, #0
 80187c6:	6013      	str	r3, [r2, #0]
 80187c8:	2550      	movs	r5, #80	@ 0x50
 80187ca:	e72b      	b.n	8018624 <__gethex+0xf8>
 80187cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d1f3      	bne.n	80187ba <__gethex+0x28e>
 80187d2:	e7e0      	b.n	8018796 <__gethex+0x26a>
 80187d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d1dd      	bne.n	8018796 <__gethex+0x26a>
 80187da:	e7ee      	b.n	80187ba <__gethex+0x28e>
 80187dc:	0801a90c 	.word	0x0801a90c
 80187e0:	0801ab2b 	.word	0x0801ab2b
 80187e4:	0801ab3c 	.word	0x0801ab3c
 80187e8:	1e6f      	subs	r7, r5, #1
 80187ea:	f1b9 0f00 	cmp.w	r9, #0
 80187ee:	d130      	bne.n	8018852 <__gethex+0x326>
 80187f0:	b127      	cbz	r7, 80187fc <__gethex+0x2d0>
 80187f2:	4639      	mov	r1, r7
 80187f4:	4620      	mov	r0, r4
 80187f6:	f000 fe0b 	bl	8019410 <__any_on>
 80187fa:	4681      	mov	r9, r0
 80187fc:	117a      	asrs	r2, r7, #5
 80187fe:	2301      	movs	r3, #1
 8018800:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018804:	f007 071f 	and.w	r7, r7, #31
 8018808:	40bb      	lsls	r3, r7
 801880a:	4213      	tst	r3, r2
 801880c:	4629      	mov	r1, r5
 801880e:	4620      	mov	r0, r4
 8018810:	bf18      	it	ne
 8018812:	f049 0902 	orrne.w	r9, r9, #2
 8018816:	f7ff fe21 	bl	801845c <rshift>
 801881a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801881e:	1b76      	subs	r6, r6, r5
 8018820:	2502      	movs	r5, #2
 8018822:	f1b9 0f00 	cmp.w	r9, #0
 8018826:	d047      	beq.n	80188b8 <__gethex+0x38c>
 8018828:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801882c:	2b02      	cmp	r3, #2
 801882e:	d015      	beq.n	801885c <__gethex+0x330>
 8018830:	2b03      	cmp	r3, #3
 8018832:	d017      	beq.n	8018864 <__gethex+0x338>
 8018834:	2b01      	cmp	r3, #1
 8018836:	d109      	bne.n	801884c <__gethex+0x320>
 8018838:	f019 0f02 	tst.w	r9, #2
 801883c:	d006      	beq.n	801884c <__gethex+0x320>
 801883e:	f8da 3000 	ldr.w	r3, [sl]
 8018842:	ea49 0903 	orr.w	r9, r9, r3
 8018846:	f019 0f01 	tst.w	r9, #1
 801884a:	d10e      	bne.n	801886a <__gethex+0x33e>
 801884c:	f045 0510 	orr.w	r5, r5, #16
 8018850:	e032      	b.n	80188b8 <__gethex+0x38c>
 8018852:	f04f 0901 	mov.w	r9, #1
 8018856:	e7d1      	b.n	80187fc <__gethex+0x2d0>
 8018858:	2501      	movs	r5, #1
 801885a:	e7e2      	b.n	8018822 <__gethex+0x2f6>
 801885c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801885e:	f1c3 0301 	rsb	r3, r3, #1
 8018862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018866:	2b00      	cmp	r3, #0
 8018868:	d0f0      	beq.n	801884c <__gethex+0x320>
 801886a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801886e:	f104 0314 	add.w	r3, r4, #20
 8018872:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018876:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801887a:	f04f 0c00 	mov.w	ip, #0
 801887e:	4618      	mov	r0, r3
 8018880:	f853 2b04 	ldr.w	r2, [r3], #4
 8018884:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018888:	d01b      	beq.n	80188c2 <__gethex+0x396>
 801888a:	3201      	adds	r2, #1
 801888c:	6002      	str	r2, [r0, #0]
 801888e:	2d02      	cmp	r5, #2
 8018890:	f104 0314 	add.w	r3, r4, #20
 8018894:	d13c      	bne.n	8018910 <__gethex+0x3e4>
 8018896:	f8d8 2000 	ldr.w	r2, [r8]
 801889a:	3a01      	subs	r2, #1
 801889c:	42b2      	cmp	r2, r6
 801889e:	d109      	bne.n	80188b4 <__gethex+0x388>
 80188a0:	1171      	asrs	r1, r6, #5
 80188a2:	2201      	movs	r2, #1
 80188a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80188a8:	f006 061f 	and.w	r6, r6, #31
 80188ac:	fa02 f606 	lsl.w	r6, r2, r6
 80188b0:	421e      	tst	r6, r3
 80188b2:	d13a      	bne.n	801892a <__gethex+0x3fe>
 80188b4:	f045 0520 	orr.w	r5, r5, #32
 80188b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188ba:	601c      	str	r4, [r3, #0]
 80188bc:	9b02      	ldr	r3, [sp, #8]
 80188be:	601f      	str	r7, [r3, #0]
 80188c0:	e6b0      	b.n	8018624 <__gethex+0xf8>
 80188c2:	4299      	cmp	r1, r3
 80188c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80188c8:	d8d9      	bhi.n	801887e <__gethex+0x352>
 80188ca:	68a3      	ldr	r3, [r4, #8]
 80188cc:	459b      	cmp	fp, r3
 80188ce:	db17      	blt.n	8018900 <__gethex+0x3d4>
 80188d0:	6861      	ldr	r1, [r4, #4]
 80188d2:	9801      	ldr	r0, [sp, #4]
 80188d4:	3101      	adds	r1, #1
 80188d6:	f000 f90d 	bl	8018af4 <_Balloc>
 80188da:	4681      	mov	r9, r0
 80188dc:	b918      	cbnz	r0, 80188e6 <__gethex+0x3ba>
 80188de:	4b1a      	ldr	r3, [pc, #104]	@ (8018948 <__gethex+0x41c>)
 80188e0:	4602      	mov	r2, r0
 80188e2:	2184      	movs	r1, #132	@ 0x84
 80188e4:	e6c5      	b.n	8018672 <__gethex+0x146>
 80188e6:	6922      	ldr	r2, [r4, #16]
 80188e8:	3202      	adds	r2, #2
 80188ea:	f104 010c 	add.w	r1, r4, #12
 80188ee:	0092      	lsls	r2, r2, #2
 80188f0:	300c      	adds	r0, #12
 80188f2:	f7ff fd2c 	bl	801834e <memcpy>
 80188f6:	4621      	mov	r1, r4
 80188f8:	9801      	ldr	r0, [sp, #4]
 80188fa:	f000 f93b 	bl	8018b74 <_Bfree>
 80188fe:	464c      	mov	r4, r9
 8018900:	6923      	ldr	r3, [r4, #16]
 8018902:	1c5a      	adds	r2, r3, #1
 8018904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018908:	6122      	str	r2, [r4, #16]
 801890a:	2201      	movs	r2, #1
 801890c:	615a      	str	r2, [r3, #20]
 801890e:	e7be      	b.n	801888e <__gethex+0x362>
 8018910:	6922      	ldr	r2, [r4, #16]
 8018912:	455a      	cmp	r2, fp
 8018914:	dd0b      	ble.n	801892e <__gethex+0x402>
 8018916:	2101      	movs	r1, #1
 8018918:	4620      	mov	r0, r4
 801891a:	f7ff fd9f 	bl	801845c <rshift>
 801891e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018922:	3701      	adds	r7, #1
 8018924:	42bb      	cmp	r3, r7
 8018926:	f6ff aee0 	blt.w	80186ea <__gethex+0x1be>
 801892a:	2501      	movs	r5, #1
 801892c:	e7c2      	b.n	80188b4 <__gethex+0x388>
 801892e:	f016 061f 	ands.w	r6, r6, #31
 8018932:	d0fa      	beq.n	801892a <__gethex+0x3fe>
 8018934:	4453      	add	r3, sl
 8018936:	f1c6 0620 	rsb	r6, r6, #32
 801893a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801893e:	f000 f9cb 	bl	8018cd8 <__hi0bits>
 8018942:	42b0      	cmp	r0, r6
 8018944:	dbe7      	blt.n	8018916 <__gethex+0x3ea>
 8018946:	e7f0      	b.n	801892a <__gethex+0x3fe>
 8018948:	0801ab2b 	.word	0x0801ab2b

0801894c <L_shift>:
 801894c:	f1c2 0208 	rsb	r2, r2, #8
 8018950:	0092      	lsls	r2, r2, #2
 8018952:	b570      	push	{r4, r5, r6, lr}
 8018954:	f1c2 0620 	rsb	r6, r2, #32
 8018958:	6843      	ldr	r3, [r0, #4]
 801895a:	6804      	ldr	r4, [r0, #0]
 801895c:	fa03 f506 	lsl.w	r5, r3, r6
 8018960:	432c      	orrs	r4, r5
 8018962:	40d3      	lsrs	r3, r2
 8018964:	6004      	str	r4, [r0, #0]
 8018966:	f840 3f04 	str.w	r3, [r0, #4]!
 801896a:	4288      	cmp	r0, r1
 801896c:	d3f4      	bcc.n	8018958 <L_shift+0xc>
 801896e:	bd70      	pop	{r4, r5, r6, pc}

08018970 <__match>:
 8018970:	b530      	push	{r4, r5, lr}
 8018972:	6803      	ldr	r3, [r0, #0]
 8018974:	3301      	adds	r3, #1
 8018976:	f811 4b01 	ldrb.w	r4, [r1], #1
 801897a:	b914      	cbnz	r4, 8018982 <__match+0x12>
 801897c:	6003      	str	r3, [r0, #0]
 801897e:	2001      	movs	r0, #1
 8018980:	bd30      	pop	{r4, r5, pc}
 8018982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018986:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801898a:	2d19      	cmp	r5, #25
 801898c:	bf98      	it	ls
 801898e:	3220      	addls	r2, #32
 8018990:	42a2      	cmp	r2, r4
 8018992:	d0f0      	beq.n	8018976 <__match+0x6>
 8018994:	2000      	movs	r0, #0
 8018996:	e7f3      	b.n	8018980 <__match+0x10>

08018998 <__hexnan>:
 8018998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801899c:	680b      	ldr	r3, [r1, #0]
 801899e:	6801      	ldr	r1, [r0, #0]
 80189a0:	115e      	asrs	r6, r3, #5
 80189a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80189a6:	f013 031f 	ands.w	r3, r3, #31
 80189aa:	b087      	sub	sp, #28
 80189ac:	bf18      	it	ne
 80189ae:	3604      	addne	r6, #4
 80189b0:	2500      	movs	r5, #0
 80189b2:	1f37      	subs	r7, r6, #4
 80189b4:	4682      	mov	sl, r0
 80189b6:	4690      	mov	r8, r2
 80189b8:	9301      	str	r3, [sp, #4]
 80189ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80189be:	46b9      	mov	r9, r7
 80189c0:	463c      	mov	r4, r7
 80189c2:	9502      	str	r5, [sp, #8]
 80189c4:	46ab      	mov	fp, r5
 80189c6:	784a      	ldrb	r2, [r1, #1]
 80189c8:	1c4b      	adds	r3, r1, #1
 80189ca:	9303      	str	r3, [sp, #12]
 80189cc:	b342      	cbz	r2, 8018a20 <__hexnan+0x88>
 80189ce:	4610      	mov	r0, r2
 80189d0:	9105      	str	r1, [sp, #20]
 80189d2:	9204      	str	r2, [sp, #16]
 80189d4:	f7ff fd94 	bl	8018500 <__hexdig_fun>
 80189d8:	2800      	cmp	r0, #0
 80189da:	d151      	bne.n	8018a80 <__hexnan+0xe8>
 80189dc:	9a04      	ldr	r2, [sp, #16]
 80189de:	9905      	ldr	r1, [sp, #20]
 80189e0:	2a20      	cmp	r2, #32
 80189e2:	d818      	bhi.n	8018a16 <__hexnan+0x7e>
 80189e4:	9b02      	ldr	r3, [sp, #8]
 80189e6:	459b      	cmp	fp, r3
 80189e8:	dd13      	ble.n	8018a12 <__hexnan+0x7a>
 80189ea:	454c      	cmp	r4, r9
 80189ec:	d206      	bcs.n	80189fc <__hexnan+0x64>
 80189ee:	2d07      	cmp	r5, #7
 80189f0:	dc04      	bgt.n	80189fc <__hexnan+0x64>
 80189f2:	462a      	mov	r2, r5
 80189f4:	4649      	mov	r1, r9
 80189f6:	4620      	mov	r0, r4
 80189f8:	f7ff ffa8 	bl	801894c <L_shift>
 80189fc:	4544      	cmp	r4, r8
 80189fe:	d952      	bls.n	8018aa6 <__hexnan+0x10e>
 8018a00:	2300      	movs	r3, #0
 8018a02:	f1a4 0904 	sub.w	r9, r4, #4
 8018a06:	f844 3c04 	str.w	r3, [r4, #-4]
 8018a0a:	f8cd b008 	str.w	fp, [sp, #8]
 8018a0e:	464c      	mov	r4, r9
 8018a10:	461d      	mov	r5, r3
 8018a12:	9903      	ldr	r1, [sp, #12]
 8018a14:	e7d7      	b.n	80189c6 <__hexnan+0x2e>
 8018a16:	2a29      	cmp	r2, #41	@ 0x29
 8018a18:	d157      	bne.n	8018aca <__hexnan+0x132>
 8018a1a:	3102      	adds	r1, #2
 8018a1c:	f8ca 1000 	str.w	r1, [sl]
 8018a20:	f1bb 0f00 	cmp.w	fp, #0
 8018a24:	d051      	beq.n	8018aca <__hexnan+0x132>
 8018a26:	454c      	cmp	r4, r9
 8018a28:	d206      	bcs.n	8018a38 <__hexnan+0xa0>
 8018a2a:	2d07      	cmp	r5, #7
 8018a2c:	dc04      	bgt.n	8018a38 <__hexnan+0xa0>
 8018a2e:	462a      	mov	r2, r5
 8018a30:	4649      	mov	r1, r9
 8018a32:	4620      	mov	r0, r4
 8018a34:	f7ff ff8a 	bl	801894c <L_shift>
 8018a38:	4544      	cmp	r4, r8
 8018a3a:	d936      	bls.n	8018aaa <__hexnan+0x112>
 8018a3c:	f1a8 0204 	sub.w	r2, r8, #4
 8018a40:	4623      	mov	r3, r4
 8018a42:	f853 1b04 	ldr.w	r1, [r3], #4
 8018a46:	f842 1f04 	str.w	r1, [r2, #4]!
 8018a4a:	429f      	cmp	r7, r3
 8018a4c:	d2f9      	bcs.n	8018a42 <__hexnan+0xaa>
 8018a4e:	1b3b      	subs	r3, r7, r4
 8018a50:	f023 0303 	bic.w	r3, r3, #3
 8018a54:	3304      	adds	r3, #4
 8018a56:	3401      	adds	r4, #1
 8018a58:	3e03      	subs	r6, #3
 8018a5a:	42b4      	cmp	r4, r6
 8018a5c:	bf88      	it	hi
 8018a5e:	2304      	movhi	r3, #4
 8018a60:	4443      	add	r3, r8
 8018a62:	2200      	movs	r2, #0
 8018a64:	f843 2b04 	str.w	r2, [r3], #4
 8018a68:	429f      	cmp	r7, r3
 8018a6a:	d2fb      	bcs.n	8018a64 <__hexnan+0xcc>
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	b91b      	cbnz	r3, 8018a78 <__hexnan+0xe0>
 8018a70:	4547      	cmp	r7, r8
 8018a72:	d128      	bne.n	8018ac6 <__hexnan+0x12e>
 8018a74:	2301      	movs	r3, #1
 8018a76:	603b      	str	r3, [r7, #0]
 8018a78:	2005      	movs	r0, #5
 8018a7a:	b007      	add	sp, #28
 8018a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a80:	3501      	adds	r5, #1
 8018a82:	2d08      	cmp	r5, #8
 8018a84:	f10b 0b01 	add.w	fp, fp, #1
 8018a88:	dd06      	ble.n	8018a98 <__hexnan+0x100>
 8018a8a:	4544      	cmp	r4, r8
 8018a8c:	d9c1      	bls.n	8018a12 <__hexnan+0x7a>
 8018a8e:	2300      	movs	r3, #0
 8018a90:	f844 3c04 	str.w	r3, [r4, #-4]
 8018a94:	2501      	movs	r5, #1
 8018a96:	3c04      	subs	r4, #4
 8018a98:	6822      	ldr	r2, [r4, #0]
 8018a9a:	f000 000f 	and.w	r0, r0, #15
 8018a9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018aa2:	6020      	str	r0, [r4, #0]
 8018aa4:	e7b5      	b.n	8018a12 <__hexnan+0x7a>
 8018aa6:	2508      	movs	r5, #8
 8018aa8:	e7b3      	b.n	8018a12 <__hexnan+0x7a>
 8018aaa:	9b01      	ldr	r3, [sp, #4]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d0dd      	beq.n	8018a6c <__hexnan+0xd4>
 8018ab0:	f1c3 0320 	rsb	r3, r3, #32
 8018ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8018ab8:	40da      	lsrs	r2, r3
 8018aba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018abe:	4013      	ands	r3, r2
 8018ac0:	f846 3c04 	str.w	r3, [r6, #-4]
 8018ac4:	e7d2      	b.n	8018a6c <__hexnan+0xd4>
 8018ac6:	3f04      	subs	r7, #4
 8018ac8:	e7d0      	b.n	8018a6c <__hexnan+0xd4>
 8018aca:	2004      	movs	r0, #4
 8018acc:	e7d5      	b.n	8018a7a <__hexnan+0xe2>

08018ace <__ascii_mbtowc>:
 8018ace:	b082      	sub	sp, #8
 8018ad0:	b901      	cbnz	r1, 8018ad4 <__ascii_mbtowc+0x6>
 8018ad2:	a901      	add	r1, sp, #4
 8018ad4:	b142      	cbz	r2, 8018ae8 <__ascii_mbtowc+0x1a>
 8018ad6:	b14b      	cbz	r3, 8018aec <__ascii_mbtowc+0x1e>
 8018ad8:	7813      	ldrb	r3, [r2, #0]
 8018ada:	600b      	str	r3, [r1, #0]
 8018adc:	7812      	ldrb	r2, [r2, #0]
 8018ade:	1e10      	subs	r0, r2, #0
 8018ae0:	bf18      	it	ne
 8018ae2:	2001      	movne	r0, #1
 8018ae4:	b002      	add	sp, #8
 8018ae6:	4770      	bx	lr
 8018ae8:	4610      	mov	r0, r2
 8018aea:	e7fb      	b.n	8018ae4 <__ascii_mbtowc+0x16>
 8018aec:	f06f 0001 	mvn.w	r0, #1
 8018af0:	e7f8      	b.n	8018ae4 <__ascii_mbtowc+0x16>
	...

08018af4 <_Balloc>:
 8018af4:	b570      	push	{r4, r5, r6, lr}
 8018af6:	69c6      	ldr	r6, [r0, #28]
 8018af8:	4604      	mov	r4, r0
 8018afa:	460d      	mov	r5, r1
 8018afc:	b976      	cbnz	r6, 8018b1c <_Balloc+0x28>
 8018afe:	2010      	movs	r0, #16
 8018b00:	f7fd fe92 	bl	8016828 <malloc>
 8018b04:	4602      	mov	r2, r0
 8018b06:	61e0      	str	r0, [r4, #28]
 8018b08:	b920      	cbnz	r0, 8018b14 <_Balloc+0x20>
 8018b0a:	4b18      	ldr	r3, [pc, #96]	@ (8018b6c <_Balloc+0x78>)
 8018b0c:	4818      	ldr	r0, [pc, #96]	@ (8018b70 <_Balloc+0x7c>)
 8018b0e:	216b      	movs	r1, #107	@ 0x6b
 8018b10:	f7ff fc3c 	bl	801838c <__assert_func>
 8018b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018b18:	6006      	str	r6, [r0, #0]
 8018b1a:	60c6      	str	r6, [r0, #12]
 8018b1c:	69e6      	ldr	r6, [r4, #28]
 8018b1e:	68f3      	ldr	r3, [r6, #12]
 8018b20:	b183      	cbz	r3, 8018b44 <_Balloc+0x50>
 8018b22:	69e3      	ldr	r3, [r4, #28]
 8018b24:	68db      	ldr	r3, [r3, #12]
 8018b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018b2a:	b9b8      	cbnz	r0, 8018b5c <_Balloc+0x68>
 8018b2c:	2101      	movs	r1, #1
 8018b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8018b32:	1d72      	adds	r2, r6, #5
 8018b34:	0092      	lsls	r2, r2, #2
 8018b36:	4620      	mov	r0, r4
 8018b38:	f001 fd05 	bl	801a546 <_calloc_r>
 8018b3c:	b160      	cbz	r0, 8018b58 <_Balloc+0x64>
 8018b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018b42:	e00e      	b.n	8018b62 <_Balloc+0x6e>
 8018b44:	2221      	movs	r2, #33	@ 0x21
 8018b46:	2104      	movs	r1, #4
 8018b48:	4620      	mov	r0, r4
 8018b4a:	f001 fcfc 	bl	801a546 <_calloc_r>
 8018b4e:	69e3      	ldr	r3, [r4, #28]
 8018b50:	60f0      	str	r0, [r6, #12]
 8018b52:	68db      	ldr	r3, [r3, #12]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d1e4      	bne.n	8018b22 <_Balloc+0x2e>
 8018b58:	2000      	movs	r0, #0
 8018b5a:	bd70      	pop	{r4, r5, r6, pc}
 8018b5c:	6802      	ldr	r2, [r0, #0]
 8018b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018b62:	2300      	movs	r3, #0
 8018b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018b68:	e7f7      	b.n	8018b5a <_Balloc+0x66>
 8018b6a:	bf00      	nop
 8018b6c:	0801aa76 	.word	0x0801aa76
 8018b70:	0801ab9c 	.word	0x0801ab9c

08018b74 <_Bfree>:
 8018b74:	b570      	push	{r4, r5, r6, lr}
 8018b76:	69c6      	ldr	r6, [r0, #28]
 8018b78:	4605      	mov	r5, r0
 8018b7a:	460c      	mov	r4, r1
 8018b7c:	b976      	cbnz	r6, 8018b9c <_Bfree+0x28>
 8018b7e:	2010      	movs	r0, #16
 8018b80:	f7fd fe52 	bl	8016828 <malloc>
 8018b84:	4602      	mov	r2, r0
 8018b86:	61e8      	str	r0, [r5, #28]
 8018b88:	b920      	cbnz	r0, 8018b94 <_Bfree+0x20>
 8018b8a:	4b09      	ldr	r3, [pc, #36]	@ (8018bb0 <_Bfree+0x3c>)
 8018b8c:	4809      	ldr	r0, [pc, #36]	@ (8018bb4 <_Bfree+0x40>)
 8018b8e:	218f      	movs	r1, #143	@ 0x8f
 8018b90:	f7ff fbfc 	bl	801838c <__assert_func>
 8018b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018b98:	6006      	str	r6, [r0, #0]
 8018b9a:	60c6      	str	r6, [r0, #12]
 8018b9c:	b13c      	cbz	r4, 8018bae <_Bfree+0x3a>
 8018b9e:	69eb      	ldr	r3, [r5, #28]
 8018ba0:	6862      	ldr	r2, [r4, #4]
 8018ba2:	68db      	ldr	r3, [r3, #12]
 8018ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ba8:	6021      	str	r1, [r4, #0]
 8018baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018bae:	bd70      	pop	{r4, r5, r6, pc}
 8018bb0:	0801aa76 	.word	0x0801aa76
 8018bb4:	0801ab9c 	.word	0x0801ab9c

08018bb8 <__multadd>:
 8018bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bbc:	690d      	ldr	r5, [r1, #16]
 8018bbe:	4607      	mov	r7, r0
 8018bc0:	460c      	mov	r4, r1
 8018bc2:	461e      	mov	r6, r3
 8018bc4:	f101 0c14 	add.w	ip, r1, #20
 8018bc8:	2000      	movs	r0, #0
 8018bca:	f8dc 3000 	ldr.w	r3, [ip]
 8018bce:	b299      	uxth	r1, r3
 8018bd0:	fb02 6101 	mla	r1, r2, r1, r6
 8018bd4:	0c1e      	lsrs	r6, r3, #16
 8018bd6:	0c0b      	lsrs	r3, r1, #16
 8018bd8:	fb02 3306 	mla	r3, r2, r6, r3
 8018bdc:	b289      	uxth	r1, r1
 8018bde:	3001      	adds	r0, #1
 8018be0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018be4:	4285      	cmp	r5, r0
 8018be6:	f84c 1b04 	str.w	r1, [ip], #4
 8018bea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018bee:	dcec      	bgt.n	8018bca <__multadd+0x12>
 8018bf0:	b30e      	cbz	r6, 8018c36 <__multadd+0x7e>
 8018bf2:	68a3      	ldr	r3, [r4, #8]
 8018bf4:	42ab      	cmp	r3, r5
 8018bf6:	dc19      	bgt.n	8018c2c <__multadd+0x74>
 8018bf8:	6861      	ldr	r1, [r4, #4]
 8018bfa:	4638      	mov	r0, r7
 8018bfc:	3101      	adds	r1, #1
 8018bfe:	f7ff ff79 	bl	8018af4 <_Balloc>
 8018c02:	4680      	mov	r8, r0
 8018c04:	b928      	cbnz	r0, 8018c12 <__multadd+0x5a>
 8018c06:	4602      	mov	r2, r0
 8018c08:	4b0c      	ldr	r3, [pc, #48]	@ (8018c3c <__multadd+0x84>)
 8018c0a:	480d      	ldr	r0, [pc, #52]	@ (8018c40 <__multadd+0x88>)
 8018c0c:	21ba      	movs	r1, #186	@ 0xba
 8018c0e:	f7ff fbbd 	bl	801838c <__assert_func>
 8018c12:	6922      	ldr	r2, [r4, #16]
 8018c14:	3202      	adds	r2, #2
 8018c16:	f104 010c 	add.w	r1, r4, #12
 8018c1a:	0092      	lsls	r2, r2, #2
 8018c1c:	300c      	adds	r0, #12
 8018c1e:	f7ff fb96 	bl	801834e <memcpy>
 8018c22:	4621      	mov	r1, r4
 8018c24:	4638      	mov	r0, r7
 8018c26:	f7ff ffa5 	bl	8018b74 <_Bfree>
 8018c2a:	4644      	mov	r4, r8
 8018c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018c30:	3501      	adds	r5, #1
 8018c32:	615e      	str	r6, [r3, #20]
 8018c34:	6125      	str	r5, [r4, #16]
 8018c36:	4620      	mov	r0, r4
 8018c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c3c:	0801ab2b 	.word	0x0801ab2b
 8018c40:	0801ab9c 	.word	0x0801ab9c

08018c44 <__s2b>:
 8018c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c48:	460c      	mov	r4, r1
 8018c4a:	4615      	mov	r5, r2
 8018c4c:	461f      	mov	r7, r3
 8018c4e:	2209      	movs	r2, #9
 8018c50:	3308      	adds	r3, #8
 8018c52:	4606      	mov	r6, r0
 8018c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c58:	2100      	movs	r1, #0
 8018c5a:	2201      	movs	r2, #1
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	db09      	blt.n	8018c74 <__s2b+0x30>
 8018c60:	4630      	mov	r0, r6
 8018c62:	f7ff ff47 	bl	8018af4 <_Balloc>
 8018c66:	b940      	cbnz	r0, 8018c7a <__s2b+0x36>
 8018c68:	4602      	mov	r2, r0
 8018c6a:	4b19      	ldr	r3, [pc, #100]	@ (8018cd0 <__s2b+0x8c>)
 8018c6c:	4819      	ldr	r0, [pc, #100]	@ (8018cd4 <__s2b+0x90>)
 8018c6e:	21d3      	movs	r1, #211	@ 0xd3
 8018c70:	f7ff fb8c 	bl	801838c <__assert_func>
 8018c74:	0052      	lsls	r2, r2, #1
 8018c76:	3101      	adds	r1, #1
 8018c78:	e7f0      	b.n	8018c5c <__s2b+0x18>
 8018c7a:	9b08      	ldr	r3, [sp, #32]
 8018c7c:	6143      	str	r3, [r0, #20]
 8018c7e:	2d09      	cmp	r5, #9
 8018c80:	f04f 0301 	mov.w	r3, #1
 8018c84:	6103      	str	r3, [r0, #16]
 8018c86:	dd16      	ble.n	8018cb6 <__s2b+0x72>
 8018c88:	f104 0909 	add.w	r9, r4, #9
 8018c8c:	46c8      	mov	r8, r9
 8018c8e:	442c      	add	r4, r5
 8018c90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018c94:	4601      	mov	r1, r0
 8018c96:	3b30      	subs	r3, #48	@ 0x30
 8018c98:	220a      	movs	r2, #10
 8018c9a:	4630      	mov	r0, r6
 8018c9c:	f7ff ff8c 	bl	8018bb8 <__multadd>
 8018ca0:	45a0      	cmp	r8, r4
 8018ca2:	d1f5      	bne.n	8018c90 <__s2b+0x4c>
 8018ca4:	f1a5 0408 	sub.w	r4, r5, #8
 8018ca8:	444c      	add	r4, r9
 8018caa:	1b2d      	subs	r5, r5, r4
 8018cac:	1963      	adds	r3, r4, r5
 8018cae:	42bb      	cmp	r3, r7
 8018cb0:	db04      	blt.n	8018cbc <__s2b+0x78>
 8018cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cb6:	340a      	adds	r4, #10
 8018cb8:	2509      	movs	r5, #9
 8018cba:	e7f6      	b.n	8018caa <__s2b+0x66>
 8018cbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018cc0:	4601      	mov	r1, r0
 8018cc2:	3b30      	subs	r3, #48	@ 0x30
 8018cc4:	220a      	movs	r2, #10
 8018cc6:	4630      	mov	r0, r6
 8018cc8:	f7ff ff76 	bl	8018bb8 <__multadd>
 8018ccc:	e7ee      	b.n	8018cac <__s2b+0x68>
 8018cce:	bf00      	nop
 8018cd0:	0801ab2b 	.word	0x0801ab2b
 8018cd4:	0801ab9c 	.word	0x0801ab9c

08018cd8 <__hi0bits>:
 8018cd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018cdc:	4603      	mov	r3, r0
 8018cde:	bf36      	itet	cc
 8018ce0:	0403      	lslcc	r3, r0, #16
 8018ce2:	2000      	movcs	r0, #0
 8018ce4:	2010      	movcc	r0, #16
 8018ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018cea:	bf3c      	itt	cc
 8018cec:	021b      	lslcc	r3, r3, #8
 8018cee:	3008      	addcc	r0, #8
 8018cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018cf4:	bf3c      	itt	cc
 8018cf6:	011b      	lslcc	r3, r3, #4
 8018cf8:	3004      	addcc	r0, #4
 8018cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018cfe:	bf3c      	itt	cc
 8018d00:	009b      	lslcc	r3, r3, #2
 8018d02:	3002      	addcc	r0, #2
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	db05      	blt.n	8018d14 <__hi0bits+0x3c>
 8018d08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018d0c:	f100 0001 	add.w	r0, r0, #1
 8018d10:	bf08      	it	eq
 8018d12:	2020      	moveq	r0, #32
 8018d14:	4770      	bx	lr

08018d16 <__lo0bits>:
 8018d16:	6803      	ldr	r3, [r0, #0]
 8018d18:	4602      	mov	r2, r0
 8018d1a:	f013 0007 	ands.w	r0, r3, #7
 8018d1e:	d00b      	beq.n	8018d38 <__lo0bits+0x22>
 8018d20:	07d9      	lsls	r1, r3, #31
 8018d22:	d421      	bmi.n	8018d68 <__lo0bits+0x52>
 8018d24:	0798      	lsls	r0, r3, #30
 8018d26:	bf49      	itett	mi
 8018d28:	085b      	lsrmi	r3, r3, #1
 8018d2a:	089b      	lsrpl	r3, r3, #2
 8018d2c:	2001      	movmi	r0, #1
 8018d2e:	6013      	strmi	r3, [r2, #0]
 8018d30:	bf5c      	itt	pl
 8018d32:	6013      	strpl	r3, [r2, #0]
 8018d34:	2002      	movpl	r0, #2
 8018d36:	4770      	bx	lr
 8018d38:	b299      	uxth	r1, r3
 8018d3a:	b909      	cbnz	r1, 8018d40 <__lo0bits+0x2a>
 8018d3c:	0c1b      	lsrs	r3, r3, #16
 8018d3e:	2010      	movs	r0, #16
 8018d40:	b2d9      	uxtb	r1, r3
 8018d42:	b909      	cbnz	r1, 8018d48 <__lo0bits+0x32>
 8018d44:	3008      	adds	r0, #8
 8018d46:	0a1b      	lsrs	r3, r3, #8
 8018d48:	0719      	lsls	r1, r3, #28
 8018d4a:	bf04      	itt	eq
 8018d4c:	091b      	lsreq	r3, r3, #4
 8018d4e:	3004      	addeq	r0, #4
 8018d50:	0799      	lsls	r1, r3, #30
 8018d52:	bf04      	itt	eq
 8018d54:	089b      	lsreq	r3, r3, #2
 8018d56:	3002      	addeq	r0, #2
 8018d58:	07d9      	lsls	r1, r3, #31
 8018d5a:	d403      	bmi.n	8018d64 <__lo0bits+0x4e>
 8018d5c:	085b      	lsrs	r3, r3, #1
 8018d5e:	f100 0001 	add.w	r0, r0, #1
 8018d62:	d003      	beq.n	8018d6c <__lo0bits+0x56>
 8018d64:	6013      	str	r3, [r2, #0]
 8018d66:	4770      	bx	lr
 8018d68:	2000      	movs	r0, #0
 8018d6a:	4770      	bx	lr
 8018d6c:	2020      	movs	r0, #32
 8018d6e:	4770      	bx	lr

08018d70 <__i2b>:
 8018d70:	b510      	push	{r4, lr}
 8018d72:	460c      	mov	r4, r1
 8018d74:	2101      	movs	r1, #1
 8018d76:	f7ff febd 	bl	8018af4 <_Balloc>
 8018d7a:	4602      	mov	r2, r0
 8018d7c:	b928      	cbnz	r0, 8018d8a <__i2b+0x1a>
 8018d7e:	4b05      	ldr	r3, [pc, #20]	@ (8018d94 <__i2b+0x24>)
 8018d80:	4805      	ldr	r0, [pc, #20]	@ (8018d98 <__i2b+0x28>)
 8018d82:	f240 1145 	movw	r1, #325	@ 0x145
 8018d86:	f7ff fb01 	bl	801838c <__assert_func>
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	6144      	str	r4, [r0, #20]
 8018d8e:	6103      	str	r3, [r0, #16]
 8018d90:	bd10      	pop	{r4, pc}
 8018d92:	bf00      	nop
 8018d94:	0801ab2b 	.word	0x0801ab2b
 8018d98:	0801ab9c 	.word	0x0801ab9c

08018d9c <__multiply>:
 8018d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da0:	4614      	mov	r4, r2
 8018da2:	690a      	ldr	r2, [r1, #16]
 8018da4:	6923      	ldr	r3, [r4, #16]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	bfa8      	it	ge
 8018daa:	4623      	movge	r3, r4
 8018dac:	460f      	mov	r7, r1
 8018dae:	bfa4      	itt	ge
 8018db0:	460c      	movge	r4, r1
 8018db2:	461f      	movge	r7, r3
 8018db4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018db8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018dbc:	68a3      	ldr	r3, [r4, #8]
 8018dbe:	6861      	ldr	r1, [r4, #4]
 8018dc0:	eb0a 0609 	add.w	r6, sl, r9
 8018dc4:	42b3      	cmp	r3, r6
 8018dc6:	b085      	sub	sp, #20
 8018dc8:	bfb8      	it	lt
 8018dca:	3101      	addlt	r1, #1
 8018dcc:	f7ff fe92 	bl	8018af4 <_Balloc>
 8018dd0:	b930      	cbnz	r0, 8018de0 <__multiply+0x44>
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	4b44      	ldr	r3, [pc, #272]	@ (8018ee8 <__multiply+0x14c>)
 8018dd6:	4845      	ldr	r0, [pc, #276]	@ (8018eec <__multiply+0x150>)
 8018dd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018ddc:	f7ff fad6 	bl	801838c <__assert_func>
 8018de0:	f100 0514 	add.w	r5, r0, #20
 8018de4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018de8:	462b      	mov	r3, r5
 8018dea:	2200      	movs	r2, #0
 8018dec:	4543      	cmp	r3, r8
 8018dee:	d321      	bcc.n	8018e34 <__multiply+0x98>
 8018df0:	f107 0114 	add.w	r1, r7, #20
 8018df4:	f104 0214 	add.w	r2, r4, #20
 8018df8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018dfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018e00:	9302      	str	r3, [sp, #8]
 8018e02:	1b13      	subs	r3, r2, r4
 8018e04:	3b15      	subs	r3, #21
 8018e06:	f023 0303 	bic.w	r3, r3, #3
 8018e0a:	3304      	adds	r3, #4
 8018e0c:	f104 0715 	add.w	r7, r4, #21
 8018e10:	42ba      	cmp	r2, r7
 8018e12:	bf38      	it	cc
 8018e14:	2304      	movcc	r3, #4
 8018e16:	9301      	str	r3, [sp, #4]
 8018e18:	9b02      	ldr	r3, [sp, #8]
 8018e1a:	9103      	str	r1, [sp, #12]
 8018e1c:	428b      	cmp	r3, r1
 8018e1e:	d80c      	bhi.n	8018e3a <__multiply+0x9e>
 8018e20:	2e00      	cmp	r6, #0
 8018e22:	dd03      	ble.n	8018e2c <__multiply+0x90>
 8018e24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d05b      	beq.n	8018ee4 <__multiply+0x148>
 8018e2c:	6106      	str	r6, [r0, #16]
 8018e2e:	b005      	add	sp, #20
 8018e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e34:	f843 2b04 	str.w	r2, [r3], #4
 8018e38:	e7d8      	b.n	8018dec <__multiply+0x50>
 8018e3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8018e3e:	f1ba 0f00 	cmp.w	sl, #0
 8018e42:	d024      	beq.n	8018e8e <__multiply+0xf2>
 8018e44:	f104 0e14 	add.w	lr, r4, #20
 8018e48:	46a9      	mov	r9, r5
 8018e4a:	f04f 0c00 	mov.w	ip, #0
 8018e4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018e52:	f8d9 3000 	ldr.w	r3, [r9]
 8018e56:	fa1f fb87 	uxth.w	fp, r7
 8018e5a:	b29b      	uxth	r3, r3
 8018e5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8018e60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018e64:	f8d9 7000 	ldr.w	r7, [r9]
 8018e68:	4463      	add	r3, ip
 8018e6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018e6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8018e72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018e76:	b29b      	uxth	r3, r3
 8018e78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018e7c:	4572      	cmp	r2, lr
 8018e7e:	f849 3b04 	str.w	r3, [r9], #4
 8018e82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018e86:	d8e2      	bhi.n	8018e4e <__multiply+0xb2>
 8018e88:	9b01      	ldr	r3, [sp, #4]
 8018e8a:	f845 c003 	str.w	ip, [r5, r3]
 8018e8e:	9b03      	ldr	r3, [sp, #12]
 8018e90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018e94:	3104      	adds	r1, #4
 8018e96:	f1b9 0f00 	cmp.w	r9, #0
 8018e9a:	d021      	beq.n	8018ee0 <__multiply+0x144>
 8018e9c:	682b      	ldr	r3, [r5, #0]
 8018e9e:	f104 0c14 	add.w	ip, r4, #20
 8018ea2:	46ae      	mov	lr, r5
 8018ea4:	f04f 0a00 	mov.w	sl, #0
 8018ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8018eac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018eb0:	fb09 770b 	mla	r7, r9, fp, r7
 8018eb4:	4457      	add	r7, sl
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018ebc:	f84e 3b04 	str.w	r3, [lr], #4
 8018ec0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018ec4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018ec8:	f8be 3000 	ldrh.w	r3, [lr]
 8018ecc:	fb09 330a 	mla	r3, r9, sl, r3
 8018ed0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018ed4:	4562      	cmp	r2, ip
 8018ed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018eda:	d8e5      	bhi.n	8018ea8 <__multiply+0x10c>
 8018edc:	9f01      	ldr	r7, [sp, #4]
 8018ede:	51eb      	str	r3, [r5, r7]
 8018ee0:	3504      	adds	r5, #4
 8018ee2:	e799      	b.n	8018e18 <__multiply+0x7c>
 8018ee4:	3e01      	subs	r6, #1
 8018ee6:	e79b      	b.n	8018e20 <__multiply+0x84>
 8018ee8:	0801ab2b 	.word	0x0801ab2b
 8018eec:	0801ab9c 	.word	0x0801ab9c

08018ef0 <__pow5mult>:
 8018ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ef4:	4615      	mov	r5, r2
 8018ef6:	f012 0203 	ands.w	r2, r2, #3
 8018efa:	4607      	mov	r7, r0
 8018efc:	460e      	mov	r6, r1
 8018efe:	d007      	beq.n	8018f10 <__pow5mult+0x20>
 8018f00:	4c25      	ldr	r4, [pc, #148]	@ (8018f98 <__pow5mult+0xa8>)
 8018f02:	3a01      	subs	r2, #1
 8018f04:	2300      	movs	r3, #0
 8018f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f0a:	f7ff fe55 	bl	8018bb8 <__multadd>
 8018f0e:	4606      	mov	r6, r0
 8018f10:	10ad      	asrs	r5, r5, #2
 8018f12:	d03d      	beq.n	8018f90 <__pow5mult+0xa0>
 8018f14:	69fc      	ldr	r4, [r7, #28]
 8018f16:	b97c      	cbnz	r4, 8018f38 <__pow5mult+0x48>
 8018f18:	2010      	movs	r0, #16
 8018f1a:	f7fd fc85 	bl	8016828 <malloc>
 8018f1e:	4602      	mov	r2, r0
 8018f20:	61f8      	str	r0, [r7, #28]
 8018f22:	b928      	cbnz	r0, 8018f30 <__pow5mult+0x40>
 8018f24:	4b1d      	ldr	r3, [pc, #116]	@ (8018f9c <__pow5mult+0xac>)
 8018f26:	481e      	ldr	r0, [pc, #120]	@ (8018fa0 <__pow5mult+0xb0>)
 8018f28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018f2c:	f7ff fa2e 	bl	801838c <__assert_func>
 8018f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f34:	6004      	str	r4, [r0, #0]
 8018f36:	60c4      	str	r4, [r0, #12]
 8018f38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f40:	b94c      	cbnz	r4, 8018f56 <__pow5mult+0x66>
 8018f42:	f240 2171 	movw	r1, #625	@ 0x271
 8018f46:	4638      	mov	r0, r7
 8018f48:	f7ff ff12 	bl	8018d70 <__i2b>
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018f52:	4604      	mov	r4, r0
 8018f54:	6003      	str	r3, [r0, #0]
 8018f56:	f04f 0900 	mov.w	r9, #0
 8018f5a:	07eb      	lsls	r3, r5, #31
 8018f5c:	d50a      	bpl.n	8018f74 <__pow5mult+0x84>
 8018f5e:	4631      	mov	r1, r6
 8018f60:	4622      	mov	r2, r4
 8018f62:	4638      	mov	r0, r7
 8018f64:	f7ff ff1a 	bl	8018d9c <__multiply>
 8018f68:	4631      	mov	r1, r6
 8018f6a:	4680      	mov	r8, r0
 8018f6c:	4638      	mov	r0, r7
 8018f6e:	f7ff fe01 	bl	8018b74 <_Bfree>
 8018f72:	4646      	mov	r6, r8
 8018f74:	106d      	asrs	r5, r5, #1
 8018f76:	d00b      	beq.n	8018f90 <__pow5mult+0xa0>
 8018f78:	6820      	ldr	r0, [r4, #0]
 8018f7a:	b938      	cbnz	r0, 8018f8c <__pow5mult+0x9c>
 8018f7c:	4622      	mov	r2, r4
 8018f7e:	4621      	mov	r1, r4
 8018f80:	4638      	mov	r0, r7
 8018f82:	f7ff ff0b 	bl	8018d9c <__multiply>
 8018f86:	6020      	str	r0, [r4, #0]
 8018f88:	f8c0 9000 	str.w	r9, [r0]
 8018f8c:	4604      	mov	r4, r0
 8018f8e:	e7e4      	b.n	8018f5a <__pow5mult+0x6a>
 8018f90:	4630      	mov	r0, r6
 8018f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f96:	bf00      	nop
 8018f98:	0801abf8 	.word	0x0801abf8
 8018f9c:	0801aa76 	.word	0x0801aa76
 8018fa0:	0801ab9c 	.word	0x0801ab9c

08018fa4 <__lshift>:
 8018fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fa8:	460c      	mov	r4, r1
 8018faa:	6849      	ldr	r1, [r1, #4]
 8018fac:	6923      	ldr	r3, [r4, #16]
 8018fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018fb2:	68a3      	ldr	r3, [r4, #8]
 8018fb4:	4607      	mov	r7, r0
 8018fb6:	4691      	mov	r9, r2
 8018fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018fbc:	f108 0601 	add.w	r6, r8, #1
 8018fc0:	42b3      	cmp	r3, r6
 8018fc2:	db0b      	blt.n	8018fdc <__lshift+0x38>
 8018fc4:	4638      	mov	r0, r7
 8018fc6:	f7ff fd95 	bl	8018af4 <_Balloc>
 8018fca:	4605      	mov	r5, r0
 8018fcc:	b948      	cbnz	r0, 8018fe2 <__lshift+0x3e>
 8018fce:	4602      	mov	r2, r0
 8018fd0:	4b28      	ldr	r3, [pc, #160]	@ (8019074 <__lshift+0xd0>)
 8018fd2:	4829      	ldr	r0, [pc, #164]	@ (8019078 <__lshift+0xd4>)
 8018fd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018fd8:	f7ff f9d8 	bl	801838c <__assert_func>
 8018fdc:	3101      	adds	r1, #1
 8018fde:	005b      	lsls	r3, r3, #1
 8018fe0:	e7ee      	b.n	8018fc0 <__lshift+0x1c>
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	f100 0114 	add.w	r1, r0, #20
 8018fe8:	f100 0210 	add.w	r2, r0, #16
 8018fec:	4618      	mov	r0, r3
 8018fee:	4553      	cmp	r3, sl
 8018ff0:	db33      	blt.n	801905a <__lshift+0xb6>
 8018ff2:	6920      	ldr	r0, [r4, #16]
 8018ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ff8:	f104 0314 	add.w	r3, r4, #20
 8018ffc:	f019 091f 	ands.w	r9, r9, #31
 8019000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019004:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019008:	d02b      	beq.n	8019062 <__lshift+0xbe>
 801900a:	f1c9 0e20 	rsb	lr, r9, #32
 801900e:	468a      	mov	sl, r1
 8019010:	2200      	movs	r2, #0
 8019012:	6818      	ldr	r0, [r3, #0]
 8019014:	fa00 f009 	lsl.w	r0, r0, r9
 8019018:	4310      	orrs	r0, r2
 801901a:	f84a 0b04 	str.w	r0, [sl], #4
 801901e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019022:	459c      	cmp	ip, r3
 8019024:	fa22 f20e 	lsr.w	r2, r2, lr
 8019028:	d8f3      	bhi.n	8019012 <__lshift+0x6e>
 801902a:	ebac 0304 	sub.w	r3, ip, r4
 801902e:	3b15      	subs	r3, #21
 8019030:	f023 0303 	bic.w	r3, r3, #3
 8019034:	3304      	adds	r3, #4
 8019036:	f104 0015 	add.w	r0, r4, #21
 801903a:	4584      	cmp	ip, r0
 801903c:	bf38      	it	cc
 801903e:	2304      	movcc	r3, #4
 8019040:	50ca      	str	r2, [r1, r3]
 8019042:	b10a      	cbz	r2, 8019048 <__lshift+0xa4>
 8019044:	f108 0602 	add.w	r6, r8, #2
 8019048:	3e01      	subs	r6, #1
 801904a:	4638      	mov	r0, r7
 801904c:	612e      	str	r6, [r5, #16]
 801904e:	4621      	mov	r1, r4
 8019050:	f7ff fd90 	bl	8018b74 <_Bfree>
 8019054:	4628      	mov	r0, r5
 8019056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801905a:	f842 0f04 	str.w	r0, [r2, #4]!
 801905e:	3301      	adds	r3, #1
 8019060:	e7c5      	b.n	8018fee <__lshift+0x4a>
 8019062:	3904      	subs	r1, #4
 8019064:	f853 2b04 	ldr.w	r2, [r3], #4
 8019068:	f841 2f04 	str.w	r2, [r1, #4]!
 801906c:	459c      	cmp	ip, r3
 801906e:	d8f9      	bhi.n	8019064 <__lshift+0xc0>
 8019070:	e7ea      	b.n	8019048 <__lshift+0xa4>
 8019072:	bf00      	nop
 8019074:	0801ab2b 	.word	0x0801ab2b
 8019078:	0801ab9c 	.word	0x0801ab9c

0801907c <__mcmp>:
 801907c:	690a      	ldr	r2, [r1, #16]
 801907e:	4603      	mov	r3, r0
 8019080:	6900      	ldr	r0, [r0, #16]
 8019082:	1a80      	subs	r0, r0, r2
 8019084:	b530      	push	{r4, r5, lr}
 8019086:	d10e      	bne.n	80190a6 <__mcmp+0x2a>
 8019088:	3314      	adds	r3, #20
 801908a:	3114      	adds	r1, #20
 801908c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019090:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801909c:	4295      	cmp	r5, r2
 801909e:	d003      	beq.n	80190a8 <__mcmp+0x2c>
 80190a0:	d205      	bcs.n	80190ae <__mcmp+0x32>
 80190a2:	f04f 30ff 	mov.w	r0, #4294967295
 80190a6:	bd30      	pop	{r4, r5, pc}
 80190a8:	42a3      	cmp	r3, r4
 80190aa:	d3f3      	bcc.n	8019094 <__mcmp+0x18>
 80190ac:	e7fb      	b.n	80190a6 <__mcmp+0x2a>
 80190ae:	2001      	movs	r0, #1
 80190b0:	e7f9      	b.n	80190a6 <__mcmp+0x2a>
	...

080190b4 <__mdiff>:
 80190b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b8:	4689      	mov	r9, r1
 80190ba:	4606      	mov	r6, r0
 80190bc:	4611      	mov	r1, r2
 80190be:	4648      	mov	r0, r9
 80190c0:	4614      	mov	r4, r2
 80190c2:	f7ff ffdb 	bl	801907c <__mcmp>
 80190c6:	1e05      	subs	r5, r0, #0
 80190c8:	d112      	bne.n	80190f0 <__mdiff+0x3c>
 80190ca:	4629      	mov	r1, r5
 80190cc:	4630      	mov	r0, r6
 80190ce:	f7ff fd11 	bl	8018af4 <_Balloc>
 80190d2:	4602      	mov	r2, r0
 80190d4:	b928      	cbnz	r0, 80190e2 <__mdiff+0x2e>
 80190d6:	4b3f      	ldr	r3, [pc, #252]	@ (80191d4 <__mdiff+0x120>)
 80190d8:	f240 2137 	movw	r1, #567	@ 0x237
 80190dc:	483e      	ldr	r0, [pc, #248]	@ (80191d8 <__mdiff+0x124>)
 80190de:	f7ff f955 	bl	801838c <__assert_func>
 80190e2:	2301      	movs	r3, #1
 80190e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80190e8:	4610      	mov	r0, r2
 80190ea:	b003      	add	sp, #12
 80190ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f0:	bfbc      	itt	lt
 80190f2:	464b      	movlt	r3, r9
 80190f4:	46a1      	movlt	r9, r4
 80190f6:	4630      	mov	r0, r6
 80190f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80190fc:	bfba      	itte	lt
 80190fe:	461c      	movlt	r4, r3
 8019100:	2501      	movlt	r5, #1
 8019102:	2500      	movge	r5, #0
 8019104:	f7ff fcf6 	bl	8018af4 <_Balloc>
 8019108:	4602      	mov	r2, r0
 801910a:	b918      	cbnz	r0, 8019114 <__mdiff+0x60>
 801910c:	4b31      	ldr	r3, [pc, #196]	@ (80191d4 <__mdiff+0x120>)
 801910e:	f240 2145 	movw	r1, #581	@ 0x245
 8019112:	e7e3      	b.n	80190dc <__mdiff+0x28>
 8019114:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8019118:	6926      	ldr	r6, [r4, #16]
 801911a:	60c5      	str	r5, [r0, #12]
 801911c:	f109 0310 	add.w	r3, r9, #16
 8019120:	f109 0514 	add.w	r5, r9, #20
 8019124:	f104 0e14 	add.w	lr, r4, #20
 8019128:	f100 0b14 	add.w	fp, r0, #20
 801912c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8019130:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019134:	9301      	str	r3, [sp, #4]
 8019136:	46d9      	mov	r9, fp
 8019138:	f04f 0c00 	mov.w	ip, #0
 801913c:	9b01      	ldr	r3, [sp, #4]
 801913e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8019142:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019146:	9301      	str	r3, [sp, #4]
 8019148:	fa1f f38a 	uxth.w	r3, sl
 801914c:	4619      	mov	r1, r3
 801914e:	b283      	uxth	r3, r0
 8019150:	1acb      	subs	r3, r1, r3
 8019152:	0c00      	lsrs	r0, r0, #16
 8019154:	4463      	add	r3, ip
 8019156:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801915a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801915e:	b29b      	uxth	r3, r3
 8019160:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019164:	4576      	cmp	r6, lr
 8019166:	f849 3b04 	str.w	r3, [r9], #4
 801916a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801916e:	d8e5      	bhi.n	801913c <__mdiff+0x88>
 8019170:	1b33      	subs	r3, r6, r4
 8019172:	3b15      	subs	r3, #21
 8019174:	f023 0303 	bic.w	r3, r3, #3
 8019178:	3415      	adds	r4, #21
 801917a:	3304      	adds	r3, #4
 801917c:	42a6      	cmp	r6, r4
 801917e:	bf38      	it	cc
 8019180:	2304      	movcc	r3, #4
 8019182:	441d      	add	r5, r3
 8019184:	445b      	add	r3, fp
 8019186:	461e      	mov	r6, r3
 8019188:	462c      	mov	r4, r5
 801918a:	4544      	cmp	r4, r8
 801918c:	d30e      	bcc.n	80191ac <__mdiff+0xf8>
 801918e:	f108 0103 	add.w	r1, r8, #3
 8019192:	1b49      	subs	r1, r1, r5
 8019194:	f021 0103 	bic.w	r1, r1, #3
 8019198:	3d03      	subs	r5, #3
 801919a:	45a8      	cmp	r8, r5
 801919c:	bf38      	it	cc
 801919e:	2100      	movcc	r1, #0
 80191a0:	440b      	add	r3, r1
 80191a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80191a6:	b191      	cbz	r1, 80191ce <__mdiff+0x11a>
 80191a8:	6117      	str	r7, [r2, #16]
 80191aa:	e79d      	b.n	80190e8 <__mdiff+0x34>
 80191ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80191b0:	46e6      	mov	lr, ip
 80191b2:	0c08      	lsrs	r0, r1, #16
 80191b4:	fa1c fc81 	uxtah	ip, ip, r1
 80191b8:	4471      	add	r1, lr
 80191ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80191be:	b289      	uxth	r1, r1
 80191c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80191c4:	f846 1b04 	str.w	r1, [r6], #4
 80191c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80191cc:	e7dd      	b.n	801918a <__mdiff+0xd6>
 80191ce:	3f01      	subs	r7, #1
 80191d0:	e7e7      	b.n	80191a2 <__mdiff+0xee>
 80191d2:	bf00      	nop
 80191d4:	0801ab2b 	.word	0x0801ab2b
 80191d8:	0801ab9c 	.word	0x0801ab9c

080191dc <__ulp>:
 80191dc:	b082      	sub	sp, #8
 80191de:	ed8d 0b00 	vstr	d0, [sp]
 80191e2:	9a01      	ldr	r2, [sp, #4]
 80191e4:	4b0f      	ldr	r3, [pc, #60]	@ (8019224 <__ulp+0x48>)
 80191e6:	4013      	ands	r3, r2
 80191e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	dc08      	bgt.n	8019202 <__ulp+0x26>
 80191f0:	425b      	negs	r3, r3
 80191f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80191f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80191fa:	da04      	bge.n	8019206 <__ulp+0x2a>
 80191fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8019200:	4113      	asrs	r3, r2
 8019202:	2200      	movs	r2, #0
 8019204:	e008      	b.n	8019218 <__ulp+0x3c>
 8019206:	f1a2 0314 	sub.w	r3, r2, #20
 801920a:	2b1e      	cmp	r3, #30
 801920c:	bfda      	itte	le
 801920e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8019212:	40da      	lsrle	r2, r3
 8019214:	2201      	movgt	r2, #1
 8019216:	2300      	movs	r3, #0
 8019218:	4619      	mov	r1, r3
 801921a:	4610      	mov	r0, r2
 801921c:	ec41 0b10 	vmov	d0, r0, r1
 8019220:	b002      	add	sp, #8
 8019222:	4770      	bx	lr
 8019224:	7ff00000 	.word	0x7ff00000

08019228 <__b2d>:
 8019228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801922c:	6906      	ldr	r6, [r0, #16]
 801922e:	f100 0814 	add.w	r8, r0, #20
 8019232:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019236:	1f37      	subs	r7, r6, #4
 8019238:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801923c:	4610      	mov	r0, r2
 801923e:	f7ff fd4b 	bl	8018cd8 <__hi0bits>
 8019242:	f1c0 0320 	rsb	r3, r0, #32
 8019246:	280a      	cmp	r0, #10
 8019248:	600b      	str	r3, [r1, #0]
 801924a:	491b      	ldr	r1, [pc, #108]	@ (80192b8 <__b2d+0x90>)
 801924c:	dc15      	bgt.n	801927a <__b2d+0x52>
 801924e:	f1c0 0c0b 	rsb	ip, r0, #11
 8019252:	fa22 f30c 	lsr.w	r3, r2, ip
 8019256:	45b8      	cmp	r8, r7
 8019258:	ea43 0501 	orr.w	r5, r3, r1
 801925c:	bf34      	ite	cc
 801925e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019262:	2300      	movcs	r3, #0
 8019264:	3015      	adds	r0, #21
 8019266:	fa02 f000 	lsl.w	r0, r2, r0
 801926a:	fa23 f30c 	lsr.w	r3, r3, ip
 801926e:	4303      	orrs	r3, r0
 8019270:	461c      	mov	r4, r3
 8019272:	ec45 4b10 	vmov	d0, r4, r5
 8019276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801927a:	45b8      	cmp	r8, r7
 801927c:	bf3a      	itte	cc
 801927e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019282:	f1a6 0708 	subcc.w	r7, r6, #8
 8019286:	2300      	movcs	r3, #0
 8019288:	380b      	subs	r0, #11
 801928a:	d012      	beq.n	80192b2 <__b2d+0x8a>
 801928c:	f1c0 0120 	rsb	r1, r0, #32
 8019290:	fa23 f401 	lsr.w	r4, r3, r1
 8019294:	4082      	lsls	r2, r0
 8019296:	4322      	orrs	r2, r4
 8019298:	4547      	cmp	r7, r8
 801929a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801929e:	bf8c      	ite	hi
 80192a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80192a4:	2200      	movls	r2, #0
 80192a6:	4083      	lsls	r3, r0
 80192a8:	40ca      	lsrs	r2, r1
 80192aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80192ae:	4313      	orrs	r3, r2
 80192b0:	e7de      	b.n	8019270 <__b2d+0x48>
 80192b2:	ea42 0501 	orr.w	r5, r2, r1
 80192b6:	e7db      	b.n	8019270 <__b2d+0x48>
 80192b8:	3ff00000 	.word	0x3ff00000

080192bc <__d2b>:
 80192bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80192c0:	460f      	mov	r7, r1
 80192c2:	2101      	movs	r1, #1
 80192c4:	ec59 8b10 	vmov	r8, r9, d0
 80192c8:	4616      	mov	r6, r2
 80192ca:	f7ff fc13 	bl	8018af4 <_Balloc>
 80192ce:	4604      	mov	r4, r0
 80192d0:	b930      	cbnz	r0, 80192e0 <__d2b+0x24>
 80192d2:	4602      	mov	r2, r0
 80192d4:	4b23      	ldr	r3, [pc, #140]	@ (8019364 <__d2b+0xa8>)
 80192d6:	4824      	ldr	r0, [pc, #144]	@ (8019368 <__d2b+0xac>)
 80192d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80192dc:	f7ff f856 	bl	801838c <__assert_func>
 80192e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80192e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80192e8:	b10d      	cbz	r5, 80192ee <__d2b+0x32>
 80192ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80192ee:	9301      	str	r3, [sp, #4]
 80192f0:	f1b8 0300 	subs.w	r3, r8, #0
 80192f4:	d023      	beq.n	801933e <__d2b+0x82>
 80192f6:	4668      	mov	r0, sp
 80192f8:	9300      	str	r3, [sp, #0]
 80192fa:	f7ff fd0c 	bl	8018d16 <__lo0bits>
 80192fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019302:	b1d0      	cbz	r0, 801933a <__d2b+0x7e>
 8019304:	f1c0 0320 	rsb	r3, r0, #32
 8019308:	fa02 f303 	lsl.w	r3, r2, r3
 801930c:	430b      	orrs	r3, r1
 801930e:	40c2      	lsrs	r2, r0
 8019310:	6163      	str	r3, [r4, #20]
 8019312:	9201      	str	r2, [sp, #4]
 8019314:	9b01      	ldr	r3, [sp, #4]
 8019316:	61a3      	str	r3, [r4, #24]
 8019318:	2b00      	cmp	r3, #0
 801931a:	bf0c      	ite	eq
 801931c:	2201      	moveq	r2, #1
 801931e:	2202      	movne	r2, #2
 8019320:	6122      	str	r2, [r4, #16]
 8019322:	b1a5      	cbz	r5, 801934e <__d2b+0x92>
 8019324:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019328:	4405      	add	r5, r0
 801932a:	603d      	str	r5, [r7, #0]
 801932c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019330:	6030      	str	r0, [r6, #0]
 8019332:	4620      	mov	r0, r4
 8019334:	b003      	add	sp, #12
 8019336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801933a:	6161      	str	r1, [r4, #20]
 801933c:	e7ea      	b.n	8019314 <__d2b+0x58>
 801933e:	a801      	add	r0, sp, #4
 8019340:	f7ff fce9 	bl	8018d16 <__lo0bits>
 8019344:	9b01      	ldr	r3, [sp, #4]
 8019346:	6163      	str	r3, [r4, #20]
 8019348:	3020      	adds	r0, #32
 801934a:	2201      	movs	r2, #1
 801934c:	e7e8      	b.n	8019320 <__d2b+0x64>
 801934e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019352:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019356:	6038      	str	r0, [r7, #0]
 8019358:	6918      	ldr	r0, [r3, #16]
 801935a:	f7ff fcbd 	bl	8018cd8 <__hi0bits>
 801935e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019362:	e7e5      	b.n	8019330 <__d2b+0x74>
 8019364:	0801ab2b 	.word	0x0801ab2b
 8019368:	0801ab9c 	.word	0x0801ab9c

0801936c <__ratio>:
 801936c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019370:	4688      	mov	r8, r1
 8019372:	4669      	mov	r1, sp
 8019374:	4681      	mov	r9, r0
 8019376:	f7ff ff57 	bl	8019228 <__b2d>
 801937a:	a901      	add	r1, sp, #4
 801937c:	4640      	mov	r0, r8
 801937e:	ec55 4b10 	vmov	r4, r5, d0
 8019382:	f7ff ff51 	bl	8019228 <__b2d>
 8019386:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801938a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801938e:	1ad2      	subs	r2, r2, r3
 8019390:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019394:	1a5b      	subs	r3, r3, r1
 8019396:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801939a:	ec57 6b10 	vmov	r6, r7, d0
 801939e:	2b00      	cmp	r3, #0
 80193a0:	bfd6      	itet	le
 80193a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80193a6:	462a      	movgt	r2, r5
 80193a8:	463a      	movle	r2, r7
 80193aa:	46ab      	mov	fp, r5
 80193ac:	46a2      	mov	sl, r4
 80193ae:	bfce      	itee	gt
 80193b0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80193b4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80193b8:	ee00 3a90 	vmovle	s1, r3
 80193bc:	ec4b ab17 	vmov	d7, sl, fp
 80193c0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80193c4:	b003      	add	sp, #12
 80193c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080193ca <__copybits>:
 80193ca:	3901      	subs	r1, #1
 80193cc:	b570      	push	{r4, r5, r6, lr}
 80193ce:	1149      	asrs	r1, r1, #5
 80193d0:	6914      	ldr	r4, [r2, #16]
 80193d2:	3101      	adds	r1, #1
 80193d4:	f102 0314 	add.w	r3, r2, #20
 80193d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80193dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80193e0:	1f05      	subs	r5, r0, #4
 80193e2:	42a3      	cmp	r3, r4
 80193e4:	d30c      	bcc.n	8019400 <__copybits+0x36>
 80193e6:	1aa3      	subs	r3, r4, r2
 80193e8:	3b11      	subs	r3, #17
 80193ea:	f023 0303 	bic.w	r3, r3, #3
 80193ee:	3211      	adds	r2, #17
 80193f0:	42a2      	cmp	r2, r4
 80193f2:	bf88      	it	hi
 80193f4:	2300      	movhi	r3, #0
 80193f6:	4418      	add	r0, r3
 80193f8:	2300      	movs	r3, #0
 80193fa:	4288      	cmp	r0, r1
 80193fc:	d305      	bcc.n	801940a <__copybits+0x40>
 80193fe:	bd70      	pop	{r4, r5, r6, pc}
 8019400:	f853 6b04 	ldr.w	r6, [r3], #4
 8019404:	f845 6f04 	str.w	r6, [r5, #4]!
 8019408:	e7eb      	b.n	80193e2 <__copybits+0x18>
 801940a:	f840 3b04 	str.w	r3, [r0], #4
 801940e:	e7f4      	b.n	80193fa <__copybits+0x30>

08019410 <__any_on>:
 8019410:	f100 0214 	add.w	r2, r0, #20
 8019414:	6900      	ldr	r0, [r0, #16]
 8019416:	114b      	asrs	r3, r1, #5
 8019418:	4298      	cmp	r0, r3
 801941a:	b510      	push	{r4, lr}
 801941c:	db11      	blt.n	8019442 <__any_on+0x32>
 801941e:	dd0a      	ble.n	8019436 <__any_on+0x26>
 8019420:	f011 011f 	ands.w	r1, r1, #31
 8019424:	d007      	beq.n	8019436 <__any_on+0x26>
 8019426:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801942a:	fa24 f001 	lsr.w	r0, r4, r1
 801942e:	fa00 f101 	lsl.w	r1, r0, r1
 8019432:	428c      	cmp	r4, r1
 8019434:	d10b      	bne.n	801944e <__any_on+0x3e>
 8019436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801943a:	4293      	cmp	r3, r2
 801943c:	d803      	bhi.n	8019446 <__any_on+0x36>
 801943e:	2000      	movs	r0, #0
 8019440:	bd10      	pop	{r4, pc}
 8019442:	4603      	mov	r3, r0
 8019444:	e7f7      	b.n	8019436 <__any_on+0x26>
 8019446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801944a:	2900      	cmp	r1, #0
 801944c:	d0f5      	beq.n	801943a <__any_on+0x2a>
 801944e:	2001      	movs	r0, #1
 8019450:	e7f6      	b.n	8019440 <__any_on+0x30>

08019452 <__ascii_wctomb>:
 8019452:	4603      	mov	r3, r0
 8019454:	4608      	mov	r0, r1
 8019456:	b141      	cbz	r1, 801946a <__ascii_wctomb+0x18>
 8019458:	2aff      	cmp	r2, #255	@ 0xff
 801945a:	d904      	bls.n	8019466 <__ascii_wctomb+0x14>
 801945c:	228a      	movs	r2, #138	@ 0x8a
 801945e:	601a      	str	r2, [r3, #0]
 8019460:	f04f 30ff 	mov.w	r0, #4294967295
 8019464:	4770      	bx	lr
 8019466:	700a      	strb	r2, [r1, #0]
 8019468:	2001      	movs	r0, #1
 801946a:	4770      	bx	lr

0801946c <__ssputs_r>:
 801946c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019470:	688e      	ldr	r6, [r1, #8]
 8019472:	461f      	mov	r7, r3
 8019474:	42be      	cmp	r6, r7
 8019476:	680b      	ldr	r3, [r1, #0]
 8019478:	4682      	mov	sl, r0
 801947a:	460c      	mov	r4, r1
 801947c:	4690      	mov	r8, r2
 801947e:	d82d      	bhi.n	80194dc <__ssputs_r+0x70>
 8019480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019484:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019488:	d026      	beq.n	80194d8 <__ssputs_r+0x6c>
 801948a:	6965      	ldr	r5, [r4, #20]
 801948c:	6909      	ldr	r1, [r1, #16]
 801948e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019492:	eba3 0901 	sub.w	r9, r3, r1
 8019496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801949a:	1c7b      	adds	r3, r7, #1
 801949c:	444b      	add	r3, r9
 801949e:	106d      	asrs	r5, r5, #1
 80194a0:	429d      	cmp	r5, r3
 80194a2:	bf38      	it	cc
 80194a4:	461d      	movcc	r5, r3
 80194a6:	0553      	lsls	r3, r2, #21
 80194a8:	d527      	bpl.n	80194fa <__ssputs_r+0x8e>
 80194aa:	4629      	mov	r1, r5
 80194ac:	f7fd f9ee 	bl	801688c <_malloc_r>
 80194b0:	4606      	mov	r6, r0
 80194b2:	b360      	cbz	r0, 801950e <__ssputs_r+0xa2>
 80194b4:	6921      	ldr	r1, [r4, #16]
 80194b6:	464a      	mov	r2, r9
 80194b8:	f7fe ff49 	bl	801834e <memcpy>
 80194bc:	89a3      	ldrh	r3, [r4, #12]
 80194be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80194c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80194c6:	81a3      	strh	r3, [r4, #12]
 80194c8:	6126      	str	r6, [r4, #16]
 80194ca:	6165      	str	r5, [r4, #20]
 80194cc:	444e      	add	r6, r9
 80194ce:	eba5 0509 	sub.w	r5, r5, r9
 80194d2:	6026      	str	r6, [r4, #0]
 80194d4:	60a5      	str	r5, [r4, #8]
 80194d6:	463e      	mov	r6, r7
 80194d8:	42be      	cmp	r6, r7
 80194da:	d900      	bls.n	80194de <__ssputs_r+0x72>
 80194dc:	463e      	mov	r6, r7
 80194de:	6820      	ldr	r0, [r4, #0]
 80194e0:	4632      	mov	r2, r6
 80194e2:	4641      	mov	r1, r8
 80194e4:	f000 ffeb 	bl	801a4be <memmove>
 80194e8:	68a3      	ldr	r3, [r4, #8]
 80194ea:	1b9b      	subs	r3, r3, r6
 80194ec:	60a3      	str	r3, [r4, #8]
 80194ee:	6823      	ldr	r3, [r4, #0]
 80194f0:	4433      	add	r3, r6
 80194f2:	6023      	str	r3, [r4, #0]
 80194f4:	2000      	movs	r0, #0
 80194f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194fa:	462a      	mov	r2, r5
 80194fc:	f001 f837 	bl	801a56e <_realloc_r>
 8019500:	4606      	mov	r6, r0
 8019502:	2800      	cmp	r0, #0
 8019504:	d1e0      	bne.n	80194c8 <__ssputs_r+0x5c>
 8019506:	6921      	ldr	r1, [r4, #16]
 8019508:	4650      	mov	r0, sl
 801950a:	f7fe ff5d 	bl	80183c8 <_free_r>
 801950e:	230c      	movs	r3, #12
 8019510:	f8ca 3000 	str.w	r3, [sl]
 8019514:	89a3      	ldrh	r3, [r4, #12]
 8019516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801951a:	81a3      	strh	r3, [r4, #12]
 801951c:	f04f 30ff 	mov.w	r0, #4294967295
 8019520:	e7e9      	b.n	80194f6 <__ssputs_r+0x8a>
	...

08019524 <_svfiprintf_r>:
 8019524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019528:	4698      	mov	r8, r3
 801952a:	898b      	ldrh	r3, [r1, #12]
 801952c:	061b      	lsls	r3, r3, #24
 801952e:	b09d      	sub	sp, #116	@ 0x74
 8019530:	4607      	mov	r7, r0
 8019532:	460d      	mov	r5, r1
 8019534:	4614      	mov	r4, r2
 8019536:	d510      	bpl.n	801955a <_svfiprintf_r+0x36>
 8019538:	690b      	ldr	r3, [r1, #16]
 801953a:	b973      	cbnz	r3, 801955a <_svfiprintf_r+0x36>
 801953c:	2140      	movs	r1, #64	@ 0x40
 801953e:	f7fd f9a5 	bl	801688c <_malloc_r>
 8019542:	6028      	str	r0, [r5, #0]
 8019544:	6128      	str	r0, [r5, #16]
 8019546:	b930      	cbnz	r0, 8019556 <_svfiprintf_r+0x32>
 8019548:	230c      	movs	r3, #12
 801954a:	603b      	str	r3, [r7, #0]
 801954c:	f04f 30ff 	mov.w	r0, #4294967295
 8019550:	b01d      	add	sp, #116	@ 0x74
 8019552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019556:	2340      	movs	r3, #64	@ 0x40
 8019558:	616b      	str	r3, [r5, #20]
 801955a:	2300      	movs	r3, #0
 801955c:	9309      	str	r3, [sp, #36]	@ 0x24
 801955e:	2320      	movs	r3, #32
 8019560:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019564:	f8cd 800c 	str.w	r8, [sp, #12]
 8019568:	2330      	movs	r3, #48	@ 0x30
 801956a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019708 <_svfiprintf_r+0x1e4>
 801956e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019572:	f04f 0901 	mov.w	r9, #1
 8019576:	4623      	mov	r3, r4
 8019578:	469a      	mov	sl, r3
 801957a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801957e:	b10a      	cbz	r2, 8019584 <_svfiprintf_r+0x60>
 8019580:	2a25      	cmp	r2, #37	@ 0x25
 8019582:	d1f9      	bne.n	8019578 <_svfiprintf_r+0x54>
 8019584:	ebba 0b04 	subs.w	fp, sl, r4
 8019588:	d00b      	beq.n	80195a2 <_svfiprintf_r+0x7e>
 801958a:	465b      	mov	r3, fp
 801958c:	4622      	mov	r2, r4
 801958e:	4629      	mov	r1, r5
 8019590:	4638      	mov	r0, r7
 8019592:	f7ff ff6b 	bl	801946c <__ssputs_r>
 8019596:	3001      	adds	r0, #1
 8019598:	f000 80a7 	beq.w	80196ea <_svfiprintf_r+0x1c6>
 801959c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801959e:	445a      	add	r2, fp
 80195a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80195a2:	f89a 3000 	ldrb.w	r3, [sl]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f000 809f 	beq.w	80196ea <_svfiprintf_r+0x1c6>
 80195ac:	2300      	movs	r3, #0
 80195ae:	f04f 32ff 	mov.w	r2, #4294967295
 80195b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195b6:	f10a 0a01 	add.w	sl, sl, #1
 80195ba:	9304      	str	r3, [sp, #16]
 80195bc:	9307      	str	r3, [sp, #28]
 80195be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80195c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80195c4:	4654      	mov	r4, sl
 80195c6:	2205      	movs	r2, #5
 80195c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195cc:	484e      	ldr	r0, [pc, #312]	@ (8019708 <_svfiprintf_r+0x1e4>)
 80195ce:	f7e6 fe8f 	bl	80002f0 <memchr>
 80195d2:	9a04      	ldr	r2, [sp, #16]
 80195d4:	b9d8      	cbnz	r0, 801960e <_svfiprintf_r+0xea>
 80195d6:	06d0      	lsls	r0, r2, #27
 80195d8:	bf44      	itt	mi
 80195da:	2320      	movmi	r3, #32
 80195dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195e0:	0711      	lsls	r1, r2, #28
 80195e2:	bf44      	itt	mi
 80195e4:	232b      	movmi	r3, #43	@ 0x2b
 80195e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195ea:	f89a 3000 	ldrb.w	r3, [sl]
 80195ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80195f0:	d015      	beq.n	801961e <_svfiprintf_r+0xfa>
 80195f2:	9a07      	ldr	r2, [sp, #28]
 80195f4:	4654      	mov	r4, sl
 80195f6:	2000      	movs	r0, #0
 80195f8:	f04f 0c0a 	mov.w	ip, #10
 80195fc:	4621      	mov	r1, r4
 80195fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019602:	3b30      	subs	r3, #48	@ 0x30
 8019604:	2b09      	cmp	r3, #9
 8019606:	d94b      	bls.n	80196a0 <_svfiprintf_r+0x17c>
 8019608:	b1b0      	cbz	r0, 8019638 <_svfiprintf_r+0x114>
 801960a:	9207      	str	r2, [sp, #28]
 801960c:	e014      	b.n	8019638 <_svfiprintf_r+0x114>
 801960e:	eba0 0308 	sub.w	r3, r0, r8
 8019612:	fa09 f303 	lsl.w	r3, r9, r3
 8019616:	4313      	orrs	r3, r2
 8019618:	9304      	str	r3, [sp, #16]
 801961a:	46a2      	mov	sl, r4
 801961c:	e7d2      	b.n	80195c4 <_svfiprintf_r+0xa0>
 801961e:	9b03      	ldr	r3, [sp, #12]
 8019620:	1d19      	adds	r1, r3, #4
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	9103      	str	r1, [sp, #12]
 8019626:	2b00      	cmp	r3, #0
 8019628:	bfbb      	ittet	lt
 801962a:	425b      	neglt	r3, r3
 801962c:	f042 0202 	orrlt.w	r2, r2, #2
 8019630:	9307      	strge	r3, [sp, #28]
 8019632:	9307      	strlt	r3, [sp, #28]
 8019634:	bfb8      	it	lt
 8019636:	9204      	strlt	r2, [sp, #16]
 8019638:	7823      	ldrb	r3, [r4, #0]
 801963a:	2b2e      	cmp	r3, #46	@ 0x2e
 801963c:	d10a      	bne.n	8019654 <_svfiprintf_r+0x130>
 801963e:	7863      	ldrb	r3, [r4, #1]
 8019640:	2b2a      	cmp	r3, #42	@ 0x2a
 8019642:	d132      	bne.n	80196aa <_svfiprintf_r+0x186>
 8019644:	9b03      	ldr	r3, [sp, #12]
 8019646:	1d1a      	adds	r2, r3, #4
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	9203      	str	r2, [sp, #12]
 801964c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019650:	3402      	adds	r4, #2
 8019652:	9305      	str	r3, [sp, #20]
 8019654:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019718 <_svfiprintf_r+0x1f4>
 8019658:	7821      	ldrb	r1, [r4, #0]
 801965a:	2203      	movs	r2, #3
 801965c:	4650      	mov	r0, sl
 801965e:	f7e6 fe47 	bl	80002f0 <memchr>
 8019662:	b138      	cbz	r0, 8019674 <_svfiprintf_r+0x150>
 8019664:	9b04      	ldr	r3, [sp, #16]
 8019666:	eba0 000a 	sub.w	r0, r0, sl
 801966a:	2240      	movs	r2, #64	@ 0x40
 801966c:	4082      	lsls	r2, r0
 801966e:	4313      	orrs	r3, r2
 8019670:	3401      	adds	r4, #1
 8019672:	9304      	str	r3, [sp, #16]
 8019674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019678:	4824      	ldr	r0, [pc, #144]	@ (801970c <_svfiprintf_r+0x1e8>)
 801967a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801967e:	2206      	movs	r2, #6
 8019680:	f7e6 fe36 	bl	80002f0 <memchr>
 8019684:	2800      	cmp	r0, #0
 8019686:	d036      	beq.n	80196f6 <_svfiprintf_r+0x1d2>
 8019688:	4b21      	ldr	r3, [pc, #132]	@ (8019710 <_svfiprintf_r+0x1ec>)
 801968a:	bb1b      	cbnz	r3, 80196d4 <_svfiprintf_r+0x1b0>
 801968c:	9b03      	ldr	r3, [sp, #12]
 801968e:	3307      	adds	r3, #7
 8019690:	f023 0307 	bic.w	r3, r3, #7
 8019694:	3308      	adds	r3, #8
 8019696:	9303      	str	r3, [sp, #12]
 8019698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801969a:	4433      	add	r3, r6
 801969c:	9309      	str	r3, [sp, #36]	@ 0x24
 801969e:	e76a      	b.n	8019576 <_svfiprintf_r+0x52>
 80196a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80196a4:	460c      	mov	r4, r1
 80196a6:	2001      	movs	r0, #1
 80196a8:	e7a8      	b.n	80195fc <_svfiprintf_r+0xd8>
 80196aa:	2300      	movs	r3, #0
 80196ac:	3401      	adds	r4, #1
 80196ae:	9305      	str	r3, [sp, #20]
 80196b0:	4619      	mov	r1, r3
 80196b2:	f04f 0c0a 	mov.w	ip, #10
 80196b6:	4620      	mov	r0, r4
 80196b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196bc:	3a30      	subs	r2, #48	@ 0x30
 80196be:	2a09      	cmp	r2, #9
 80196c0:	d903      	bls.n	80196ca <_svfiprintf_r+0x1a6>
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d0c6      	beq.n	8019654 <_svfiprintf_r+0x130>
 80196c6:	9105      	str	r1, [sp, #20]
 80196c8:	e7c4      	b.n	8019654 <_svfiprintf_r+0x130>
 80196ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80196ce:	4604      	mov	r4, r0
 80196d0:	2301      	movs	r3, #1
 80196d2:	e7f0      	b.n	80196b6 <_svfiprintf_r+0x192>
 80196d4:	ab03      	add	r3, sp, #12
 80196d6:	9300      	str	r3, [sp, #0]
 80196d8:	462a      	mov	r2, r5
 80196da:	4b0e      	ldr	r3, [pc, #56]	@ (8019714 <_svfiprintf_r+0x1f0>)
 80196dc:	a904      	add	r1, sp, #16
 80196de:	4638      	mov	r0, r7
 80196e0:	f3af 8000 	nop.w
 80196e4:	1c42      	adds	r2, r0, #1
 80196e6:	4606      	mov	r6, r0
 80196e8:	d1d6      	bne.n	8019698 <_svfiprintf_r+0x174>
 80196ea:	89ab      	ldrh	r3, [r5, #12]
 80196ec:	065b      	lsls	r3, r3, #25
 80196ee:	f53f af2d 	bmi.w	801954c <_svfiprintf_r+0x28>
 80196f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80196f4:	e72c      	b.n	8019550 <_svfiprintf_r+0x2c>
 80196f6:	ab03      	add	r3, sp, #12
 80196f8:	9300      	str	r3, [sp, #0]
 80196fa:	462a      	mov	r2, r5
 80196fc:	4b05      	ldr	r3, [pc, #20]	@ (8019714 <_svfiprintf_r+0x1f0>)
 80196fe:	a904      	add	r1, sp, #16
 8019700:	4638      	mov	r0, r7
 8019702:	f000 fb87 	bl	8019e14 <_printf_i>
 8019706:	e7ed      	b.n	80196e4 <_svfiprintf_r+0x1c0>
 8019708:	0801acf8 	.word	0x0801acf8
 801970c:	0801ad02 	.word	0x0801ad02
 8019710:	00000000 	.word	0x00000000
 8019714:	0801946d 	.word	0x0801946d
 8019718:	0801acfe 	.word	0x0801acfe

0801971c <_sungetc_r>:
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	1c4b      	adds	r3, r1, #1
 8019720:	4614      	mov	r4, r2
 8019722:	d103      	bne.n	801972c <_sungetc_r+0x10>
 8019724:	f04f 35ff 	mov.w	r5, #4294967295
 8019728:	4628      	mov	r0, r5
 801972a:	bd38      	pop	{r3, r4, r5, pc}
 801972c:	8993      	ldrh	r3, [r2, #12]
 801972e:	f023 0320 	bic.w	r3, r3, #32
 8019732:	8193      	strh	r3, [r2, #12]
 8019734:	6853      	ldr	r3, [r2, #4]
 8019736:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8019738:	b2cd      	uxtb	r5, r1
 801973a:	b18a      	cbz	r2, 8019760 <_sungetc_r+0x44>
 801973c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801973e:	429a      	cmp	r2, r3
 8019740:	dd08      	ble.n	8019754 <_sungetc_r+0x38>
 8019742:	6823      	ldr	r3, [r4, #0]
 8019744:	1e5a      	subs	r2, r3, #1
 8019746:	6022      	str	r2, [r4, #0]
 8019748:	f803 5c01 	strb.w	r5, [r3, #-1]
 801974c:	6863      	ldr	r3, [r4, #4]
 801974e:	3301      	adds	r3, #1
 8019750:	6063      	str	r3, [r4, #4]
 8019752:	e7e9      	b.n	8019728 <_sungetc_r+0xc>
 8019754:	4621      	mov	r1, r4
 8019756:	f000 fe78 	bl	801a44a <__submore>
 801975a:	2800      	cmp	r0, #0
 801975c:	d0f1      	beq.n	8019742 <_sungetc_r+0x26>
 801975e:	e7e1      	b.n	8019724 <_sungetc_r+0x8>
 8019760:	6921      	ldr	r1, [r4, #16]
 8019762:	6822      	ldr	r2, [r4, #0]
 8019764:	b141      	cbz	r1, 8019778 <_sungetc_r+0x5c>
 8019766:	4291      	cmp	r1, r2
 8019768:	d206      	bcs.n	8019778 <_sungetc_r+0x5c>
 801976a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801976e:	42a9      	cmp	r1, r5
 8019770:	d102      	bne.n	8019778 <_sungetc_r+0x5c>
 8019772:	3a01      	subs	r2, #1
 8019774:	6022      	str	r2, [r4, #0]
 8019776:	e7ea      	b.n	801974e <_sungetc_r+0x32>
 8019778:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801977c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019780:	6363      	str	r3, [r4, #52]	@ 0x34
 8019782:	2303      	movs	r3, #3
 8019784:	63a3      	str	r3, [r4, #56]	@ 0x38
 8019786:	4623      	mov	r3, r4
 8019788:	f803 5f46 	strb.w	r5, [r3, #70]!
 801978c:	6023      	str	r3, [r4, #0]
 801978e:	2301      	movs	r3, #1
 8019790:	e7de      	b.n	8019750 <_sungetc_r+0x34>

08019792 <__ssrefill_r>:
 8019792:	b510      	push	{r4, lr}
 8019794:	460c      	mov	r4, r1
 8019796:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8019798:	b169      	cbz	r1, 80197b6 <__ssrefill_r+0x24>
 801979a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801979e:	4299      	cmp	r1, r3
 80197a0:	d001      	beq.n	80197a6 <__ssrefill_r+0x14>
 80197a2:	f7fe fe11 	bl	80183c8 <_free_r>
 80197a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80197a8:	6063      	str	r3, [r4, #4]
 80197aa:	2000      	movs	r0, #0
 80197ac:	6360      	str	r0, [r4, #52]	@ 0x34
 80197ae:	b113      	cbz	r3, 80197b6 <__ssrefill_r+0x24>
 80197b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80197b2:	6023      	str	r3, [r4, #0]
 80197b4:	bd10      	pop	{r4, pc}
 80197b6:	6923      	ldr	r3, [r4, #16]
 80197b8:	6023      	str	r3, [r4, #0]
 80197ba:	2300      	movs	r3, #0
 80197bc:	6063      	str	r3, [r4, #4]
 80197be:	89a3      	ldrh	r3, [r4, #12]
 80197c0:	f043 0320 	orr.w	r3, r3, #32
 80197c4:	81a3      	strh	r3, [r4, #12]
 80197c6:	f04f 30ff 	mov.w	r0, #4294967295
 80197ca:	e7f3      	b.n	80197b4 <__ssrefill_r+0x22>

080197cc <__ssvfiscanf_r>:
 80197cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197d0:	460c      	mov	r4, r1
 80197d2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80197d6:	2100      	movs	r1, #0
 80197d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80197dc:	49a5      	ldr	r1, [pc, #660]	@ (8019a74 <__ssvfiscanf_r+0x2a8>)
 80197de:	91a0      	str	r1, [sp, #640]	@ 0x280
 80197e0:	f10d 0804 	add.w	r8, sp, #4
 80197e4:	49a4      	ldr	r1, [pc, #656]	@ (8019a78 <__ssvfiscanf_r+0x2ac>)
 80197e6:	4fa5      	ldr	r7, [pc, #660]	@ (8019a7c <__ssvfiscanf_r+0x2b0>)
 80197e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80197ec:	4606      	mov	r6, r0
 80197ee:	91a1      	str	r1, [sp, #644]	@ 0x284
 80197f0:	9300      	str	r3, [sp, #0]
 80197f2:	7813      	ldrb	r3, [r2, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	f000 8158 	beq.w	8019aaa <__ssvfiscanf_r+0x2de>
 80197fa:	5cf9      	ldrb	r1, [r7, r3]
 80197fc:	f011 0108 	ands.w	r1, r1, #8
 8019800:	f102 0501 	add.w	r5, r2, #1
 8019804:	d019      	beq.n	801983a <__ssvfiscanf_r+0x6e>
 8019806:	6863      	ldr	r3, [r4, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	dd0f      	ble.n	801982c <__ssvfiscanf_r+0x60>
 801980c:	6823      	ldr	r3, [r4, #0]
 801980e:	781a      	ldrb	r2, [r3, #0]
 8019810:	5cba      	ldrb	r2, [r7, r2]
 8019812:	0712      	lsls	r2, r2, #28
 8019814:	d401      	bmi.n	801981a <__ssvfiscanf_r+0x4e>
 8019816:	462a      	mov	r2, r5
 8019818:	e7eb      	b.n	80197f2 <__ssvfiscanf_r+0x26>
 801981a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801981c:	3201      	adds	r2, #1
 801981e:	9245      	str	r2, [sp, #276]	@ 0x114
 8019820:	6862      	ldr	r2, [r4, #4]
 8019822:	3301      	adds	r3, #1
 8019824:	3a01      	subs	r2, #1
 8019826:	6062      	str	r2, [r4, #4]
 8019828:	6023      	str	r3, [r4, #0]
 801982a:	e7ec      	b.n	8019806 <__ssvfiscanf_r+0x3a>
 801982c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801982e:	4621      	mov	r1, r4
 8019830:	4630      	mov	r0, r6
 8019832:	4798      	blx	r3
 8019834:	2800      	cmp	r0, #0
 8019836:	d0e9      	beq.n	801980c <__ssvfiscanf_r+0x40>
 8019838:	e7ed      	b.n	8019816 <__ssvfiscanf_r+0x4a>
 801983a:	2b25      	cmp	r3, #37	@ 0x25
 801983c:	d012      	beq.n	8019864 <__ssvfiscanf_r+0x98>
 801983e:	4699      	mov	r9, r3
 8019840:	6863      	ldr	r3, [r4, #4]
 8019842:	2b00      	cmp	r3, #0
 8019844:	f340 8093 	ble.w	801996e <__ssvfiscanf_r+0x1a2>
 8019848:	6822      	ldr	r2, [r4, #0]
 801984a:	7813      	ldrb	r3, [r2, #0]
 801984c:	454b      	cmp	r3, r9
 801984e:	f040 812c 	bne.w	8019aaa <__ssvfiscanf_r+0x2de>
 8019852:	6863      	ldr	r3, [r4, #4]
 8019854:	3b01      	subs	r3, #1
 8019856:	6063      	str	r3, [r4, #4]
 8019858:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801985a:	3201      	adds	r2, #1
 801985c:	3301      	adds	r3, #1
 801985e:	6022      	str	r2, [r4, #0]
 8019860:	9345      	str	r3, [sp, #276]	@ 0x114
 8019862:	e7d8      	b.n	8019816 <__ssvfiscanf_r+0x4a>
 8019864:	9141      	str	r1, [sp, #260]	@ 0x104
 8019866:	9143      	str	r1, [sp, #268]	@ 0x10c
 8019868:	7853      	ldrb	r3, [r2, #1]
 801986a:	2b2a      	cmp	r3, #42	@ 0x2a
 801986c:	bf02      	ittt	eq
 801986e:	2310      	moveq	r3, #16
 8019870:	1c95      	addeq	r5, r2, #2
 8019872:	9341      	streq	r3, [sp, #260]	@ 0x104
 8019874:	220a      	movs	r2, #10
 8019876:	46a9      	mov	r9, r5
 8019878:	f819 1b01 	ldrb.w	r1, [r9], #1
 801987c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8019880:	2b09      	cmp	r3, #9
 8019882:	d91e      	bls.n	80198c2 <__ssvfiscanf_r+0xf6>
 8019884:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8019a80 <__ssvfiscanf_r+0x2b4>
 8019888:	2203      	movs	r2, #3
 801988a:	4650      	mov	r0, sl
 801988c:	f7e6 fd30 	bl	80002f0 <memchr>
 8019890:	b138      	cbz	r0, 80198a2 <__ssvfiscanf_r+0xd6>
 8019892:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8019894:	eba0 000a 	sub.w	r0, r0, sl
 8019898:	2301      	movs	r3, #1
 801989a:	4083      	lsls	r3, r0
 801989c:	4313      	orrs	r3, r2
 801989e:	9341      	str	r3, [sp, #260]	@ 0x104
 80198a0:	464d      	mov	r5, r9
 80198a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80198a6:	2b78      	cmp	r3, #120	@ 0x78
 80198a8:	d806      	bhi.n	80198b8 <__ssvfiscanf_r+0xec>
 80198aa:	2b57      	cmp	r3, #87	@ 0x57
 80198ac:	d810      	bhi.n	80198d0 <__ssvfiscanf_r+0x104>
 80198ae:	2b25      	cmp	r3, #37	@ 0x25
 80198b0:	d0c5      	beq.n	801983e <__ssvfiscanf_r+0x72>
 80198b2:	d857      	bhi.n	8019964 <__ssvfiscanf_r+0x198>
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d065      	beq.n	8019984 <__ssvfiscanf_r+0x1b8>
 80198b8:	2303      	movs	r3, #3
 80198ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 80198bc:	230a      	movs	r3, #10
 80198be:	9342      	str	r3, [sp, #264]	@ 0x108
 80198c0:	e078      	b.n	80199b4 <__ssvfiscanf_r+0x1e8>
 80198c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80198c4:	fb02 1103 	mla	r1, r2, r3, r1
 80198c8:	3930      	subs	r1, #48	@ 0x30
 80198ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 80198cc:	464d      	mov	r5, r9
 80198ce:	e7d2      	b.n	8019876 <__ssvfiscanf_r+0xaa>
 80198d0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80198d4:	2a20      	cmp	r2, #32
 80198d6:	d8ef      	bhi.n	80198b8 <__ssvfiscanf_r+0xec>
 80198d8:	a101      	add	r1, pc, #4	@ (adr r1, 80198e0 <__ssvfiscanf_r+0x114>)
 80198da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80198de:	bf00      	nop
 80198e0:	08019993 	.word	0x08019993
 80198e4:	080198b9 	.word	0x080198b9
 80198e8:	080198b9 	.word	0x080198b9
 80198ec:	080199ed 	.word	0x080199ed
 80198f0:	080198b9 	.word	0x080198b9
 80198f4:	080198b9 	.word	0x080198b9
 80198f8:	080198b9 	.word	0x080198b9
 80198fc:	080198b9 	.word	0x080198b9
 8019900:	080198b9 	.word	0x080198b9
 8019904:	080198b9 	.word	0x080198b9
 8019908:	080198b9 	.word	0x080198b9
 801990c:	08019a03 	.word	0x08019a03
 8019910:	080199e9 	.word	0x080199e9
 8019914:	0801996b 	.word	0x0801996b
 8019918:	0801996b 	.word	0x0801996b
 801991c:	0801996b 	.word	0x0801996b
 8019920:	080198b9 	.word	0x080198b9
 8019924:	080199a5 	.word	0x080199a5
 8019928:	080198b9 	.word	0x080198b9
 801992c:	080198b9 	.word	0x080198b9
 8019930:	080198b9 	.word	0x080198b9
 8019934:	080198b9 	.word	0x080198b9
 8019938:	08019a13 	.word	0x08019a13
 801993c:	080199ad 	.word	0x080199ad
 8019940:	0801998b 	.word	0x0801998b
 8019944:	080198b9 	.word	0x080198b9
 8019948:	080198b9 	.word	0x080198b9
 801994c:	08019a0f 	.word	0x08019a0f
 8019950:	080198b9 	.word	0x080198b9
 8019954:	080199e9 	.word	0x080199e9
 8019958:	080198b9 	.word	0x080198b9
 801995c:	080198b9 	.word	0x080198b9
 8019960:	08019993 	.word	0x08019993
 8019964:	3b45      	subs	r3, #69	@ 0x45
 8019966:	2b02      	cmp	r3, #2
 8019968:	d8a6      	bhi.n	80198b8 <__ssvfiscanf_r+0xec>
 801996a:	2305      	movs	r3, #5
 801996c:	e021      	b.n	80199b2 <__ssvfiscanf_r+0x1e6>
 801996e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019970:	4621      	mov	r1, r4
 8019972:	4630      	mov	r0, r6
 8019974:	4798      	blx	r3
 8019976:	2800      	cmp	r0, #0
 8019978:	f43f af66 	beq.w	8019848 <__ssvfiscanf_r+0x7c>
 801997c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801997e:	2800      	cmp	r0, #0
 8019980:	f040 808b 	bne.w	8019a9a <__ssvfiscanf_r+0x2ce>
 8019984:	f04f 30ff 	mov.w	r0, #4294967295
 8019988:	e08b      	b.n	8019aa2 <__ssvfiscanf_r+0x2d6>
 801998a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801998c:	f042 0220 	orr.w	r2, r2, #32
 8019990:	9241      	str	r2, [sp, #260]	@ 0x104
 8019992:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8019994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8019998:	9241      	str	r2, [sp, #260]	@ 0x104
 801999a:	2210      	movs	r2, #16
 801999c:	2b6e      	cmp	r3, #110	@ 0x6e
 801999e:	9242      	str	r2, [sp, #264]	@ 0x108
 80199a0:	d902      	bls.n	80199a8 <__ssvfiscanf_r+0x1dc>
 80199a2:	e005      	b.n	80199b0 <__ssvfiscanf_r+0x1e4>
 80199a4:	2300      	movs	r3, #0
 80199a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80199a8:	2303      	movs	r3, #3
 80199aa:	e002      	b.n	80199b2 <__ssvfiscanf_r+0x1e6>
 80199ac:	2308      	movs	r3, #8
 80199ae:	9342      	str	r3, [sp, #264]	@ 0x108
 80199b0:	2304      	movs	r3, #4
 80199b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80199b4:	6863      	ldr	r3, [r4, #4]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	dd39      	ble.n	8019a2e <__ssvfiscanf_r+0x262>
 80199ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80199bc:	0659      	lsls	r1, r3, #25
 80199be:	d404      	bmi.n	80199ca <__ssvfiscanf_r+0x1fe>
 80199c0:	6823      	ldr	r3, [r4, #0]
 80199c2:	781a      	ldrb	r2, [r3, #0]
 80199c4:	5cba      	ldrb	r2, [r7, r2]
 80199c6:	0712      	lsls	r2, r2, #28
 80199c8:	d438      	bmi.n	8019a3c <__ssvfiscanf_r+0x270>
 80199ca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80199cc:	2b02      	cmp	r3, #2
 80199ce:	dc47      	bgt.n	8019a60 <__ssvfiscanf_r+0x294>
 80199d0:	466b      	mov	r3, sp
 80199d2:	4622      	mov	r2, r4
 80199d4:	a941      	add	r1, sp, #260	@ 0x104
 80199d6:	4630      	mov	r0, r6
 80199d8:	f000 fb3c 	bl	801a054 <_scanf_chars>
 80199dc:	2801      	cmp	r0, #1
 80199de:	d064      	beq.n	8019aaa <__ssvfiscanf_r+0x2de>
 80199e0:	2802      	cmp	r0, #2
 80199e2:	f47f af18 	bne.w	8019816 <__ssvfiscanf_r+0x4a>
 80199e6:	e7c9      	b.n	801997c <__ssvfiscanf_r+0x1b0>
 80199e8:	220a      	movs	r2, #10
 80199ea:	e7d7      	b.n	801999c <__ssvfiscanf_r+0x1d0>
 80199ec:	4629      	mov	r1, r5
 80199ee:	4640      	mov	r0, r8
 80199f0:	f000 fcf2 	bl	801a3d8 <__sccl>
 80199f4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80199f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199fa:	9341      	str	r3, [sp, #260]	@ 0x104
 80199fc:	4605      	mov	r5, r0
 80199fe:	2301      	movs	r3, #1
 8019a00:	e7d7      	b.n	80199b2 <__ssvfiscanf_r+0x1e6>
 8019a02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8019a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a08:	9341      	str	r3, [sp, #260]	@ 0x104
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	e7d1      	b.n	80199b2 <__ssvfiscanf_r+0x1e6>
 8019a0e:	2302      	movs	r3, #2
 8019a10:	e7cf      	b.n	80199b2 <__ssvfiscanf_r+0x1e6>
 8019a12:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8019a14:	06c3      	lsls	r3, r0, #27
 8019a16:	f53f aefe 	bmi.w	8019816 <__ssvfiscanf_r+0x4a>
 8019a1a:	9b00      	ldr	r3, [sp, #0]
 8019a1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8019a1e:	1d19      	adds	r1, r3, #4
 8019a20:	9100      	str	r1, [sp, #0]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	07c0      	lsls	r0, r0, #31
 8019a26:	bf4c      	ite	mi
 8019a28:	801a      	strhmi	r2, [r3, #0]
 8019a2a:	601a      	strpl	r2, [r3, #0]
 8019a2c:	e6f3      	b.n	8019816 <__ssvfiscanf_r+0x4a>
 8019a2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019a30:	4621      	mov	r1, r4
 8019a32:	4630      	mov	r0, r6
 8019a34:	4798      	blx	r3
 8019a36:	2800      	cmp	r0, #0
 8019a38:	d0bf      	beq.n	80199ba <__ssvfiscanf_r+0x1ee>
 8019a3a:	e79f      	b.n	801997c <__ssvfiscanf_r+0x1b0>
 8019a3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8019a3e:	3201      	adds	r2, #1
 8019a40:	9245      	str	r2, [sp, #276]	@ 0x114
 8019a42:	6862      	ldr	r2, [r4, #4]
 8019a44:	3a01      	subs	r2, #1
 8019a46:	2a00      	cmp	r2, #0
 8019a48:	6062      	str	r2, [r4, #4]
 8019a4a:	dd02      	ble.n	8019a52 <__ssvfiscanf_r+0x286>
 8019a4c:	3301      	adds	r3, #1
 8019a4e:	6023      	str	r3, [r4, #0]
 8019a50:	e7b6      	b.n	80199c0 <__ssvfiscanf_r+0x1f4>
 8019a52:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8019a54:	4621      	mov	r1, r4
 8019a56:	4630      	mov	r0, r6
 8019a58:	4798      	blx	r3
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	d0b0      	beq.n	80199c0 <__ssvfiscanf_r+0x1f4>
 8019a5e:	e78d      	b.n	801997c <__ssvfiscanf_r+0x1b0>
 8019a60:	2b04      	cmp	r3, #4
 8019a62:	dc0f      	bgt.n	8019a84 <__ssvfiscanf_r+0x2b8>
 8019a64:	466b      	mov	r3, sp
 8019a66:	4622      	mov	r2, r4
 8019a68:	a941      	add	r1, sp, #260	@ 0x104
 8019a6a:	4630      	mov	r0, r6
 8019a6c:	f000 fb4c 	bl	801a108 <_scanf_i>
 8019a70:	e7b4      	b.n	80199dc <__ssvfiscanf_r+0x210>
 8019a72:	bf00      	nop
 8019a74:	0801971d 	.word	0x0801971d
 8019a78:	08019793 	.word	0x08019793
 8019a7c:	0801a971 	.word	0x0801a971
 8019a80:	0801acfe 	.word	0x0801acfe
 8019a84:	4b0a      	ldr	r3, [pc, #40]	@ (8019ab0 <__ssvfiscanf_r+0x2e4>)
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	f43f aec5 	beq.w	8019816 <__ssvfiscanf_r+0x4a>
 8019a8c:	466b      	mov	r3, sp
 8019a8e:	4622      	mov	r2, r4
 8019a90:	a941      	add	r1, sp, #260	@ 0x104
 8019a92:	4630      	mov	r0, r6
 8019a94:	f7fd fdce 	bl	8017634 <_scanf_float>
 8019a98:	e7a0      	b.n	80199dc <__ssvfiscanf_r+0x210>
 8019a9a:	89a3      	ldrh	r3, [r4, #12]
 8019a9c:	065b      	lsls	r3, r3, #25
 8019a9e:	f53f af71 	bmi.w	8019984 <__ssvfiscanf_r+0x1b8>
 8019aa2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8019aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aaa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8019aac:	e7f9      	b.n	8019aa2 <__ssvfiscanf_r+0x2d6>
 8019aae:	bf00      	nop
 8019ab0:	08017635 	.word	0x08017635

08019ab4 <__sfputc_r>:
 8019ab4:	6893      	ldr	r3, [r2, #8]
 8019ab6:	3b01      	subs	r3, #1
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	b410      	push	{r4}
 8019abc:	6093      	str	r3, [r2, #8]
 8019abe:	da08      	bge.n	8019ad2 <__sfputc_r+0x1e>
 8019ac0:	6994      	ldr	r4, [r2, #24]
 8019ac2:	42a3      	cmp	r3, r4
 8019ac4:	db01      	blt.n	8019aca <__sfputc_r+0x16>
 8019ac6:	290a      	cmp	r1, #10
 8019ac8:	d103      	bne.n	8019ad2 <__sfputc_r+0x1e>
 8019aca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ace:	f7fe ba3e 	b.w	8017f4e <__swbuf_r>
 8019ad2:	6813      	ldr	r3, [r2, #0]
 8019ad4:	1c58      	adds	r0, r3, #1
 8019ad6:	6010      	str	r0, [r2, #0]
 8019ad8:	7019      	strb	r1, [r3, #0]
 8019ada:	4608      	mov	r0, r1
 8019adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ae0:	4770      	bx	lr

08019ae2 <__sfputs_r>:
 8019ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ae4:	4606      	mov	r6, r0
 8019ae6:	460f      	mov	r7, r1
 8019ae8:	4614      	mov	r4, r2
 8019aea:	18d5      	adds	r5, r2, r3
 8019aec:	42ac      	cmp	r4, r5
 8019aee:	d101      	bne.n	8019af4 <__sfputs_r+0x12>
 8019af0:	2000      	movs	r0, #0
 8019af2:	e007      	b.n	8019b04 <__sfputs_r+0x22>
 8019af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019af8:	463a      	mov	r2, r7
 8019afa:	4630      	mov	r0, r6
 8019afc:	f7ff ffda 	bl	8019ab4 <__sfputc_r>
 8019b00:	1c43      	adds	r3, r0, #1
 8019b02:	d1f3      	bne.n	8019aec <__sfputs_r+0xa>
 8019b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019b08 <_vfiprintf_r>:
 8019b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0c:	460d      	mov	r5, r1
 8019b0e:	b09d      	sub	sp, #116	@ 0x74
 8019b10:	4614      	mov	r4, r2
 8019b12:	4698      	mov	r8, r3
 8019b14:	4606      	mov	r6, r0
 8019b16:	b118      	cbz	r0, 8019b20 <_vfiprintf_r+0x18>
 8019b18:	6a03      	ldr	r3, [r0, #32]
 8019b1a:	b90b      	cbnz	r3, 8019b20 <_vfiprintf_r+0x18>
 8019b1c:	f7fe f8e2 	bl	8017ce4 <__sinit>
 8019b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019b22:	07d9      	lsls	r1, r3, #31
 8019b24:	d405      	bmi.n	8019b32 <_vfiprintf_r+0x2a>
 8019b26:	89ab      	ldrh	r3, [r5, #12]
 8019b28:	059a      	lsls	r2, r3, #22
 8019b2a:	d402      	bmi.n	8019b32 <_vfiprintf_r+0x2a>
 8019b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019b2e:	f7fe fc0c 	bl	801834a <__retarget_lock_acquire_recursive>
 8019b32:	89ab      	ldrh	r3, [r5, #12]
 8019b34:	071b      	lsls	r3, r3, #28
 8019b36:	d501      	bpl.n	8019b3c <_vfiprintf_r+0x34>
 8019b38:	692b      	ldr	r3, [r5, #16]
 8019b3a:	b99b      	cbnz	r3, 8019b64 <_vfiprintf_r+0x5c>
 8019b3c:	4629      	mov	r1, r5
 8019b3e:	4630      	mov	r0, r6
 8019b40:	f7fe fa44 	bl	8017fcc <__swsetup_r>
 8019b44:	b170      	cbz	r0, 8019b64 <_vfiprintf_r+0x5c>
 8019b46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019b48:	07dc      	lsls	r4, r3, #31
 8019b4a:	d504      	bpl.n	8019b56 <_vfiprintf_r+0x4e>
 8019b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8019b50:	b01d      	add	sp, #116	@ 0x74
 8019b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b56:	89ab      	ldrh	r3, [r5, #12]
 8019b58:	0598      	lsls	r0, r3, #22
 8019b5a:	d4f7      	bmi.n	8019b4c <_vfiprintf_r+0x44>
 8019b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019b5e:	f7fe fbf5 	bl	801834c <__retarget_lock_release_recursive>
 8019b62:	e7f3      	b.n	8019b4c <_vfiprintf_r+0x44>
 8019b64:	2300      	movs	r3, #0
 8019b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b68:	2320      	movs	r3, #32
 8019b6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b72:	2330      	movs	r3, #48	@ 0x30
 8019b74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019d24 <_vfiprintf_r+0x21c>
 8019b78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019b7c:	f04f 0901 	mov.w	r9, #1
 8019b80:	4623      	mov	r3, r4
 8019b82:	469a      	mov	sl, r3
 8019b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b88:	b10a      	cbz	r2, 8019b8e <_vfiprintf_r+0x86>
 8019b8a:	2a25      	cmp	r2, #37	@ 0x25
 8019b8c:	d1f9      	bne.n	8019b82 <_vfiprintf_r+0x7a>
 8019b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8019b92:	d00b      	beq.n	8019bac <_vfiprintf_r+0xa4>
 8019b94:	465b      	mov	r3, fp
 8019b96:	4622      	mov	r2, r4
 8019b98:	4629      	mov	r1, r5
 8019b9a:	4630      	mov	r0, r6
 8019b9c:	f7ff ffa1 	bl	8019ae2 <__sfputs_r>
 8019ba0:	3001      	adds	r0, #1
 8019ba2:	f000 80a7 	beq.w	8019cf4 <_vfiprintf_r+0x1ec>
 8019ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ba8:	445a      	add	r2, fp
 8019baa:	9209      	str	r2, [sp, #36]	@ 0x24
 8019bac:	f89a 3000 	ldrb.w	r3, [sl]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	f000 809f 	beq.w	8019cf4 <_vfiprintf_r+0x1ec>
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8019bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019bc0:	f10a 0a01 	add.w	sl, sl, #1
 8019bc4:	9304      	str	r3, [sp, #16]
 8019bc6:	9307      	str	r3, [sp, #28]
 8019bc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019bcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8019bce:	4654      	mov	r4, sl
 8019bd0:	2205      	movs	r2, #5
 8019bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bd6:	4853      	ldr	r0, [pc, #332]	@ (8019d24 <_vfiprintf_r+0x21c>)
 8019bd8:	f7e6 fb8a 	bl	80002f0 <memchr>
 8019bdc:	9a04      	ldr	r2, [sp, #16]
 8019bde:	b9d8      	cbnz	r0, 8019c18 <_vfiprintf_r+0x110>
 8019be0:	06d1      	lsls	r1, r2, #27
 8019be2:	bf44      	itt	mi
 8019be4:	2320      	movmi	r3, #32
 8019be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019bea:	0713      	lsls	r3, r2, #28
 8019bec:	bf44      	itt	mi
 8019bee:	232b      	movmi	r3, #43	@ 0x2b
 8019bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8019bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8019bfa:	d015      	beq.n	8019c28 <_vfiprintf_r+0x120>
 8019bfc:	9a07      	ldr	r2, [sp, #28]
 8019bfe:	4654      	mov	r4, sl
 8019c00:	2000      	movs	r0, #0
 8019c02:	f04f 0c0a 	mov.w	ip, #10
 8019c06:	4621      	mov	r1, r4
 8019c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c0c:	3b30      	subs	r3, #48	@ 0x30
 8019c0e:	2b09      	cmp	r3, #9
 8019c10:	d94b      	bls.n	8019caa <_vfiprintf_r+0x1a2>
 8019c12:	b1b0      	cbz	r0, 8019c42 <_vfiprintf_r+0x13a>
 8019c14:	9207      	str	r2, [sp, #28]
 8019c16:	e014      	b.n	8019c42 <_vfiprintf_r+0x13a>
 8019c18:	eba0 0308 	sub.w	r3, r0, r8
 8019c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8019c20:	4313      	orrs	r3, r2
 8019c22:	9304      	str	r3, [sp, #16]
 8019c24:	46a2      	mov	sl, r4
 8019c26:	e7d2      	b.n	8019bce <_vfiprintf_r+0xc6>
 8019c28:	9b03      	ldr	r3, [sp, #12]
 8019c2a:	1d19      	adds	r1, r3, #4
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	9103      	str	r1, [sp, #12]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	bfbb      	ittet	lt
 8019c34:	425b      	neglt	r3, r3
 8019c36:	f042 0202 	orrlt.w	r2, r2, #2
 8019c3a:	9307      	strge	r3, [sp, #28]
 8019c3c:	9307      	strlt	r3, [sp, #28]
 8019c3e:	bfb8      	it	lt
 8019c40:	9204      	strlt	r2, [sp, #16]
 8019c42:	7823      	ldrb	r3, [r4, #0]
 8019c44:	2b2e      	cmp	r3, #46	@ 0x2e
 8019c46:	d10a      	bne.n	8019c5e <_vfiprintf_r+0x156>
 8019c48:	7863      	ldrb	r3, [r4, #1]
 8019c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019c4c:	d132      	bne.n	8019cb4 <_vfiprintf_r+0x1ac>
 8019c4e:	9b03      	ldr	r3, [sp, #12]
 8019c50:	1d1a      	adds	r2, r3, #4
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	9203      	str	r2, [sp, #12]
 8019c56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019c5a:	3402      	adds	r4, #2
 8019c5c:	9305      	str	r3, [sp, #20]
 8019c5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019d34 <_vfiprintf_r+0x22c>
 8019c62:	7821      	ldrb	r1, [r4, #0]
 8019c64:	2203      	movs	r2, #3
 8019c66:	4650      	mov	r0, sl
 8019c68:	f7e6 fb42 	bl	80002f0 <memchr>
 8019c6c:	b138      	cbz	r0, 8019c7e <_vfiprintf_r+0x176>
 8019c6e:	9b04      	ldr	r3, [sp, #16]
 8019c70:	eba0 000a 	sub.w	r0, r0, sl
 8019c74:	2240      	movs	r2, #64	@ 0x40
 8019c76:	4082      	lsls	r2, r0
 8019c78:	4313      	orrs	r3, r2
 8019c7a:	3401      	adds	r4, #1
 8019c7c:	9304      	str	r3, [sp, #16]
 8019c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c82:	4829      	ldr	r0, [pc, #164]	@ (8019d28 <_vfiprintf_r+0x220>)
 8019c84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019c88:	2206      	movs	r2, #6
 8019c8a:	f7e6 fb31 	bl	80002f0 <memchr>
 8019c8e:	2800      	cmp	r0, #0
 8019c90:	d03f      	beq.n	8019d12 <_vfiprintf_r+0x20a>
 8019c92:	4b26      	ldr	r3, [pc, #152]	@ (8019d2c <_vfiprintf_r+0x224>)
 8019c94:	bb1b      	cbnz	r3, 8019cde <_vfiprintf_r+0x1d6>
 8019c96:	9b03      	ldr	r3, [sp, #12]
 8019c98:	3307      	adds	r3, #7
 8019c9a:	f023 0307 	bic.w	r3, r3, #7
 8019c9e:	3308      	adds	r3, #8
 8019ca0:	9303      	str	r3, [sp, #12]
 8019ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ca4:	443b      	add	r3, r7
 8019ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ca8:	e76a      	b.n	8019b80 <_vfiprintf_r+0x78>
 8019caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8019cae:	460c      	mov	r4, r1
 8019cb0:	2001      	movs	r0, #1
 8019cb2:	e7a8      	b.n	8019c06 <_vfiprintf_r+0xfe>
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	3401      	adds	r4, #1
 8019cb8:	9305      	str	r3, [sp, #20]
 8019cba:	4619      	mov	r1, r3
 8019cbc:	f04f 0c0a 	mov.w	ip, #10
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019cc6:	3a30      	subs	r2, #48	@ 0x30
 8019cc8:	2a09      	cmp	r2, #9
 8019cca:	d903      	bls.n	8019cd4 <_vfiprintf_r+0x1cc>
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d0c6      	beq.n	8019c5e <_vfiprintf_r+0x156>
 8019cd0:	9105      	str	r1, [sp, #20]
 8019cd2:	e7c4      	b.n	8019c5e <_vfiprintf_r+0x156>
 8019cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cd8:	4604      	mov	r4, r0
 8019cda:	2301      	movs	r3, #1
 8019cdc:	e7f0      	b.n	8019cc0 <_vfiprintf_r+0x1b8>
 8019cde:	ab03      	add	r3, sp, #12
 8019ce0:	9300      	str	r3, [sp, #0]
 8019ce2:	462a      	mov	r2, r5
 8019ce4:	4b12      	ldr	r3, [pc, #72]	@ (8019d30 <_vfiprintf_r+0x228>)
 8019ce6:	a904      	add	r1, sp, #16
 8019ce8:	4630      	mov	r0, r6
 8019cea:	f3af 8000 	nop.w
 8019cee:	4607      	mov	r7, r0
 8019cf0:	1c78      	adds	r0, r7, #1
 8019cf2:	d1d6      	bne.n	8019ca2 <_vfiprintf_r+0x19a>
 8019cf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019cf6:	07d9      	lsls	r1, r3, #31
 8019cf8:	d405      	bmi.n	8019d06 <_vfiprintf_r+0x1fe>
 8019cfa:	89ab      	ldrh	r3, [r5, #12]
 8019cfc:	059a      	lsls	r2, r3, #22
 8019cfe:	d402      	bmi.n	8019d06 <_vfiprintf_r+0x1fe>
 8019d00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019d02:	f7fe fb23 	bl	801834c <__retarget_lock_release_recursive>
 8019d06:	89ab      	ldrh	r3, [r5, #12]
 8019d08:	065b      	lsls	r3, r3, #25
 8019d0a:	f53f af1f 	bmi.w	8019b4c <_vfiprintf_r+0x44>
 8019d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d10:	e71e      	b.n	8019b50 <_vfiprintf_r+0x48>
 8019d12:	ab03      	add	r3, sp, #12
 8019d14:	9300      	str	r3, [sp, #0]
 8019d16:	462a      	mov	r2, r5
 8019d18:	4b05      	ldr	r3, [pc, #20]	@ (8019d30 <_vfiprintf_r+0x228>)
 8019d1a:	a904      	add	r1, sp, #16
 8019d1c:	4630      	mov	r0, r6
 8019d1e:	f000 f879 	bl	8019e14 <_printf_i>
 8019d22:	e7e4      	b.n	8019cee <_vfiprintf_r+0x1e6>
 8019d24:	0801acf8 	.word	0x0801acf8
 8019d28:	0801ad02 	.word	0x0801ad02
 8019d2c:	00000000 	.word	0x00000000
 8019d30:	08019ae3 	.word	0x08019ae3
 8019d34:	0801acfe 	.word	0x0801acfe

08019d38 <_printf_common>:
 8019d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d3c:	4616      	mov	r6, r2
 8019d3e:	4698      	mov	r8, r3
 8019d40:	688a      	ldr	r2, [r1, #8]
 8019d42:	690b      	ldr	r3, [r1, #16]
 8019d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	bfb8      	it	lt
 8019d4c:	4613      	movlt	r3, r2
 8019d4e:	6033      	str	r3, [r6, #0]
 8019d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019d54:	4607      	mov	r7, r0
 8019d56:	460c      	mov	r4, r1
 8019d58:	b10a      	cbz	r2, 8019d5e <_printf_common+0x26>
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	6033      	str	r3, [r6, #0]
 8019d5e:	6823      	ldr	r3, [r4, #0]
 8019d60:	0699      	lsls	r1, r3, #26
 8019d62:	bf42      	ittt	mi
 8019d64:	6833      	ldrmi	r3, [r6, #0]
 8019d66:	3302      	addmi	r3, #2
 8019d68:	6033      	strmi	r3, [r6, #0]
 8019d6a:	6825      	ldr	r5, [r4, #0]
 8019d6c:	f015 0506 	ands.w	r5, r5, #6
 8019d70:	d106      	bne.n	8019d80 <_printf_common+0x48>
 8019d72:	f104 0a19 	add.w	sl, r4, #25
 8019d76:	68e3      	ldr	r3, [r4, #12]
 8019d78:	6832      	ldr	r2, [r6, #0]
 8019d7a:	1a9b      	subs	r3, r3, r2
 8019d7c:	42ab      	cmp	r3, r5
 8019d7e:	dc26      	bgt.n	8019dce <_printf_common+0x96>
 8019d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019d84:	6822      	ldr	r2, [r4, #0]
 8019d86:	3b00      	subs	r3, #0
 8019d88:	bf18      	it	ne
 8019d8a:	2301      	movne	r3, #1
 8019d8c:	0692      	lsls	r2, r2, #26
 8019d8e:	d42b      	bmi.n	8019de8 <_printf_common+0xb0>
 8019d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019d94:	4641      	mov	r1, r8
 8019d96:	4638      	mov	r0, r7
 8019d98:	47c8      	blx	r9
 8019d9a:	3001      	adds	r0, #1
 8019d9c:	d01e      	beq.n	8019ddc <_printf_common+0xa4>
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	6922      	ldr	r2, [r4, #16]
 8019da2:	f003 0306 	and.w	r3, r3, #6
 8019da6:	2b04      	cmp	r3, #4
 8019da8:	bf02      	ittt	eq
 8019daa:	68e5      	ldreq	r5, [r4, #12]
 8019dac:	6833      	ldreq	r3, [r6, #0]
 8019dae:	1aed      	subeq	r5, r5, r3
 8019db0:	68a3      	ldr	r3, [r4, #8]
 8019db2:	bf0c      	ite	eq
 8019db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019db8:	2500      	movne	r5, #0
 8019dba:	4293      	cmp	r3, r2
 8019dbc:	bfc4      	itt	gt
 8019dbe:	1a9b      	subgt	r3, r3, r2
 8019dc0:	18ed      	addgt	r5, r5, r3
 8019dc2:	2600      	movs	r6, #0
 8019dc4:	341a      	adds	r4, #26
 8019dc6:	42b5      	cmp	r5, r6
 8019dc8:	d11a      	bne.n	8019e00 <_printf_common+0xc8>
 8019dca:	2000      	movs	r0, #0
 8019dcc:	e008      	b.n	8019de0 <_printf_common+0xa8>
 8019dce:	2301      	movs	r3, #1
 8019dd0:	4652      	mov	r2, sl
 8019dd2:	4641      	mov	r1, r8
 8019dd4:	4638      	mov	r0, r7
 8019dd6:	47c8      	blx	r9
 8019dd8:	3001      	adds	r0, #1
 8019dda:	d103      	bne.n	8019de4 <_printf_common+0xac>
 8019ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8019de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019de4:	3501      	adds	r5, #1
 8019de6:	e7c6      	b.n	8019d76 <_printf_common+0x3e>
 8019de8:	18e1      	adds	r1, r4, r3
 8019dea:	1c5a      	adds	r2, r3, #1
 8019dec:	2030      	movs	r0, #48	@ 0x30
 8019dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019df2:	4422      	add	r2, r4
 8019df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019dfc:	3302      	adds	r3, #2
 8019dfe:	e7c7      	b.n	8019d90 <_printf_common+0x58>
 8019e00:	2301      	movs	r3, #1
 8019e02:	4622      	mov	r2, r4
 8019e04:	4641      	mov	r1, r8
 8019e06:	4638      	mov	r0, r7
 8019e08:	47c8      	blx	r9
 8019e0a:	3001      	adds	r0, #1
 8019e0c:	d0e6      	beq.n	8019ddc <_printf_common+0xa4>
 8019e0e:	3601      	adds	r6, #1
 8019e10:	e7d9      	b.n	8019dc6 <_printf_common+0x8e>
	...

08019e14 <_printf_i>:
 8019e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e18:	7e0f      	ldrb	r7, [r1, #24]
 8019e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019e1c:	2f78      	cmp	r7, #120	@ 0x78
 8019e1e:	4691      	mov	r9, r2
 8019e20:	4680      	mov	r8, r0
 8019e22:	460c      	mov	r4, r1
 8019e24:	469a      	mov	sl, r3
 8019e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019e2a:	d807      	bhi.n	8019e3c <_printf_i+0x28>
 8019e2c:	2f62      	cmp	r7, #98	@ 0x62
 8019e2e:	d80a      	bhi.n	8019e46 <_printf_i+0x32>
 8019e30:	2f00      	cmp	r7, #0
 8019e32:	f000 80d2 	beq.w	8019fda <_printf_i+0x1c6>
 8019e36:	2f58      	cmp	r7, #88	@ 0x58
 8019e38:	f000 80b9 	beq.w	8019fae <_printf_i+0x19a>
 8019e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019e44:	e03a      	b.n	8019ebc <_printf_i+0xa8>
 8019e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019e4a:	2b15      	cmp	r3, #21
 8019e4c:	d8f6      	bhi.n	8019e3c <_printf_i+0x28>
 8019e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8019e54 <_printf_i+0x40>)
 8019e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e54:	08019ead 	.word	0x08019ead
 8019e58:	08019ec1 	.word	0x08019ec1
 8019e5c:	08019e3d 	.word	0x08019e3d
 8019e60:	08019e3d 	.word	0x08019e3d
 8019e64:	08019e3d 	.word	0x08019e3d
 8019e68:	08019e3d 	.word	0x08019e3d
 8019e6c:	08019ec1 	.word	0x08019ec1
 8019e70:	08019e3d 	.word	0x08019e3d
 8019e74:	08019e3d 	.word	0x08019e3d
 8019e78:	08019e3d 	.word	0x08019e3d
 8019e7c:	08019e3d 	.word	0x08019e3d
 8019e80:	08019fc1 	.word	0x08019fc1
 8019e84:	08019eeb 	.word	0x08019eeb
 8019e88:	08019f7b 	.word	0x08019f7b
 8019e8c:	08019e3d 	.word	0x08019e3d
 8019e90:	08019e3d 	.word	0x08019e3d
 8019e94:	08019fe3 	.word	0x08019fe3
 8019e98:	08019e3d 	.word	0x08019e3d
 8019e9c:	08019eeb 	.word	0x08019eeb
 8019ea0:	08019e3d 	.word	0x08019e3d
 8019ea4:	08019e3d 	.word	0x08019e3d
 8019ea8:	08019f83 	.word	0x08019f83
 8019eac:	6833      	ldr	r3, [r6, #0]
 8019eae:	1d1a      	adds	r2, r3, #4
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	6032      	str	r2, [r6, #0]
 8019eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019ebc:	2301      	movs	r3, #1
 8019ebe:	e09d      	b.n	8019ffc <_printf_i+0x1e8>
 8019ec0:	6833      	ldr	r3, [r6, #0]
 8019ec2:	6820      	ldr	r0, [r4, #0]
 8019ec4:	1d19      	adds	r1, r3, #4
 8019ec6:	6031      	str	r1, [r6, #0]
 8019ec8:	0606      	lsls	r6, r0, #24
 8019eca:	d501      	bpl.n	8019ed0 <_printf_i+0xbc>
 8019ecc:	681d      	ldr	r5, [r3, #0]
 8019ece:	e003      	b.n	8019ed8 <_printf_i+0xc4>
 8019ed0:	0645      	lsls	r5, r0, #25
 8019ed2:	d5fb      	bpl.n	8019ecc <_printf_i+0xb8>
 8019ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019ed8:	2d00      	cmp	r5, #0
 8019eda:	da03      	bge.n	8019ee4 <_printf_i+0xd0>
 8019edc:	232d      	movs	r3, #45	@ 0x2d
 8019ede:	426d      	negs	r5, r5
 8019ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ee4:	4859      	ldr	r0, [pc, #356]	@ (801a04c <_printf_i+0x238>)
 8019ee6:	230a      	movs	r3, #10
 8019ee8:	e011      	b.n	8019f0e <_printf_i+0xfa>
 8019eea:	6821      	ldr	r1, [r4, #0]
 8019eec:	6833      	ldr	r3, [r6, #0]
 8019eee:	0608      	lsls	r0, r1, #24
 8019ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ef4:	d402      	bmi.n	8019efc <_printf_i+0xe8>
 8019ef6:	0649      	lsls	r1, r1, #25
 8019ef8:	bf48      	it	mi
 8019efa:	b2ad      	uxthmi	r5, r5
 8019efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8019efe:	4853      	ldr	r0, [pc, #332]	@ (801a04c <_printf_i+0x238>)
 8019f00:	6033      	str	r3, [r6, #0]
 8019f02:	bf14      	ite	ne
 8019f04:	230a      	movne	r3, #10
 8019f06:	2308      	moveq	r3, #8
 8019f08:	2100      	movs	r1, #0
 8019f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019f0e:	6866      	ldr	r6, [r4, #4]
 8019f10:	60a6      	str	r6, [r4, #8]
 8019f12:	2e00      	cmp	r6, #0
 8019f14:	bfa2      	ittt	ge
 8019f16:	6821      	ldrge	r1, [r4, #0]
 8019f18:	f021 0104 	bicge.w	r1, r1, #4
 8019f1c:	6021      	strge	r1, [r4, #0]
 8019f1e:	b90d      	cbnz	r5, 8019f24 <_printf_i+0x110>
 8019f20:	2e00      	cmp	r6, #0
 8019f22:	d04b      	beq.n	8019fbc <_printf_i+0x1a8>
 8019f24:	4616      	mov	r6, r2
 8019f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8019f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8019f2e:	5dc7      	ldrb	r7, [r0, r7]
 8019f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019f34:	462f      	mov	r7, r5
 8019f36:	42bb      	cmp	r3, r7
 8019f38:	460d      	mov	r5, r1
 8019f3a:	d9f4      	bls.n	8019f26 <_printf_i+0x112>
 8019f3c:	2b08      	cmp	r3, #8
 8019f3e:	d10b      	bne.n	8019f58 <_printf_i+0x144>
 8019f40:	6823      	ldr	r3, [r4, #0]
 8019f42:	07df      	lsls	r7, r3, #31
 8019f44:	d508      	bpl.n	8019f58 <_printf_i+0x144>
 8019f46:	6923      	ldr	r3, [r4, #16]
 8019f48:	6861      	ldr	r1, [r4, #4]
 8019f4a:	4299      	cmp	r1, r3
 8019f4c:	bfde      	ittt	le
 8019f4e:	2330      	movle	r3, #48	@ 0x30
 8019f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019f54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019f58:	1b92      	subs	r2, r2, r6
 8019f5a:	6122      	str	r2, [r4, #16]
 8019f5c:	f8cd a000 	str.w	sl, [sp]
 8019f60:	464b      	mov	r3, r9
 8019f62:	aa03      	add	r2, sp, #12
 8019f64:	4621      	mov	r1, r4
 8019f66:	4640      	mov	r0, r8
 8019f68:	f7ff fee6 	bl	8019d38 <_printf_common>
 8019f6c:	3001      	adds	r0, #1
 8019f6e:	d14a      	bne.n	801a006 <_printf_i+0x1f2>
 8019f70:	f04f 30ff 	mov.w	r0, #4294967295
 8019f74:	b004      	add	sp, #16
 8019f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f7a:	6823      	ldr	r3, [r4, #0]
 8019f7c:	f043 0320 	orr.w	r3, r3, #32
 8019f80:	6023      	str	r3, [r4, #0]
 8019f82:	4833      	ldr	r0, [pc, #204]	@ (801a050 <_printf_i+0x23c>)
 8019f84:	2778      	movs	r7, #120	@ 0x78
 8019f86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019f8a:	6823      	ldr	r3, [r4, #0]
 8019f8c:	6831      	ldr	r1, [r6, #0]
 8019f8e:	061f      	lsls	r7, r3, #24
 8019f90:	f851 5b04 	ldr.w	r5, [r1], #4
 8019f94:	d402      	bmi.n	8019f9c <_printf_i+0x188>
 8019f96:	065f      	lsls	r7, r3, #25
 8019f98:	bf48      	it	mi
 8019f9a:	b2ad      	uxthmi	r5, r5
 8019f9c:	6031      	str	r1, [r6, #0]
 8019f9e:	07d9      	lsls	r1, r3, #31
 8019fa0:	bf44      	itt	mi
 8019fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8019fa6:	6023      	strmi	r3, [r4, #0]
 8019fa8:	b11d      	cbz	r5, 8019fb2 <_printf_i+0x19e>
 8019faa:	2310      	movs	r3, #16
 8019fac:	e7ac      	b.n	8019f08 <_printf_i+0xf4>
 8019fae:	4827      	ldr	r0, [pc, #156]	@ (801a04c <_printf_i+0x238>)
 8019fb0:	e7e9      	b.n	8019f86 <_printf_i+0x172>
 8019fb2:	6823      	ldr	r3, [r4, #0]
 8019fb4:	f023 0320 	bic.w	r3, r3, #32
 8019fb8:	6023      	str	r3, [r4, #0]
 8019fba:	e7f6      	b.n	8019faa <_printf_i+0x196>
 8019fbc:	4616      	mov	r6, r2
 8019fbe:	e7bd      	b.n	8019f3c <_printf_i+0x128>
 8019fc0:	6833      	ldr	r3, [r6, #0]
 8019fc2:	6825      	ldr	r5, [r4, #0]
 8019fc4:	6961      	ldr	r1, [r4, #20]
 8019fc6:	1d18      	adds	r0, r3, #4
 8019fc8:	6030      	str	r0, [r6, #0]
 8019fca:	062e      	lsls	r6, r5, #24
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	d501      	bpl.n	8019fd4 <_printf_i+0x1c0>
 8019fd0:	6019      	str	r1, [r3, #0]
 8019fd2:	e002      	b.n	8019fda <_printf_i+0x1c6>
 8019fd4:	0668      	lsls	r0, r5, #25
 8019fd6:	d5fb      	bpl.n	8019fd0 <_printf_i+0x1bc>
 8019fd8:	8019      	strh	r1, [r3, #0]
 8019fda:	2300      	movs	r3, #0
 8019fdc:	6123      	str	r3, [r4, #16]
 8019fde:	4616      	mov	r6, r2
 8019fe0:	e7bc      	b.n	8019f5c <_printf_i+0x148>
 8019fe2:	6833      	ldr	r3, [r6, #0]
 8019fe4:	1d1a      	adds	r2, r3, #4
 8019fe6:	6032      	str	r2, [r6, #0]
 8019fe8:	681e      	ldr	r6, [r3, #0]
 8019fea:	6862      	ldr	r2, [r4, #4]
 8019fec:	2100      	movs	r1, #0
 8019fee:	4630      	mov	r0, r6
 8019ff0:	f7e6 f97e 	bl	80002f0 <memchr>
 8019ff4:	b108      	cbz	r0, 8019ffa <_printf_i+0x1e6>
 8019ff6:	1b80      	subs	r0, r0, r6
 8019ff8:	6060      	str	r0, [r4, #4]
 8019ffa:	6863      	ldr	r3, [r4, #4]
 8019ffc:	6123      	str	r3, [r4, #16]
 8019ffe:	2300      	movs	r3, #0
 801a000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a004:	e7aa      	b.n	8019f5c <_printf_i+0x148>
 801a006:	6923      	ldr	r3, [r4, #16]
 801a008:	4632      	mov	r2, r6
 801a00a:	4649      	mov	r1, r9
 801a00c:	4640      	mov	r0, r8
 801a00e:	47d0      	blx	sl
 801a010:	3001      	adds	r0, #1
 801a012:	d0ad      	beq.n	8019f70 <_printf_i+0x15c>
 801a014:	6823      	ldr	r3, [r4, #0]
 801a016:	079b      	lsls	r3, r3, #30
 801a018:	d413      	bmi.n	801a042 <_printf_i+0x22e>
 801a01a:	68e0      	ldr	r0, [r4, #12]
 801a01c:	9b03      	ldr	r3, [sp, #12]
 801a01e:	4298      	cmp	r0, r3
 801a020:	bfb8      	it	lt
 801a022:	4618      	movlt	r0, r3
 801a024:	e7a6      	b.n	8019f74 <_printf_i+0x160>
 801a026:	2301      	movs	r3, #1
 801a028:	4632      	mov	r2, r6
 801a02a:	4649      	mov	r1, r9
 801a02c:	4640      	mov	r0, r8
 801a02e:	47d0      	blx	sl
 801a030:	3001      	adds	r0, #1
 801a032:	d09d      	beq.n	8019f70 <_printf_i+0x15c>
 801a034:	3501      	adds	r5, #1
 801a036:	68e3      	ldr	r3, [r4, #12]
 801a038:	9903      	ldr	r1, [sp, #12]
 801a03a:	1a5b      	subs	r3, r3, r1
 801a03c:	42ab      	cmp	r3, r5
 801a03e:	dcf2      	bgt.n	801a026 <_printf_i+0x212>
 801a040:	e7eb      	b.n	801a01a <_printf_i+0x206>
 801a042:	2500      	movs	r5, #0
 801a044:	f104 0619 	add.w	r6, r4, #25
 801a048:	e7f5      	b.n	801a036 <_printf_i+0x222>
 801a04a:	bf00      	nop
 801a04c:	0801ad09 	.word	0x0801ad09
 801a050:	0801ad1a 	.word	0x0801ad1a

0801a054 <_scanf_chars>:
 801a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a058:	4615      	mov	r5, r2
 801a05a:	688a      	ldr	r2, [r1, #8]
 801a05c:	4680      	mov	r8, r0
 801a05e:	460c      	mov	r4, r1
 801a060:	b932      	cbnz	r2, 801a070 <_scanf_chars+0x1c>
 801a062:	698a      	ldr	r2, [r1, #24]
 801a064:	2a00      	cmp	r2, #0
 801a066:	bf14      	ite	ne
 801a068:	f04f 32ff 	movne.w	r2, #4294967295
 801a06c:	2201      	moveq	r2, #1
 801a06e:	608a      	str	r2, [r1, #8]
 801a070:	6822      	ldr	r2, [r4, #0]
 801a072:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801a104 <_scanf_chars+0xb0>
 801a076:	06d1      	lsls	r1, r2, #27
 801a078:	bf5f      	itttt	pl
 801a07a:	681a      	ldrpl	r2, [r3, #0]
 801a07c:	1d11      	addpl	r1, r2, #4
 801a07e:	6019      	strpl	r1, [r3, #0]
 801a080:	6816      	ldrpl	r6, [r2, #0]
 801a082:	2700      	movs	r7, #0
 801a084:	69a0      	ldr	r0, [r4, #24]
 801a086:	b188      	cbz	r0, 801a0ac <_scanf_chars+0x58>
 801a088:	2801      	cmp	r0, #1
 801a08a:	d107      	bne.n	801a09c <_scanf_chars+0x48>
 801a08c:	682b      	ldr	r3, [r5, #0]
 801a08e:	781a      	ldrb	r2, [r3, #0]
 801a090:	6963      	ldr	r3, [r4, #20]
 801a092:	5c9b      	ldrb	r3, [r3, r2]
 801a094:	b953      	cbnz	r3, 801a0ac <_scanf_chars+0x58>
 801a096:	2f00      	cmp	r7, #0
 801a098:	d031      	beq.n	801a0fe <_scanf_chars+0xaa>
 801a09a:	e022      	b.n	801a0e2 <_scanf_chars+0x8e>
 801a09c:	2802      	cmp	r0, #2
 801a09e:	d120      	bne.n	801a0e2 <_scanf_chars+0x8e>
 801a0a0:	682b      	ldr	r3, [r5, #0]
 801a0a2:	781b      	ldrb	r3, [r3, #0]
 801a0a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 801a0a8:	071b      	lsls	r3, r3, #28
 801a0aa:	d41a      	bmi.n	801a0e2 <_scanf_chars+0x8e>
 801a0ac:	6823      	ldr	r3, [r4, #0]
 801a0ae:	06da      	lsls	r2, r3, #27
 801a0b0:	bf5e      	ittt	pl
 801a0b2:	682b      	ldrpl	r3, [r5, #0]
 801a0b4:	781b      	ldrbpl	r3, [r3, #0]
 801a0b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a0ba:	682a      	ldr	r2, [r5, #0]
 801a0bc:	686b      	ldr	r3, [r5, #4]
 801a0be:	3201      	adds	r2, #1
 801a0c0:	602a      	str	r2, [r5, #0]
 801a0c2:	68a2      	ldr	r2, [r4, #8]
 801a0c4:	3b01      	subs	r3, #1
 801a0c6:	3a01      	subs	r2, #1
 801a0c8:	606b      	str	r3, [r5, #4]
 801a0ca:	3701      	adds	r7, #1
 801a0cc:	60a2      	str	r2, [r4, #8]
 801a0ce:	b142      	cbz	r2, 801a0e2 <_scanf_chars+0x8e>
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	dcd7      	bgt.n	801a084 <_scanf_chars+0x30>
 801a0d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a0d8:	4629      	mov	r1, r5
 801a0da:	4640      	mov	r0, r8
 801a0dc:	4798      	blx	r3
 801a0de:	2800      	cmp	r0, #0
 801a0e0:	d0d0      	beq.n	801a084 <_scanf_chars+0x30>
 801a0e2:	6823      	ldr	r3, [r4, #0]
 801a0e4:	f013 0310 	ands.w	r3, r3, #16
 801a0e8:	d105      	bne.n	801a0f6 <_scanf_chars+0xa2>
 801a0ea:	68e2      	ldr	r2, [r4, #12]
 801a0ec:	3201      	adds	r2, #1
 801a0ee:	60e2      	str	r2, [r4, #12]
 801a0f0:	69a2      	ldr	r2, [r4, #24]
 801a0f2:	b102      	cbz	r2, 801a0f6 <_scanf_chars+0xa2>
 801a0f4:	7033      	strb	r3, [r6, #0]
 801a0f6:	6923      	ldr	r3, [r4, #16]
 801a0f8:	443b      	add	r3, r7
 801a0fa:	6123      	str	r3, [r4, #16]
 801a0fc:	2000      	movs	r0, #0
 801a0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a102:	bf00      	nop
 801a104:	0801a971 	.word	0x0801a971

0801a108 <_scanf_i>:
 801a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a10c:	4698      	mov	r8, r3
 801a10e:	4b74      	ldr	r3, [pc, #464]	@ (801a2e0 <_scanf_i+0x1d8>)
 801a110:	460c      	mov	r4, r1
 801a112:	4682      	mov	sl, r0
 801a114:	4616      	mov	r6, r2
 801a116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a11a:	b087      	sub	sp, #28
 801a11c:	ab03      	add	r3, sp, #12
 801a11e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a122:	4b70      	ldr	r3, [pc, #448]	@ (801a2e4 <_scanf_i+0x1dc>)
 801a124:	69a1      	ldr	r1, [r4, #24]
 801a126:	4a70      	ldr	r2, [pc, #448]	@ (801a2e8 <_scanf_i+0x1e0>)
 801a128:	2903      	cmp	r1, #3
 801a12a:	bf08      	it	eq
 801a12c:	461a      	moveq	r2, r3
 801a12e:	68a3      	ldr	r3, [r4, #8]
 801a130:	9201      	str	r2, [sp, #4]
 801a132:	1e5a      	subs	r2, r3, #1
 801a134:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801a138:	bf88      	it	hi
 801a13a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801a13e:	4627      	mov	r7, r4
 801a140:	bf82      	ittt	hi
 801a142:	eb03 0905 	addhi.w	r9, r3, r5
 801a146:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801a14a:	60a3      	strhi	r3, [r4, #8]
 801a14c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a150:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801a154:	bf98      	it	ls
 801a156:	f04f 0900 	movls.w	r9, #0
 801a15a:	6023      	str	r3, [r4, #0]
 801a15c:	463d      	mov	r5, r7
 801a15e:	f04f 0b00 	mov.w	fp, #0
 801a162:	6831      	ldr	r1, [r6, #0]
 801a164:	ab03      	add	r3, sp, #12
 801a166:	7809      	ldrb	r1, [r1, #0]
 801a168:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a16c:	2202      	movs	r2, #2
 801a16e:	f7e6 f8bf 	bl	80002f0 <memchr>
 801a172:	b328      	cbz	r0, 801a1c0 <_scanf_i+0xb8>
 801a174:	f1bb 0f01 	cmp.w	fp, #1
 801a178:	d159      	bne.n	801a22e <_scanf_i+0x126>
 801a17a:	6862      	ldr	r2, [r4, #4]
 801a17c:	b92a      	cbnz	r2, 801a18a <_scanf_i+0x82>
 801a17e:	6822      	ldr	r2, [r4, #0]
 801a180:	2108      	movs	r1, #8
 801a182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801a186:	6061      	str	r1, [r4, #4]
 801a188:	6022      	str	r2, [r4, #0]
 801a18a:	6822      	ldr	r2, [r4, #0]
 801a18c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801a190:	6022      	str	r2, [r4, #0]
 801a192:	68a2      	ldr	r2, [r4, #8]
 801a194:	1e51      	subs	r1, r2, #1
 801a196:	60a1      	str	r1, [r4, #8]
 801a198:	b192      	cbz	r2, 801a1c0 <_scanf_i+0xb8>
 801a19a:	6832      	ldr	r2, [r6, #0]
 801a19c:	1c51      	adds	r1, r2, #1
 801a19e:	6031      	str	r1, [r6, #0]
 801a1a0:	7812      	ldrb	r2, [r2, #0]
 801a1a2:	f805 2b01 	strb.w	r2, [r5], #1
 801a1a6:	6872      	ldr	r2, [r6, #4]
 801a1a8:	3a01      	subs	r2, #1
 801a1aa:	2a00      	cmp	r2, #0
 801a1ac:	6072      	str	r2, [r6, #4]
 801a1ae:	dc07      	bgt.n	801a1c0 <_scanf_i+0xb8>
 801a1b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801a1b4:	4631      	mov	r1, r6
 801a1b6:	4650      	mov	r0, sl
 801a1b8:	4790      	blx	r2
 801a1ba:	2800      	cmp	r0, #0
 801a1bc:	f040 8085 	bne.w	801a2ca <_scanf_i+0x1c2>
 801a1c0:	f10b 0b01 	add.w	fp, fp, #1
 801a1c4:	f1bb 0f03 	cmp.w	fp, #3
 801a1c8:	d1cb      	bne.n	801a162 <_scanf_i+0x5a>
 801a1ca:	6863      	ldr	r3, [r4, #4]
 801a1cc:	b90b      	cbnz	r3, 801a1d2 <_scanf_i+0xca>
 801a1ce:	230a      	movs	r3, #10
 801a1d0:	6063      	str	r3, [r4, #4]
 801a1d2:	6863      	ldr	r3, [r4, #4]
 801a1d4:	4945      	ldr	r1, [pc, #276]	@ (801a2ec <_scanf_i+0x1e4>)
 801a1d6:	6960      	ldr	r0, [r4, #20]
 801a1d8:	1ac9      	subs	r1, r1, r3
 801a1da:	f000 f8fd 	bl	801a3d8 <__sccl>
 801a1de:	f04f 0b00 	mov.w	fp, #0
 801a1e2:	68a3      	ldr	r3, [r4, #8]
 801a1e4:	6822      	ldr	r2, [r4, #0]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d03d      	beq.n	801a266 <_scanf_i+0x15e>
 801a1ea:	6831      	ldr	r1, [r6, #0]
 801a1ec:	6960      	ldr	r0, [r4, #20]
 801a1ee:	f891 c000 	ldrb.w	ip, [r1]
 801a1f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	d035      	beq.n	801a266 <_scanf_i+0x15e>
 801a1fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801a1fe:	d124      	bne.n	801a24a <_scanf_i+0x142>
 801a200:	0510      	lsls	r0, r2, #20
 801a202:	d522      	bpl.n	801a24a <_scanf_i+0x142>
 801a204:	f10b 0b01 	add.w	fp, fp, #1
 801a208:	f1b9 0f00 	cmp.w	r9, #0
 801a20c:	d003      	beq.n	801a216 <_scanf_i+0x10e>
 801a20e:	3301      	adds	r3, #1
 801a210:	f109 39ff 	add.w	r9, r9, #4294967295
 801a214:	60a3      	str	r3, [r4, #8]
 801a216:	6873      	ldr	r3, [r6, #4]
 801a218:	3b01      	subs	r3, #1
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	6073      	str	r3, [r6, #4]
 801a21e:	dd1b      	ble.n	801a258 <_scanf_i+0x150>
 801a220:	6833      	ldr	r3, [r6, #0]
 801a222:	3301      	adds	r3, #1
 801a224:	6033      	str	r3, [r6, #0]
 801a226:	68a3      	ldr	r3, [r4, #8]
 801a228:	3b01      	subs	r3, #1
 801a22a:	60a3      	str	r3, [r4, #8]
 801a22c:	e7d9      	b.n	801a1e2 <_scanf_i+0xda>
 801a22e:	f1bb 0f02 	cmp.w	fp, #2
 801a232:	d1ae      	bne.n	801a192 <_scanf_i+0x8a>
 801a234:	6822      	ldr	r2, [r4, #0]
 801a236:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801a23a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801a23e:	d1bf      	bne.n	801a1c0 <_scanf_i+0xb8>
 801a240:	2110      	movs	r1, #16
 801a242:	6061      	str	r1, [r4, #4]
 801a244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801a248:	e7a2      	b.n	801a190 <_scanf_i+0x88>
 801a24a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801a24e:	6022      	str	r2, [r4, #0]
 801a250:	780b      	ldrb	r3, [r1, #0]
 801a252:	f805 3b01 	strb.w	r3, [r5], #1
 801a256:	e7de      	b.n	801a216 <_scanf_i+0x10e>
 801a258:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a25c:	4631      	mov	r1, r6
 801a25e:	4650      	mov	r0, sl
 801a260:	4798      	blx	r3
 801a262:	2800      	cmp	r0, #0
 801a264:	d0df      	beq.n	801a226 <_scanf_i+0x11e>
 801a266:	6823      	ldr	r3, [r4, #0]
 801a268:	05d9      	lsls	r1, r3, #23
 801a26a:	d50d      	bpl.n	801a288 <_scanf_i+0x180>
 801a26c:	42bd      	cmp	r5, r7
 801a26e:	d909      	bls.n	801a284 <_scanf_i+0x17c>
 801a270:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a274:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a278:	4632      	mov	r2, r6
 801a27a:	4650      	mov	r0, sl
 801a27c:	4798      	blx	r3
 801a27e:	f105 39ff 	add.w	r9, r5, #4294967295
 801a282:	464d      	mov	r5, r9
 801a284:	42bd      	cmp	r5, r7
 801a286:	d028      	beq.n	801a2da <_scanf_i+0x1d2>
 801a288:	6822      	ldr	r2, [r4, #0]
 801a28a:	f012 0210 	ands.w	r2, r2, #16
 801a28e:	d113      	bne.n	801a2b8 <_scanf_i+0x1b0>
 801a290:	702a      	strb	r2, [r5, #0]
 801a292:	6863      	ldr	r3, [r4, #4]
 801a294:	9e01      	ldr	r6, [sp, #4]
 801a296:	4639      	mov	r1, r7
 801a298:	4650      	mov	r0, sl
 801a29a:	47b0      	blx	r6
 801a29c:	f8d8 3000 	ldr.w	r3, [r8]
 801a2a0:	6821      	ldr	r1, [r4, #0]
 801a2a2:	1d1a      	adds	r2, r3, #4
 801a2a4:	f8c8 2000 	str.w	r2, [r8]
 801a2a8:	f011 0f20 	tst.w	r1, #32
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	d00f      	beq.n	801a2d0 <_scanf_i+0x1c8>
 801a2b0:	6018      	str	r0, [r3, #0]
 801a2b2:	68e3      	ldr	r3, [r4, #12]
 801a2b4:	3301      	adds	r3, #1
 801a2b6:	60e3      	str	r3, [r4, #12]
 801a2b8:	6923      	ldr	r3, [r4, #16]
 801a2ba:	1bed      	subs	r5, r5, r7
 801a2bc:	445d      	add	r5, fp
 801a2be:	442b      	add	r3, r5
 801a2c0:	6123      	str	r3, [r4, #16]
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	b007      	add	sp, #28
 801a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ca:	f04f 0b00 	mov.w	fp, #0
 801a2ce:	e7ca      	b.n	801a266 <_scanf_i+0x15e>
 801a2d0:	07ca      	lsls	r2, r1, #31
 801a2d2:	bf4c      	ite	mi
 801a2d4:	8018      	strhmi	r0, [r3, #0]
 801a2d6:	6018      	strpl	r0, [r3, #0]
 801a2d8:	e7eb      	b.n	801a2b2 <_scanf_i+0x1aa>
 801a2da:	2001      	movs	r0, #1
 801a2dc:	e7f2      	b.n	801a2c4 <_scanf_i+0x1bc>
 801a2de:	bf00      	nop
 801a2e0:	0801a89c 	.word	0x0801a89c
 801a2e4:	0801761d 	.word	0x0801761d
 801a2e8:	0801a6a9 	.word	0x0801a6a9
 801a2ec:	0801ad3b 	.word	0x0801ad3b

0801a2f0 <fiprintf>:
 801a2f0:	b40e      	push	{r1, r2, r3}
 801a2f2:	b503      	push	{r0, r1, lr}
 801a2f4:	4601      	mov	r1, r0
 801a2f6:	ab03      	add	r3, sp, #12
 801a2f8:	4805      	ldr	r0, [pc, #20]	@ (801a310 <fiprintf+0x20>)
 801a2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2fe:	6800      	ldr	r0, [r0, #0]
 801a300:	9301      	str	r3, [sp, #4]
 801a302:	f7ff fc01 	bl	8019b08 <_vfiprintf_r>
 801a306:	b002      	add	sp, #8
 801a308:	f85d eb04 	ldr.w	lr, [sp], #4
 801a30c:	b003      	add	sp, #12
 801a30e:	4770      	bx	lr
 801a310:	24000280 	.word	0x24000280

0801a314 <__swhatbuf_r>:
 801a314:	b570      	push	{r4, r5, r6, lr}
 801a316:	460c      	mov	r4, r1
 801a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a31c:	2900      	cmp	r1, #0
 801a31e:	b096      	sub	sp, #88	@ 0x58
 801a320:	4615      	mov	r5, r2
 801a322:	461e      	mov	r6, r3
 801a324:	da0d      	bge.n	801a342 <__swhatbuf_r+0x2e>
 801a326:	89a3      	ldrh	r3, [r4, #12]
 801a328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a32c:	f04f 0100 	mov.w	r1, #0
 801a330:	bf14      	ite	ne
 801a332:	2340      	movne	r3, #64	@ 0x40
 801a334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a338:	2000      	movs	r0, #0
 801a33a:	6031      	str	r1, [r6, #0]
 801a33c:	602b      	str	r3, [r5, #0]
 801a33e:	b016      	add	sp, #88	@ 0x58
 801a340:	bd70      	pop	{r4, r5, r6, pc}
 801a342:	466a      	mov	r2, sp
 801a344:	f000 f8d6 	bl	801a4f4 <_fstat_r>
 801a348:	2800      	cmp	r0, #0
 801a34a:	dbec      	blt.n	801a326 <__swhatbuf_r+0x12>
 801a34c:	9901      	ldr	r1, [sp, #4]
 801a34e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a356:	4259      	negs	r1, r3
 801a358:	4159      	adcs	r1, r3
 801a35a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a35e:	e7eb      	b.n	801a338 <__swhatbuf_r+0x24>

0801a360 <__smakebuf_r>:
 801a360:	898b      	ldrh	r3, [r1, #12]
 801a362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a364:	079d      	lsls	r5, r3, #30
 801a366:	4606      	mov	r6, r0
 801a368:	460c      	mov	r4, r1
 801a36a:	d507      	bpl.n	801a37c <__smakebuf_r+0x1c>
 801a36c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a370:	6023      	str	r3, [r4, #0]
 801a372:	6123      	str	r3, [r4, #16]
 801a374:	2301      	movs	r3, #1
 801a376:	6163      	str	r3, [r4, #20]
 801a378:	b003      	add	sp, #12
 801a37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a37c:	ab01      	add	r3, sp, #4
 801a37e:	466a      	mov	r2, sp
 801a380:	f7ff ffc8 	bl	801a314 <__swhatbuf_r>
 801a384:	9f00      	ldr	r7, [sp, #0]
 801a386:	4605      	mov	r5, r0
 801a388:	4639      	mov	r1, r7
 801a38a:	4630      	mov	r0, r6
 801a38c:	f7fc fa7e 	bl	801688c <_malloc_r>
 801a390:	b948      	cbnz	r0, 801a3a6 <__smakebuf_r+0x46>
 801a392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a396:	059a      	lsls	r2, r3, #22
 801a398:	d4ee      	bmi.n	801a378 <__smakebuf_r+0x18>
 801a39a:	f023 0303 	bic.w	r3, r3, #3
 801a39e:	f043 0302 	orr.w	r3, r3, #2
 801a3a2:	81a3      	strh	r3, [r4, #12]
 801a3a4:	e7e2      	b.n	801a36c <__smakebuf_r+0xc>
 801a3a6:	89a3      	ldrh	r3, [r4, #12]
 801a3a8:	6020      	str	r0, [r4, #0]
 801a3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a3ae:	81a3      	strh	r3, [r4, #12]
 801a3b0:	9b01      	ldr	r3, [sp, #4]
 801a3b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a3b6:	b15b      	cbz	r3, 801a3d0 <__smakebuf_r+0x70>
 801a3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3bc:	4630      	mov	r0, r6
 801a3be:	f000 f8ab 	bl	801a518 <_isatty_r>
 801a3c2:	b128      	cbz	r0, 801a3d0 <__smakebuf_r+0x70>
 801a3c4:	89a3      	ldrh	r3, [r4, #12]
 801a3c6:	f023 0303 	bic.w	r3, r3, #3
 801a3ca:	f043 0301 	orr.w	r3, r3, #1
 801a3ce:	81a3      	strh	r3, [r4, #12]
 801a3d0:	89a3      	ldrh	r3, [r4, #12]
 801a3d2:	431d      	orrs	r5, r3
 801a3d4:	81a5      	strh	r5, [r4, #12]
 801a3d6:	e7cf      	b.n	801a378 <__smakebuf_r+0x18>

0801a3d8 <__sccl>:
 801a3d8:	b570      	push	{r4, r5, r6, lr}
 801a3da:	780b      	ldrb	r3, [r1, #0]
 801a3dc:	4604      	mov	r4, r0
 801a3de:	2b5e      	cmp	r3, #94	@ 0x5e
 801a3e0:	bf0b      	itete	eq
 801a3e2:	784b      	ldrbeq	r3, [r1, #1]
 801a3e4:	1c4a      	addne	r2, r1, #1
 801a3e6:	1c8a      	addeq	r2, r1, #2
 801a3e8:	2100      	movne	r1, #0
 801a3ea:	bf08      	it	eq
 801a3ec:	2101      	moveq	r1, #1
 801a3ee:	3801      	subs	r0, #1
 801a3f0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801a3f4:	f800 1f01 	strb.w	r1, [r0, #1]!
 801a3f8:	42a8      	cmp	r0, r5
 801a3fa:	d1fb      	bne.n	801a3f4 <__sccl+0x1c>
 801a3fc:	b90b      	cbnz	r3, 801a402 <__sccl+0x2a>
 801a3fe:	1e50      	subs	r0, r2, #1
 801a400:	bd70      	pop	{r4, r5, r6, pc}
 801a402:	f081 0101 	eor.w	r1, r1, #1
 801a406:	54e1      	strb	r1, [r4, r3]
 801a408:	4610      	mov	r0, r2
 801a40a:	4602      	mov	r2, r0
 801a40c:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a410:	2d2d      	cmp	r5, #45	@ 0x2d
 801a412:	d005      	beq.n	801a420 <__sccl+0x48>
 801a414:	2d5d      	cmp	r5, #93	@ 0x5d
 801a416:	d016      	beq.n	801a446 <__sccl+0x6e>
 801a418:	2d00      	cmp	r5, #0
 801a41a:	d0f1      	beq.n	801a400 <__sccl+0x28>
 801a41c:	462b      	mov	r3, r5
 801a41e:	e7f2      	b.n	801a406 <__sccl+0x2e>
 801a420:	7846      	ldrb	r6, [r0, #1]
 801a422:	2e5d      	cmp	r6, #93	@ 0x5d
 801a424:	d0fa      	beq.n	801a41c <__sccl+0x44>
 801a426:	42b3      	cmp	r3, r6
 801a428:	dcf8      	bgt.n	801a41c <__sccl+0x44>
 801a42a:	3002      	adds	r0, #2
 801a42c:	461a      	mov	r2, r3
 801a42e:	3201      	adds	r2, #1
 801a430:	4296      	cmp	r6, r2
 801a432:	54a1      	strb	r1, [r4, r2]
 801a434:	dcfb      	bgt.n	801a42e <__sccl+0x56>
 801a436:	1af2      	subs	r2, r6, r3
 801a438:	3a01      	subs	r2, #1
 801a43a:	1c5d      	adds	r5, r3, #1
 801a43c:	42b3      	cmp	r3, r6
 801a43e:	bfa8      	it	ge
 801a440:	2200      	movge	r2, #0
 801a442:	18ab      	adds	r3, r5, r2
 801a444:	e7e1      	b.n	801a40a <__sccl+0x32>
 801a446:	4610      	mov	r0, r2
 801a448:	e7da      	b.n	801a400 <__sccl+0x28>

0801a44a <__submore>:
 801a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a44e:	460c      	mov	r4, r1
 801a450:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801a452:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a456:	4299      	cmp	r1, r3
 801a458:	d11d      	bne.n	801a496 <__submore+0x4c>
 801a45a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801a45e:	f7fc fa15 	bl	801688c <_malloc_r>
 801a462:	b918      	cbnz	r0, 801a46c <__submore+0x22>
 801a464:	f04f 30ff 	mov.w	r0, #4294967295
 801a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a46c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a470:	63a3      	str	r3, [r4, #56]	@ 0x38
 801a472:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801a476:	6360      	str	r0, [r4, #52]	@ 0x34
 801a478:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801a47c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801a480:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801a484:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801a488:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801a48c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801a490:	6020      	str	r0, [r4, #0]
 801a492:	2000      	movs	r0, #0
 801a494:	e7e8      	b.n	801a468 <__submore+0x1e>
 801a496:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801a498:	0077      	lsls	r7, r6, #1
 801a49a:	463a      	mov	r2, r7
 801a49c:	f000 f867 	bl	801a56e <_realloc_r>
 801a4a0:	4605      	mov	r5, r0
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d0de      	beq.n	801a464 <__submore+0x1a>
 801a4a6:	eb00 0806 	add.w	r8, r0, r6
 801a4aa:	4601      	mov	r1, r0
 801a4ac:	4632      	mov	r2, r6
 801a4ae:	4640      	mov	r0, r8
 801a4b0:	f7fd ff4d 	bl	801834e <memcpy>
 801a4b4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801a4b8:	f8c4 8000 	str.w	r8, [r4]
 801a4bc:	e7e9      	b.n	801a492 <__submore+0x48>

0801a4be <memmove>:
 801a4be:	4288      	cmp	r0, r1
 801a4c0:	b510      	push	{r4, lr}
 801a4c2:	eb01 0402 	add.w	r4, r1, r2
 801a4c6:	d902      	bls.n	801a4ce <memmove+0x10>
 801a4c8:	4284      	cmp	r4, r0
 801a4ca:	4623      	mov	r3, r4
 801a4cc:	d807      	bhi.n	801a4de <memmove+0x20>
 801a4ce:	1e43      	subs	r3, r0, #1
 801a4d0:	42a1      	cmp	r1, r4
 801a4d2:	d008      	beq.n	801a4e6 <memmove+0x28>
 801a4d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4dc:	e7f8      	b.n	801a4d0 <memmove+0x12>
 801a4de:	4402      	add	r2, r0
 801a4e0:	4601      	mov	r1, r0
 801a4e2:	428a      	cmp	r2, r1
 801a4e4:	d100      	bne.n	801a4e8 <memmove+0x2a>
 801a4e6:	bd10      	pop	{r4, pc}
 801a4e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a4f0:	e7f7      	b.n	801a4e2 <memmove+0x24>
	...

0801a4f4 <_fstat_r>:
 801a4f4:	b538      	push	{r3, r4, r5, lr}
 801a4f6:	4d07      	ldr	r5, [pc, #28]	@ (801a514 <_fstat_r+0x20>)
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	4604      	mov	r4, r0
 801a4fc:	4608      	mov	r0, r1
 801a4fe:	4611      	mov	r1, r2
 801a500:	602b      	str	r3, [r5, #0]
 801a502:	f7e8 f8f7 	bl	80026f4 <_fstat>
 801a506:	1c43      	adds	r3, r0, #1
 801a508:	d102      	bne.n	801a510 <_fstat_r+0x1c>
 801a50a:	682b      	ldr	r3, [r5, #0]
 801a50c:	b103      	cbz	r3, 801a510 <_fstat_r+0x1c>
 801a50e:	6023      	str	r3, [r4, #0]
 801a510:	bd38      	pop	{r3, r4, r5, pc}
 801a512:	bf00      	nop
 801a514:	240776c8 	.word	0x240776c8

0801a518 <_isatty_r>:
 801a518:	b538      	push	{r3, r4, r5, lr}
 801a51a:	4d06      	ldr	r5, [pc, #24]	@ (801a534 <_isatty_r+0x1c>)
 801a51c:	2300      	movs	r3, #0
 801a51e:	4604      	mov	r4, r0
 801a520:	4608      	mov	r0, r1
 801a522:	602b      	str	r3, [r5, #0]
 801a524:	f7e8 f8f6 	bl	8002714 <_isatty>
 801a528:	1c43      	adds	r3, r0, #1
 801a52a:	d102      	bne.n	801a532 <_isatty_r+0x1a>
 801a52c:	682b      	ldr	r3, [r5, #0]
 801a52e:	b103      	cbz	r3, 801a532 <_isatty_r+0x1a>
 801a530:	6023      	str	r3, [r4, #0]
 801a532:	bd38      	pop	{r3, r4, r5, pc}
 801a534:	240776c8 	.word	0x240776c8

0801a538 <abort>:
 801a538:	b508      	push	{r3, lr}
 801a53a:	2006      	movs	r0, #6
 801a53c:	f000 f8de 	bl	801a6fc <raise>
 801a540:	2001      	movs	r0, #1
 801a542:	f7e8 f8a3 	bl	800268c <_exit>

0801a546 <_calloc_r>:
 801a546:	b570      	push	{r4, r5, r6, lr}
 801a548:	fba1 5402 	umull	r5, r4, r1, r2
 801a54c:	b93c      	cbnz	r4, 801a55e <_calloc_r+0x18>
 801a54e:	4629      	mov	r1, r5
 801a550:	f7fc f99c 	bl	801688c <_malloc_r>
 801a554:	4606      	mov	r6, r0
 801a556:	b928      	cbnz	r0, 801a564 <_calloc_r+0x1e>
 801a558:	2600      	movs	r6, #0
 801a55a:	4630      	mov	r0, r6
 801a55c:	bd70      	pop	{r4, r5, r6, pc}
 801a55e:	220c      	movs	r2, #12
 801a560:	6002      	str	r2, [r0, #0]
 801a562:	e7f9      	b.n	801a558 <_calloc_r+0x12>
 801a564:	462a      	mov	r2, r5
 801a566:	4621      	mov	r1, r4
 801a568:	f7fd fd86 	bl	8018078 <memset>
 801a56c:	e7f5      	b.n	801a55a <_calloc_r+0x14>

0801a56e <_realloc_r>:
 801a56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a572:	4680      	mov	r8, r0
 801a574:	4615      	mov	r5, r2
 801a576:	460c      	mov	r4, r1
 801a578:	b921      	cbnz	r1, 801a584 <_realloc_r+0x16>
 801a57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a57e:	4611      	mov	r1, r2
 801a580:	f7fc b984 	b.w	801688c <_malloc_r>
 801a584:	b92a      	cbnz	r2, 801a592 <_realloc_r+0x24>
 801a586:	f7fd ff1f 	bl	80183c8 <_free_r>
 801a58a:	2400      	movs	r4, #0
 801a58c:	4620      	mov	r0, r4
 801a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a592:	f000 f8cf 	bl	801a734 <_malloc_usable_size_r>
 801a596:	4285      	cmp	r5, r0
 801a598:	4606      	mov	r6, r0
 801a59a:	d802      	bhi.n	801a5a2 <_realloc_r+0x34>
 801a59c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801a5a0:	d8f4      	bhi.n	801a58c <_realloc_r+0x1e>
 801a5a2:	4629      	mov	r1, r5
 801a5a4:	4640      	mov	r0, r8
 801a5a6:	f7fc f971 	bl	801688c <_malloc_r>
 801a5aa:	4607      	mov	r7, r0
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	d0ec      	beq.n	801a58a <_realloc_r+0x1c>
 801a5b0:	42b5      	cmp	r5, r6
 801a5b2:	462a      	mov	r2, r5
 801a5b4:	4621      	mov	r1, r4
 801a5b6:	bf28      	it	cs
 801a5b8:	4632      	movcs	r2, r6
 801a5ba:	f7fd fec8 	bl	801834e <memcpy>
 801a5be:	4621      	mov	r1, r4
 801a5c0:	4640      	mov	r0, r8
 801a5c2:	f7fd ff01 	bl	80183c8 <_free_r>
 801a5c6:	463c      	mov	r4, r7
 801a5c8:	e7e0      	b.n	801a58c <_realloc_r+0x1e>
	...

0801a5cc <_strtoul_l.constprop.0>:
 801a5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5d0:	4e34      	ldr	r6, [pc, #208]	@ (801a6a4 <_strtoul_l.constprop.0+0xd8>)
 801a5d2:	4686      	mov	lr, r0
 801a5d4:	460d      	mov	r5, r1
 801a5d6:	4628      	mov	r0, r5
 801a5d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5dc:	5d37      	ldrb	r7, [r6, r4]
 801a5de:	f017 0708 	ands.w	r7, r7, #8
 801a5e2:	d1f8      	bne.n	801a5d6 <_strtoul_l.constprop.0+0xa>
 801a5e4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a5e6:	d12f      	bne.n	801a648 <_strtoul_l.constprop.0+0x7c>
 801a5e8:	782c      	ldrb	r4, [r5, #0]
 801a5ea:	2701      	movs	r7, #1
 801a5ec:	1c85      	adds	r5, r0, #2
 801a5ee:	f033 0010 	bics.w	r0, r3, #16
 801a5f2:	d109      	bne.n	801a608 <_strtoul_l.constprop.0+0x3c>
 801a5f4:	2c30      	cmp	r4, #48	@ 0x30
 801a5f6:	d12c      	bne.n	801a652 <_strtoul_l.constprop.0+0x86>
 801a5f8:	7828      	ldrb	r0, [r5, #0]
 801a5fa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a5fe:	2858      	cmp	r0, #88	@ 0x58
 801a600:	d127      	bne.n	801a652 <_strtoul_l.constprop.0+0x86>
 801a602:	786c      	ldrb	r4, [r5, #1]
 801a604:	2310      	movs	r3, #16
 801a606:	3502      	adds	r5, #2
 801a608:	f04f 38ff 	mov.w	r8, #4294967295
 801a60c:	2600      	movs	r6, #0
 801a60e:	fbb8 f8f3 	udiv	r8, r8, r3
 801a612:	fb03 f908 	mul.w	r9, r3, r8
 801a616:	ea6f 0909 	mvn.w	r9, r9
 801a61a:	4630      	mov	r0, r6
 801a61c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a620:	f1bc 0f09 	cmp.w	ip, #9
 801a624:	d81c      	bhi.n	801a660 <_strtoul_l.constprop.0+0x94>
 801a626:	4664      	mov	r4, ip
 801a628:	42a3      	cmp	r3, r4
 801a62a:	dd2a      	ble.n	801a682 <_strtoul_l.constprop.0+0xb6>
 801a62c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801a630:	d007      	beq.n	801a642 <_strtoul_l.constprop.0+0x76>
 801a632:	4580      	cmp	r8, r0
 801a634:	d322      	bcc.n	801a67c <_strtoul_l.constprop.0+0xb0>
 801a636:	d101      	bne.n	801a63c <_strtoul_l.constprop.0+0x70>
 801a638:	45a1      	cmp	r9, r4
 801a63a:	db1f      	blt.n	801a67c <_strtoul_l.constprop.0+0xb0>
 801a63c:	fb00 4003 	mla	r0, r0, r3, r4
 801a640:	2601      	movs	r6, #1
 801a642:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a646:	e7e9      	b.n	801a61c <_strtoul_l.constprop.0+0x50>
 801a648:	2c2b      	cmp	r4, #43	@ 0x2b
 801a64a:	bf04      	itt	eq
 801a64c:	782c      	ldrbeq	r4, [r5, #0]
 801a64e:	1c85      	addeq	r5, r0, #2
 801a650:	e7cd      	b.n	801a5ee <_strtoul_l.constprop.0+0x22>
 801a652:	2b00      	cmp	r3, #0
 801a654:	d1d8      	bne.n	801a608 <_strtoul_l.constprop.0+0x3c>
 801a656:	2c30      	cmp	r4, #48	@ 0x30
 801a658:	bf0c      	ite	eq
 801a65a:	2308      	moveq	r3, #8
 801a65c:	230a      	movne	r3, #10
 801a65e:	e7d3      	b.n	801a608 <_strtoul_l.constprop.0+0x3c>
 801a660:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a664:	f1bc 0f19 	cmp.w	ip, #25
 801a668:	d801      	bhi.n	801a66e <_strtoul_l.constprop.0+0xa2>
 801a66a:	3c37      	subs	r4, #55	@ 0x37
 801a66c:	e7dc      	b.n	801a628 <_strtoul_l.constprop.0+0x5c>
 801a66e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a672:	f1bc 0f19 	cmp.w	ip, #25
 801a676:	d804      	bhi.n	801a682 <_strtoul_l.constprop.0+0xb6>
 801a678:	3c57      	subs	r4, #87	@ 0x57
 801a67a:	e7d5      	b.n	801a628 <_strtoul_l.constprop.0+0x5c>
 801a67c:	f04f 36ff 	mov.w	r6, #4294967295
 801a680:	e7df      	b.n	801a642 <_strtoul_l.constprop.0+0x76>
 801a682:	1c73      	adds	r3, r6, #1
 801a684:	d106      	bne.n	801a694 <_strtoul_l.constprop.0+0xc8>
 801a686:	2322      	movs	r3, #34	@ 0x22
 801a688:	f8ce 3000 	str.w	r3, [lr]
 801a68c:	4630      	mov	r0, r6
 801a68e:	b932      	cbnz	r2, 801a69e <_strtoul_l.constprop.0+0xd2>
 801a690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a694:	b107      	cbz	r7, 801a698 <_strtoul_l.constprop.0+0xcc>
 801a696:	4240      	negs	r0, r0
 801a698:	2a00      	cmp	r2, #0
 801a69a:	d0f9      	beq.n	801a690 <_strtoul_l.constprop.0+0xc4>
 801a69c:	b106      	cbz	r6, 801a6a0 <_strtoul_l.constprop.0+0xd4>
 801a69e:	1e69      	subs	r1, r5, #1
 801a6a0:	6011      	str	r1, [r2, #0]
 801a6a2:	e7f5      	b.n	801a690 <_strtoul_l.constprop.0+0xc4>
 801a6a4:	0801a971 	.word	0x0801a971

0801a6a8 <_strtoul_r>:
 801a6a8:	f7ff bf90 	b.w	801a5cc <_strtoul_l.constprop.0>

0801a6ac <_raise_r>:
 801a6ac:	291f      	cmp	r1, #31
 801a6ae:	b538      	push	{r3, r4, r5, lr}
 801a6b0:	4605      	mov	r5, r0
 801a6b2:	460c      	mov	r4, r1
 801a6b4:	d904      	bls.n	801a6c0 <_raise_r+0x14>
 801a6b6:	2316      	movs	r3, #22
 801a6b8:	6003      	str	r3, [r0, #0]
 801a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a6be:	bd38      	pop	{r3, r4, r5, pc}
 801a6c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a6c2:	b112      	cbz	r2, 801a6ca <_raise_r+0x1e>
 801a6c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a6c8:	b94b      	cbnz	r3, 801a6de <_raise_r+0x32>
 801a6ca:	4628      	mov	r0, r5
 801a6cc:	f000 f830 	bl	801a730 <_getpid_r>
 801a6d0:	4622      	mov	r2, r4
 801a6d2:	4601      	mov	r1, r0
 801a6d4:	4628      	mov	r0, r5
 801a6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a6da:	f000 b817 	b.w	801a70c <_kill_r>
 801a6de:	2b01      	cmp	r3, #1
 801a6e0:	d00a      	beq.n	801a6f8 <_raise_r+0x4c>
 801a6e2:	1c59      	adds	r1, r3, #1
 801a6e4:	d103      	bne.n	801a6ee <_raise_r+0x42>
 801a6e6:	2316      	movs	r3, #22
 801a6e8:	6003      	str	r3, [r0, #0]
 801a6ea:	2001      	movs	r0, #1
 801a6ec:	e7e7      	b.n	801a6be <_raise_r+0x12>
 801a6ee:	2100      	movs	r1, #0
 801a6f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	4798      	blx	r3
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	e7e0      	b.n	801a6be <_raise_r+0x12>

0801a6fc <raise>:
 801a6fc:	4b02      	ldr	r3, [pc, #8]	@ (801a708 <raise+0xc>)
 801a6fe:	4601      	mov	r1, r0
 801a700:	6818      	ldr	r0, [r3, #0]
 801a702:	f7ff bfd3 	b.w	801a6ac <_raise_r>
 801a706:	bf00      	nop
 801a708:	24000280 	.word	0x24000280

0801a70c <_kill_r>:
 801a70c:	b538      	push	{r3, r4, r5, lr}
 801a70e:	4d07      	ldr	r5, [pc, #28]	@ (801a72c <_kill_r+0x20>)
 801a710:	2300      	movs	r3, #0
 801a712:	4604      	mov	r4, r0
 801a714:	4608      	mov	r0, r1
 801a716:	4611      	mov	r1, r2
 801a718:	602b      	str	r3, [r5, #0]
 801a71a:	f7e7 ffa7 	bl	800266c <_kill>
 801a71e:	1c43      	adds	r3, r0, #1
 801a720:	d102      	bne.n	801a728 <_kill_r+0x1c>
 801a722:	682b      	ldr	r3, [r5, #0]
 801a724:	b103      	cbz	r3, 801a728 <_kill_r+0x1c>
 801a726:	6023      	str	r3, [r4, #0]
 801a728:	bd38      	pop	{r3, r4, r5, pc}
 801a72a:	bf00      	nop
 801a72c:	240776c8 	.word	0x240776c8

0801a730 <_getpid_r>:
 801a730:	f7e7 bf94 	b.w	800265c <_getpid>

0801a734 <_malloc_usable_size_r>:
 801a734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a738:	1f18      	subs	r0, r3, #4
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	bfbc      	itt	lt
 801a73e:	580b      	ldrlt	r3, [r1, r0]
 801a740:	18c0      	addlt	r0, r0, r3
 801a742:	4770      	bx	lr

0801a744 <_init>:
 801a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a746:	bf00      	nop
 801a748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a74a:	bc08      	pop	{r3}
 801a74c:	469e      	mov	lr, r3
 801a74e:	4770      	bx	lr

0801a750 <_fini>:
 801a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a752:	bf00      	nop
 801a754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a756:	bc08      	pop	{r3}
 801a758:	469e      	mov	lr, r3
 801a75a:	4770      	bx	lr
